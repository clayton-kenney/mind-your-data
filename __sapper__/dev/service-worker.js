(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1596235831843;

	const files = [
		"service-worker-index.html",
		"1400x450.png",
		"Ellipse-active.png",
		"Ellipse-inactive.png",
		"MYDlogo_large.png",
		"MYDlogo_large_nopwr.png",
		"MYDlogo_nav.png",
		"MYDlogo_small.png",
		"MindYourDataPoster.pdf",
		"bg-group1.png",
		"bg-group2.png",
		"bg-group3.png",
		"bg-vector.png",
		"blank_circle.svg",
		"checked.svg",
		"favicon.png",
		"global.css",
		"lock-active.svg",
		"lock-inactive.svg",
		"logo-192.png",
		"logo-512.png",
		"manifest.json",
		"pins.jpg",
		"poster_mock.jpg",
		"shirt_mock.jpg",
		"successkid.jpg",
		"un_checked.svg"
	];

	const shell = [
		"client/client.23969a41.js",
		"client/index.1e0542d8.js",
		"client/TransHelp.18ca7875.js",
		"client/index.592a0db1.js",
		"client/index_old.5c87fe01.js",
		"client/resources.27936633.js",
		"client/quizmain.c80b482b.js",
		"client/q1.9c764c8a.js",
		"client/q2.a52138d4.js",
		"client/q3.17624b41.js",
		"client/q4.868637df.js",
		"client/q5.a5e65adb.js",
		"client/q6.59024d2f.js",
		"client/q7.d36fc62a.js",
		"client/q8.b319b99e.js",
		"client/q9.74e8d39c.js",
		"client/check1.de2f269f.js",
		"client/check2.81bbb2d8.js",
		"client/check3.6d5f58d0.js",
		"client/Completion.d52c8991.js",
		"client/store.85bb12ec.js",
		"client/Back.ebedc7d1.js",
		"client/Btn.3aaac165.js",
		"client/Detect.82104ddb.js",
		"client/review.9622c3dd.js",
		"client/about.45209275.js",
		"client/index.f138cbcc.js",
		"client/[slug].cfe87dee.js",
		"client/q1archive.b165893e.js",
		"client/Progress.925199c3.js",
		"client/q1dup.7eb52201.js",
		"client/q0.952c9e37.js",
		"client/quiz.2de01d65.js",
		"client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
