(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1595974953223;

	const files = [
		"service-worker-index.html",
		"1400x450.png",
		"Ellipse-active.png",
		"Ellipse-inactive.png",
		"MYDlogo_large.png",
		"MYDlogo_large_nopwr.png",
		"MYDlogo_nav.png",
		"MYDlogo_small.png",
		"bg-group1.png",
		"bg-group2.png",
		"bg-group3.png",
		"bg-vector.png",
		"blank_circle.svg",
		"checked.svg",
		"favicon.png",
		"global.css",
		"lock-active.svg",
		"lock-inactive.svg",
		"logo-192.png",
		"logo-512.png",
		"manifest.json",
		"successkid.jpg",
		"un_checked.svg"
	];

	const shell = [
		"client/client.0bdb16c8.js",
		"client/index.5aacd689.js",
		"client/TransHelp.f60224ea.js",
		"client/index.30cbffe9.js",
		"client/index.44998259.js",
		"client/index_old.12b41d26.js",
		"client/resources.1dd5b0a2.js",
		"client/quizmain.9b13acd9.js",
		"client/q1.e736557e.js",
		"client/q2.c2673870.js",
		"client/q3.7ebc683d.js",
		"client/q4.cfc264d0.js",
		"client/q5.1f0f5699.js",
		"client/q6.4534b1f3.js",
		"client/q7.a4df1215.js",
		"client/q8.405a951d.js",
		"client/q9.f435bc3c.js",
		"client/check1.79da1420.js",
		"client/check2.68dd1d41.js",
		"client/check3.acf7e916.js",
		"client/Completion.1a421f6b.js",
		"client/store.88c3fcf3.js",
		"client/Back.b5b4bf6b.js",
		"client/Btn.fcb76e5b.js",
		"client/Detect.483edfe3.js",
		"client/review.1a66decb.js",
		"client/about.999dec14.js",
		"client/index.06930bb1.js",
		"client/[slug].06bda747.js",
		"client/q1archive.dd8a958c.js",
		"client/Progress.6963d58f.js",
		"client/q1dup.1300cf38.js",
		"client/q0.2c4ea64b.js",
		"client/quiz.e1a9d62f.js",
		"client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
