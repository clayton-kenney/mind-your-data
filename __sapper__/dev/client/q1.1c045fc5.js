import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, L as validate_each_argument, o as createEventDispatcher, O as afterUpdate, v as validate_slots, P as onMount, p as globals, e as element, t as text, f as claim_element, g as children, h as claim_text, b as detach_dev, j as attr_dev, Q as null_to_empty, k as add_location, l as insert_dev, m as append_dev, K as set_data_dev, a as space, q as query_selector_all, c as claim_space, R as listen_dev, n as noop, N as destroy_each } from './client.742452af.js';
import { C as Completion } from './Completion.e34f5150.js';

/* src/routes/quiz/q1.svelte generated by Svelte v3.23.2 */

const { console: console_1, document: document_1 } = globals;
const file = "src/routes/quiz/q1.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (86:2) {#each q1Steps as step}
function create_each_block(ctx) {
	let li;
	let t_value = /*step*/ ctx[10].name + "";
	let t;
	let li_class_value;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", li_class_value = "" + (null_to_empty(/*step*/ ctx[10].classn) + " svelte-dkh3bo"));
			add_location(li, file, 86, 3, 2370);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*q1Steps*/ 1 && t_value !== (t_value = /*step*/ ctx[10].name + "")) set_data_dev(t, t_value);

			if (dirty & /*q1Steps*/ 1 && li_class_value !== (li_class_value = "" + (null_to_empty(/*step*/ ctx[10].classn) + " svelte-dkh3bo"))) {
				attr_dev(li, "class", li_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(86:2) {#each q1Steps as step}",
		ctx
	});

	return block;
}

// (97:1) {#if isActive}
function create_if_block(ctx) {
	let video_1;

	const block = {
		c: function create() {
			video_1 = element("video");
			this.h();
		},
		l: function claim(nodes) {
			video_1 = claim_element(nodes, "VIDEO", { autoplay: true, id: true, class: true });
			children(video_1).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			video_1.autoplay = "true";
			attr_dev(video_1, "id", "videoElement");
			attr_dev(video_1, "class", "svelte-dkh3bo");
			add_location(video_1, file, 97, 2, 2628);
		},
		m: function mount(target, anchor) {
			insert_dev(target, video_1, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(video_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(97:1) {#if isActive}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section0;
	let h3;
	let t1;
	let t2;
	let t3;
	let ul;
	let t4;
	let div;
	let h1;
	let t5;
	let t6;
	let p;
	let t7;
	let t8;
	let section1;
	let button;
	let t9;
	let t10;
	let mounted;
	let dispose;
	let each_value = /*q1Steps*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block = /*isActive*/ ctx[1] && create_if_block(ctx);

	const block = {
		c: function create() {
			t0 = space();
			section0 = element("section");
			h3 = element("h3");
			t1 = text("Webcam Challenge ");
			t2 = text(/*fraction*/ ctx[4]);
			t3 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			div = element("div");
			h1 = element("h1");
			t5 = text(/*headline*/ ctx[2]);
			t6 = space();
			p = element("p");
			t7 = text(/*body*/ ctx[3]);
			t8 = space();
			section1 = element("section");
			button = element("button");
			t9 = text("Next");
			t10 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-11mvzac\"]", document_1.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section0 = claim_element(nodes, "SECTION", { id: true, class: true });
			var section0_nodes = children(section0);
			h3 = claim_element(section0_nodes, "H3", {});
			var h3_nodes = children(h3);
			t1 = claim_text(h3_nodes, "Webcam Challenge ");
			t2 = claim_text(h3_nodes, /*fraction*/ ctx[4]);
			h3_nodes.forEach(detach_dev);
			t3 = claim_space(section0_nodes);
			ul = claim_element(section0_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			section0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", {});
			var h1_nodes = children(h1);
			t5 = claim_text(h1_nodes, /*headline*/ ctx[2]);
			h1_nodes.forEach(detach_dev);
			t6 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t7 = claim_text(p_nodes, /*body*/ ctx[3]);
			p_nodes.forEach(detach_dev);
			t8 = claim_space(div_nodes);
			section1 = claim_element(div_nodes, "SECTION", { id: true });
			var section1_nodes = children(section1);
			button = claim_element(section1_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t9 = claim_text(button_nodes, "Next");
			button_nodes.forEach(detach_dev);
			section1_nodes.forEach(detach_dev);
			t10 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document_1.title = "Webcam Challenge";
			add_location(h3, file, 83, 1, 2298);
			attr_dev(ul, "class", "svelte-dkh3bo");
			add_location(ul, file, 84, 1, 2336);
			attr_dev(section0, "id", "progress");
			attr_dev(section0, "class", "svelte-dkh3bo");
			add_location(section0, file, 82, 0, 2273);
			add_location(h1, file, 91, 1, 2467);
			add_location(p, file, 92, 1, 2488);
			attr_dev(button, "class", "btn-dark svelte-dkh3bo");
			add_location(button, file, 94, 8, 2538);
			attr_dev(section1, "id", "next-skip");
			add_location(section1, file, 93, 1, 2504);
			attr_dev(div, "class", "quiz-holder svelte-dkh3bo");
			add_location(div, file, 90, 0, 2440);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section0, anchor);
			append_dev(section0, h3);
			append_dev(h3, t1);
			append_dev(h3, t2);
			append_dev(section0, t3);
			append_dev(section0, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			insert_dev(target, t4, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(h1, t5);
			append_dev(div, t6);
			append_dev(div, p);
			append_dev(p, t7);
			append_dev(div, t8);
			append_dev(div, section1);
			append_dev(section1, button);
			append_dev(button, t9);
			append_dev(div, t10);
			if (if_block) if_block.m(div, null);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*stepUp*/ ctx[5], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*fraction*/ 16) set_data_dev(t2, /*fraction*/ ctx[4]);

			if (dirty & /*q1Steps*/ 1) {
				each_value = /*q1Steps*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*headline*/ 4) set_data_dev(t5, /*headline*/ ctx[2]);
			if (dirty & /*body*/ 8) set_data_dev(t7, /*body*/ ctx[3]);

			if (/*isActive*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section0);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();

	function complete() {
		dispatch("message", { q1: "true" });
	}

	let q1Steps = [
		{
			stepNum: "1",
			h2: "Is your Webcam Covered?",
			name: "Introduction",
			classn: "complete",
			d: "1 / 3",
			copy: "It’s likely your computer already has a built-in camera, and it’s possible for that camera to be used to spy on you.  <br>  If your webcam for whatever reason has been hacked, the person on the other side can take pictures and video of anything or anyone. No, this isn’t just paranoia–a recent survey conducted by HP found that 10% in the U.S. either know someone whose webcam was hacked or have had their own webcam hacked."
		},
		{
			stepNum: "2",
			h2: "ACTION: Cover Your Webcam",
			name: "Permissions",
			classn: "incomplete",
			d: "2 / 3",
			copy: "Please have your webcam covered and proceed to next step. We will access to your webcam to make sure you covered the webcam properly. Click “Test” button to proceed challenge."
		},
		{
			stepNum: "3",
			h2: "Great! It’s properly covered.",
			name: "Cover your webcam",
			classn: "incomplete",
			d: "3 / 3",
			copy: "Please remember to leave your webcam covered while its not being used. This can prevent..."
		},
		{
			stepNum: "",
			h2: "",
			name: "",
			classn: "",
			d: "",
			copy: ""
		}
	];

	let isActive;

	function stepUp() {
		$$invalidate(7, q++, q);
		$$invalidate(0, q1Steps[q].classn = "complete", q1Steps);

		if (q == 2) {
			$$invalidate(1, isActive = true);
		}

		if (q > 2) {
			complete();
		}
	}

	let video;

	afterUpdate(() => {
		video = document.querySelector("#videoElement");

		if (navigator.mediaDevices.getUserMedia) {
			navigator.mediaDevices.getUserMedia({ video: true }).then(function (stream) {
				video.srcObject = stream;
			}).catch(function (err0r) {
				console.log("Not loaded");
			});
		}
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Q1> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Q1", $$slots, []);

	$$self.$capture_state = () => ({
		onMount,
		afterUpdate,
		createEventDispatcher,
		Completion,
		dispatch,
		complete,
		q1Steps,
		isActive,
		stepUp,
		video,
		q,
		headline,
		body,
		fraction
	});

	$$self.$inject_state = $$props => {
		if ("q1Steps" in $$props) $$invalidate(0, q1Steps = $$props.q1Steps);
		if ("isActive" in $$props) $$invalidate(1, isActive = $$props.isActive);
		if ("video" in $$props) video = $$props.video;
		if ("q" in $$props) $$invalidate(7, q = $$props.q);
		if ("headline" in $$props) $$invalidate(2, headline = $$props.headline);
		if ("body" in $$props) $$invalidate(3, body = $$props.body);
		if ("fraction" in $$props) $$invalidate(4, fraction = $$props.fraction);
	};

	let q;
	let headline;
	let body;
	let fraction;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*q1Steps, q*/ 129) {
			 $$invalidate(2, headline = q1Steps[q].h2);
		}

		if ($$self.$$.dirty & /*q1Steps, q*/ 129) {
			 $$invalidate(3, body = q1Steps[q].copy);
		}

		if ($$self.$$.dirty & /*q1Steps, q*/ 129) {
			 $$invalidate(4, fraction = q1Steps[q].d);
		}
	};

	 $$invalidate(7, q = 0);
	return [q1Steps, isActive, headline, body, fraction, stepUp];
}

class Q1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Q1",
			options,
			id: create_fragment.name
		});
	}
}

export default Q1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicTEuMWMwNDVmYzUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcXVpei9xMS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbmltcG9ydCB7IG9uTW91bnQsIGFmdGVyVXBkYXRlIH0gZnJvbSAnc3ZlbHRlJztcbmltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJ3N2ZWx0ZSc7XG5pbXBvcnQgQ29tcGxldGlvbiBmcm9tICcuLi8uLi9jb21wb25lbnRzL0NvbXBsZXRpb24uc3ZlbHRlJ1xuXG5jb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG5mdW5jdGlvbiBjb21wbGV0ZSgpIHtcblx0ZGlzcGF0Y2goJ21lc3NhZ2UnLCB7XG5cdFx0cTE6ICd0cnVlJ1xuXHR9KTtcbn1cblx0bGV0IHExU3RlcHMgPSBbXG5cdHsgc3RlcE51bTogJzEnLCBcblx0aDI6ICdJcyB5b3VyIFdlYmNhbSBDb3ZlcmVkPycsIFxuXHRuYW1lOiAnSW50cm9kdWN0aW9uJywgXG5cdGNsYXNzbjogJ2NvbXBsZXRlJyxcblx0ZDogJzEgLyAzJyxcblx0Y29weTogJ0l04oCZcyBsaWtlbHkgeW91ciBjb21wdXRlciBhbHJlYWR5IGhhcyBhIGJ1aWx0LWluIGNhbWVyYSwgYW5kIGl04oCZcyBwb3NzaWJsZSBmb3IgdGhhdCBjYW1lcmEgdG8gYmUgdXNlZCB0byBzcHkgb24geW91LiAgPGJyPiAgSWYgeW91ciB3ZWJjYW0gZm9yIHdoYXRldmVyIHJlYXNvbiBoYXMgYmVlbiBoYWNrZWQsIHRoZSBwZXJzb24gb24gdGhlIG90aGVyIHNpZGUgY2FuIHRha2UgcGljdHVyZXMgYW5kIHZpZGVvIG9mIGFueXRoaW5nIG9yIGFueW9uZS4gTm8sIHRoaXMgaXNu4oCZdCBqdXN0IHBhcmFub2lh4oCTYSByZWNlbnQgc3VydmV5IGNvbmR1Y3RlZCBieSBIUCBmb3VuZCB0aGF0IDEwJSBpbiB0aGUgVS5TLiBlaXRoZXIga25vdyBzb21lb25lIHdob3NlIHdlYmNhbSB3YXMgaGFja2VkIG9yIGhhdmUgaGFkIHRoZWlyIG93biB3ZWJjYW0gaGFja2VkLid9LFxuXHR7IHN0ZXBOdW06ICcyJywgXG5cdGgyOiAnQUNUSU9OOiBDb3ZlciBZb3VyIFdlYmNhbScsIFxuXHRuYW1lOiAnUGVybWlzc2lvbnMnLCBcblx0Y2xhc3NuOiAnaW5jb21wbGV0ZScsXG5cdGQ6ICcyIC8gMycsXG5cdGNvcHk6ICdQbGVhc2UgaGF2ZSB5b3VyIHdlYmNhbSBjb3ZlcmVkIGFuZCBwcm9jZWVkIHRvIG5leHQgc3RlcC4gV2Ugd2lsbCBhY2Nlc3MgdG8geW91ciB3ZWJjYW0gdG8gbWFrZSBzdXJlIHlvdSBjb3ZlcmVkIHRoZSB3ZWJjYW0gcHJvcGVybHkuIENsaWNrIOKAnFRlc3TigJ0gYnV0dG9uIHRvIHByb2NlZWQgY2hhbGxlbmdlLid9LFxuXHR7IHN0ZXBOdW06ICczJywgXG5cdGgyOiAnR3JlYXQhIEl04oCZcyBwcm9wZXJseSBjb3ZlcmVkLicsIFxuXHRuYW1lOiAnQ292ZXIgeW91ciB3ZWJjYW0nLCBcblx0Y2xhc3NuOiAnaW5jb21wbGV0ZScsXG5cdGQ6ICczIC8gMycsXG5cdGNvcHk6ICdQbGVhc2UgcmVtZW1iZXIgdG8gbGVhdmUgeW91ciB3ZWJjYW0gY292ZXJlZCB3aGlsZSBpdHMgbm90IGJlaW5nIHVzZWQuIFRoaXMgY2FuIHByZXZlbnQuLi4nfSxcblx0e3N0ZXBOdW06ICcnLFxuXHRoMjogJycsXG5cdG5hbWU6ICcnLFxuXHRjbGFzc246ICcnLFxuXHRkOiAnJyxcblx0Y29weTogJyd9XG4gICAgXVxuXHRcblx0JDogcSA9IDA7XG5cdGxldCBpc0FjdGl2ZTtcblx0ZnVuY3Rpb24gc3RlcFVwKCkge1xuXHRcdHErKztcblx0XHRxMVN0ZXBzW3FdLmNsYXNzbiA9ICdjb21wbGV0ZSc7XG5cdFx0aWYgKHEgPT0gMiApe1xuXHRcdFx0aXNBY3RpdmUgPSB0cnVlO1xuXHRcdH1cblx0XHRpZiAocSA+IDIpIHtcblx0XHRcdGNvbXBsZXRlKCk7XG5cdFx0fVxuXHR9XG5cdCQ6IGhlYWRsaW5lID0gcTFTdGVwc1txXS5oMjtcblx0JDogYm9keSA9IHExU3RlcHNbcV0uY29weTtcblx0JDogZnJhY3Rpb24gPSBxMVN0ZXBzW3FdLmQ7XG5cdGxldCB2aWRlb1xuXHRhZnRlclVwZGF0ZSgoKSA9PiB7XG5cdHZpZGVvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN2aWRlb0VsZW1lbnRcIik7XG5cdFxuXHRpZiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpIHtcbiAgXHRuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7IHZpZGVvOiB0cnVlIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHN0cmVhbSkge1xuXHRcdFx0dmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtO1xuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIwcikge1xuICAgICAgY29uc29sZS5sb2coXCJOb3QgbG9hZGVkXCIpO1xuICAgIH0pO1xuXHRcdH1cbn0pXG5cbjwvc2NyaXB0PlxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+V2ViY2FtIENoYWxsZW5nZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPCEtLSBDb21wbGV0aW9uIGNsYXNzPSdzdGVwJy8gLS0+XG48IS0tXG5cdDxoMz5XZWJjYW0gQ2hhbGxlbmdlIHtmcmFjdGlvbn08L2gzPlxuXHQ8dWw+XG5cdFx0eyNlYWNoIHExU3RlcHMgYXMgc3RlcH1cblx0XHRcdDxsaSBjbGFzcz17c3RlcC5jbGFzc259ID57c3RlcC5uYW1lfTwvbGk+XG5cdFx0ey9lYWNofVxuXHQ8L3VsPlxuPC9Qcm9ncmVzcz4gLS0+XG48c2VjdGlvbiBpZD1cInByb2dyZXNzXCI+XG5cdDxoMz5XZWJjYW0gQ2hhbGxlbmdlIHtmcmFjdGlvbn08L2gzPlxuXHQ8dWw+XG5cdFx0eyNlYWNoIHExU3RlcHMgYXMgc3RlcH1cblx0XHRcdDxsaSBjbGFzcz17c3RlcC5jbGFzc259ID57c3RlcC5uYW1lfTwvbGk+XG5cdFx0ey9lYWNofVxuXHQ8L3VsPlxuPC9zZWN0aW9uPlxuPGRpdiBjbGFzcz0ncXVpei1ob2xkZXInPlxuXHQ8aDE+e2hlYWRsaW5lfTwvaDE+XG5cdDxwPntib2R5fTwvcD4gXG5cdDxzZWN0aW9uIGlkPSduZXh0LXNraXAnPiBcbiAgICAgICAgPGJ1dHRvbiBvbjpjbGljaz17c3RlcFVwfSBjbGFzcz0nYnRuLWRhcmsnPk5leHQ8L2J1dHRvbj5cbiAgICA8L3NlY3Rpb24+XG5cdHsjaWYgaXNBY3RpdmV9XG5cdFx0PHZpZGVvIGF1dG9wbGF5PVwidHJ1ZVwiIGlkPVwidmlkZW9FbGVtZW50XCI+PC92aWRlbz5cblx0ey9pZn1cbjwvZGl2PlxuXHRcblx0XG48c3R5bGU+XG5cdG1haW57XG5cdFx0ZmxleC1mbG93OiByb3cgd3JhcDtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG5cdH1cbiAgIC5xdWl6LWhvbGRlciB7XG5cdCAgIGRpc3BsYXk6IGJsb2NrO1xuXHQgICB3aWR0aDogNjV2dzsgLyogNzIuNSBvcmlnaW5hbHkgKi9cblx0ICAgbGVmdDogMjB2dztcblx0ICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICBwYWRkaW5nOiAyMHB4IDUwcHg7XG4gICB9XG4gICAuc3RlcHtcblx0XHRtYXJnaW4tYm90dG9tOiA1NXB4O1xuICAgfVxuICAgI3Byb2dyZXNzIHtcblx0ICAgbWFyZ2luLXRvcDogNTBweDtcbiAgIH1cbiAgIHVsIHtcblx0ICAgcGFkZGluZy1pbmxpbmUtc3RhcnQ6IDE1cHg7XG4gICB9XG4gICBsaSB7XG5cdCAgIG1hcmdpbjogMzBweCAwcHg7XG4gICB9XG4gICAuaW5jb21wbGV0ZSB7XG4gICAgICAgIGNvbG9yOiAjYTBhMGEwO1xuXHRcdGxpc3Qtc3R5bGUtdHlwZTogY2lyY2xlO1xuXHR9XG5cdC5jb21wbGV0ZSB7XG5cdFx0bGlzdC1zdHlsZS10eXBlOiBkaXNjO1xuXHR9XG5cdC5TaWRlLWhlYWRsaW5lIHtcblx0XHRmb250LXNpemU6IDI0cHg7XG5cdFx0Zm9udC13ZWlnaHQ6IDcwMDtcblx0fVxuXHQjdmlkZW9FbGVtZW50IHtcblx0XHRcblx0fVxuXHQuYnRuLWRhcmsge1xuICAgICAgICBjb2xvcjp3aGl0ZTtcbiAgICAgICAgYmFja2dyb3VuZDogIzBGMjAzMztcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgICB3aWR0aDogMzAlO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgIH1cbiAgICBidXR0b24ge1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgIH1cbjwvc3R5bGU+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQXNGNkIsR0FBSSxLQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1RUFBeEIsR0FBSSxLQUFDLE1BQU07Ozs7Ozs7O2dFQUFJLEdBQUksS0FBQyxJQUFJOztrR0FBeEIsR0FBSSxLQUFDLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4QkFEaEIsR0FBTzs7OztnQ0FBWixNQUFJOzs7OzZCQVdGLEdBQVE7Ozs7Ozs7OzBCQWJTLEdBQVE7Ozs7Ozs7Ozs7OzBCQVF6QixHQUFROzs7c0JBQ1QsR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBDQVRjLEdBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7OzBDQVF6QixHQUFROzs7OztxQ0FDVCxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cURBRWlCLEdBQU07Ozs7OzhEQVhULEdBQVE7Ozs2QkFFdEIsR0FBTzs7OzsrQkFBWixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozs2REFNRixHQUFRO3FEQUNULEdBQUk7O29CQUlILEdBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0EzRlIsUUFBUSxHQUFHLHFCQUFxQjs7VUFFN0IsUUFBUTtFQUNoQixRQUFRLENBQUMsU0FBUyxJQUNqQixFQUFFLEVBQUUsTUFBTTs7O0tBR1AsT0FBTzs7R0FDVCxPQUFPLEVBQUUsR0FBRztHQUNkLEVBQUUsRUFBRSx5QkFBeUI7R0FDN0IsSUFBSSxFQUFFLGNBQWM7R0FDcEIsTUFBTSxFQUFFLFVBQVU7R0FDbEIsQ0FBQyxFQUFFLE9BQU87R0FDVixJQUFJLEVBQUUsMGFBQTBhOzs7R0FDOWEsT0FBTyxFQUFFLEdBQUc7R0FDZCxFQUFFLEVBQUUsMkJBQTJCO0dBQy9CLElBQUksRUFBRSxhQUFhO0dBQ25CLE1BQU0sRUFBRSxZQUFZO0dBQ3BCLENBQUMsRUFBRSxPQUFPO0dBQ1YsSUFBSSxFQUFFLGlMQUFpTDs7O0dBQ3JMLE9BQU8sRUFBRSxHQUFHO0dBQ2QsRUFBRSxFQUFFLCtCQUErQjtHQUNuQyxJQUFJLEVBQUUsbUJBQW1CO0dBQ3pCLE1BQU0sRUFBRSxZQUFZO0dBQ3BCLENBQUMsRUFBRSxPQUFPO0dBQ1YsSUFBSSxFQUFFLDRGQUE0Rjs7O0dBQ2pHLE9BQU8sRUFBRSxFQUFFO0dBQ1osRUFBRSxFQUFFLEVBQUU7R0FDTixJQUFJLEVBQUUsRUFBRTtHQUNSLE1BQU0sRUFBRSxFQUFFO0dBQ1YsQ0FBQyxFQUFFLEVBQUU7R0FDTCxJQUFJLEVBQUUsRUFBRTs7OztLQUlKLFFBQVE7O1VBQ0gsTUFBTTtrQkFDZCxDQUFDO2tCQUNELE9BQU8sQ0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLFVBQVU7O01BQzFCLENBQUMsSUFBSSxDQUFDO21CQUNULFFBQVEsR0FBRyxJQUFJOzs7TUFFWixDQUFDLEdBQUcsQ0FBQztHQUNSLFFBQVE7Ozs7S0FNTixLQUFLOztDQUNULFdBQVc7RUFDWCxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxlQUFlOztNQUUxQyxTQUFTLENBQUMsWUFBWSxDQUFDLFlBQVk7R0FDckMsU0FBUyxDQUFDLFlBQVksQ0FBQyxZQUFZLEdBQUcsS0FBSyxFQUFFLElBQUksSUFDL0MsSUFBSSxXQUFXLE1BQU07SUFDdkIsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNO01BRXRCLEtBQUssV0FBVyxLQUFLO0lBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFiMUIsUUFBUSxHQUFHLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRTs7OztvQkFDeEIsSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLEVBQUUsSUFBSTs7OztvQkFDdEIsUUFBUSxHQUFHLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7OztrQkFkdkIsQ0FBQyxHQUFHLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
