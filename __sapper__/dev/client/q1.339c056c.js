import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, y as validate_each_argument, a as space, e as element, t as text, o as create_component, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, g as children, h as claim_text, p as claim_component, k as add_location, j as attr_dev, l as insert_dev, m as append_dev, r as mount_component, z as set_data_dev, u as transition_in, w as transition_out, x as destroy_component, A as null_to_empty, n as noop, B as destroy_each } from './client.6f6b54fe.js';
import Progress from './Progress.a01ae77d.js';

/* src/routes/quiz/q1.svelte generated by Svelte v3.23.2 */
const file = "src/routes/quiz/q1.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (27:2) {#each q1Steps as step }
function create_each_block(ctx) {
	let li;
	let t_value = /*step*/ ctx[5].name + "";
	let t;
	let li_class_value;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", li_class_value = "" + (null_to_empty(/*step*/ ctx[5].class) + " svelte-1u03q0h"));
			add_location(li, file, 27, 3, 1229);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(27:2) {#each q1Steps as step }",
		ctx
	});

	return block;
}

// (25:1) <Progress on:message={handleMessage}>
function create_default_slot(ctx) {
	let ul;
	let each_value = /*q1Steps*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(ul, file, 25, 2, 1194);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*q1Steps*/ 4) {
				each_value = /*q1Steps*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(25:1) <Progress on:message={handleMessage}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div;
	let h2;
	let t1;
	let t2;
	let p;
	let t3;
	let t4;
	let progress;
	let current;

	progress = new Progress({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	progress.$on("message", /*handleMessage*/ ctx[3]);

	const block = {
		c: function create() {
			t0 = space();
			div = element("div");
			h2 = element("h2");
			t1 = text(/*headline*/ ctx[0]);
			t2 = space();
			p = element("p");
			t3 = text(/*body*/ ctx[1]);
			t4 = space();
			create_component(progress.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-11mvzac\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, /*headline*/ ctx[0]);
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, /*body*/ ctx[1]);
			p_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			claim_component(progress.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Webcam Challenge";
			add_location(h2, file, 21, 0, 1110);
			add_location(p, file, 22, 0, 1131);
			attr_dev(div, "class", "quiz-holder svelte-1u03q0h");
			add_location(div, file, 20, 0, 1084);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t1);
			append_dev(div, t2);
			append_dev(div, p);
			append_dev(p, t3);
			insert_dev(target, t4, anchor);
			mount_component(progress, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*headline*/ 1) set_data_dev(t1, /*headline*/ ctx[0]);
			if (!current || dirty & /*body*/ 2) set_data_dev(t3, /*body*/ ctx[1]);
			const progress_changes = {};

			if (dirty & /*$$scope*/ 256) {
				progress_changes.$$scope = { dirty, ctx };
			}

			progress.$set(progress_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t4);
			destroy_component(progress, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const q1Steps = [
		{
			stepNum: "1",
			h2: "Webcam Challenge",
			name: "Introduction",
			class: "complete",
			copy: "If your computer has a built-in camera, also known as a webcam, you should know that it can be used to spy on you. And no, this is not just science fiction as a recent survey conducted by HP shows that 10% in the U.S. either know someone whose webcam was hacked or have had their own webcam hacked."
		},
		{
			stepNum: "2",
			h2: "Cover Your Webcam",
			name: "Permissions",
			class: "incomplete",
			copy: "Please have your webcam covered and proceed to next step. We will access to your webcam to make sure you covered the webcam properly. Click “Test” button to proceed challenge."
		},
		{
			stepNum: "3",
			h2: "Great! It’s properly covered.",
			name: "Cover your webcam",
			class: "incomplete"
		}
	];

	let q = 0;

	function handleMessage(event) {
		$$invalidate(4, q = event.detail.number);
		q1steps[q].class = "complete";
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Q1> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Q1", $$slots, []);

	$$self.$capture_state = () => ({
		Progress,
		q1Steps,
		q,
		handleMessage,
		headline,
		body
	});

	$$self.$inject_state = $$props => {
		if ("q" in $$props) $$invalidate(4, q = $$props.q);
		if ("headline" in $$props) $$invalidate(0, headline = $$props.headline);
		if ("body" in $$props) $$invalidate(1, body = $$props.body);
	};

	let headline;
	let body;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*q*/ 16) {
			 $$invalidate(0, headline = q1Steps[q].h2);
		}

		if ($$self.$$.dirty & /*q*/ 16) {
			 $$invalidate(1, body = q1Steps[q].copy);
		}
	};

	return [headline, body, q1Steps, handleMessage];
}

class Q1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Q1",
			options,
			id: create_fragment.name
		});
	}
}

export default Q1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicTEuMzM5YzA1NmMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcXVpei9xMS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbmltcG9ydCBQcm9ncmVzcyBmcm9tICcuL1Byb2dyZXNzLnN2ZWx0ZSdcblx0Y29uc3QgcTFTdGVwcyA9IFtcblx0eyBzdGVwTnVtOiAnMScsIGgyOiAnV2ViY2FtIENoYWxsZW5nZScsIG5hbWU6ICdJbnRyb2R1Y3Rpb24nLCBjbGFzczogJ2NvbXBsZXRlJyxcbmNvcHk6ICdJZiB5b3VyIGNvbXB1dGVyIGhhcyBhIGJ1aWx0LWluIGNhbWVyYSwgYWxzbyBrbm93biBhcyBhIHdlYmNhbSwgeW91IHNob3VsZCBrbm93IHRoYXQgaXQgY2FuIGJlIHVzZWQgdG8gc3B5IG9uIHlvdS4gQW5kIG5vLCB0aGlzIGlzIG5vdCBqdXN0IHNjaWVuY2UgZmljdGlvbiBhcyBhIHJlY2VudCBzdXJ2ZXkgY29uZHVjdGVkIGJ5IEhQIHNob3dzIHRoYXQgMTAlIGluIHRoZSBVLlMuIGVpdGhlciBrbm93IHNvbWVvbmUgd2hvc2Ugd2ViY2FtIHdhcyBoYWNrZWQgb3IgaGF2ZSBoYWQgdGhlaXIgb3duIHdlYmNhbSBoYWNrZWQuJ30sXG5cdHsgc3RlcE51bTogJzInLCBoMjogJ0NvdmVyIFlvdXIgV2ViY2FtJywgbmFtZTogJ1Blcm1pc3Npb25zJywgY2xhc3M6ICdpbmNvbXBsZXRlJyxcbmNvcHk6ICdQbGVhc2UgaGF2ZSB5b3VyIHdlYmNhbSBjb3ZlcmVkIGFuZCBwcm9jZWVkIHRvIG5leHQgc3RlcC4gV2Ugd2lsbCBhY2Nlc3MgdG8geW91ciB3ZWJjYW0gdG8gbWFrZSBzdXJlIHlvdSBjb3ZlcmVkIHRoZSB3ZWJjYW0gcHJvcGVybHkuIENsaWNrIOKAnFRlc3TigJ0gYnV0dG9uIHRvIHByb2NlZWQgY2hhbGxlbmdlLid9LFxuXHR7IHN0ZXBOdW06ICczJywgaDI6ICdHcmVhdCEgSXTigJlzIHByb3Blcmx5IGNvdmVyZWQuJywgbmFtZTogJ0NvdmVyIHlvdXIgd2ViY2FtJywgY2xhc3M6ICdpbmNvbXBsZXRlJ31cblx0XVxuXHRsZXQgcSA9IDA7XG5cdGZ1bmN0aW9uIGhhbmRsZU1lc3NhZ2UoZXZlbnQpIHtcblx0XHRcdFx0cSA9IGV2ZW50LmRldGFpbC5udW1iZXI7XG5cdFx0XHRcdHExc3RlcHNbcV0uY2xhc3MgPSAnY29tcGxldGUnO1xuICAgICAgICB9XG5cdCQ6IGhlYWRsaW5lID0gcTFTdGVwc1txXS5oMjtcblx0JDogYm9keSA9IHExU3RlcHNbcV0uY29weTtcbjwvc2NyaXB0PlxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+V2ViY2FtIENoYWxsZW5nZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPGRpdiBjbGFzcz0ncXVpei1ob2xkZXInPlxuPGgyPntoZWFkbGluZX08L2gyPiBcbjxwPntib2R5fTwvcD4gXG48L2Rpdj5cblx0PFByb2dyZXNzIG9uOm1lc3NhZ2U9e2hhbmRsZU1lc3NhZ2V9PlxuXHRcdDx1bD5cblx0XHR7I2VhY2ggcTFTdGVwcyBhcyBzdGVwIH1cblx0XHRcdDxsaSBjbGFzcz17c3RlcC5jbGFzc30gPntzdGVwLm5hbWV9PC9saT5cblx0XHR7L2VhY2h9XG5cdFx0PC91bD5cblx0PC9Qcm9ncmVzcz5cbjxzdHlsZT5cbiAgIC5xdWl6LWhvbGRlciB7XG5cdCAgIHdpZHRoOiA3MCU7XG4gICAgICAgcGFkZGluZzogMjBweCA0MHB4O1xuICAgfVxuICAgLmluY29tcGxldGUge1xuICAgICAgICBjb2xvcjogI2EwYTBhMDtcbiAgICB9XG48L3N0eWxlPiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7d0JBMkI0QixHQUFJLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VFQUF2QixHQUFJLElBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQURmLEdBQU87Ozs7Z0NBQVosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFBQyxHQUFPOzs7OytCQUFaLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQ0FGZSxHQUFhOzs7Ozs7OzBCQUgvQixHQUFROzs7c0JBQ1QsR0FBSTs7Ozs7Ozs7Ozs7OzswQ0FESCxHQUFROzs7OztxQ0FDVCxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUVBREgsR0FBUTtpRUFDVCxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXBCRCxPQUFPOztHQUNYLE9BQU8sRUFBRSxHQUFHO0dBQUUsRUFBRSxFQUFFLGtCQUFrQjtHQUFFLElBQUksRUFBRSxjQUFjO0dBQUUsS0FBSyxFQUFFLFVBQVU7R0FDaEYsSUFBSSxFQUFFLDRTQUE0Uzs7O0dBQy9TLE9BQU8sRUFBRSxHQUFHO0dBQUUsRUFBRSxFQUFFLG1CQUFtQjtHQUFFLElBQUksRUFBRSxhQUFhO0dBQUUsS0FBSyxFQUFFLFlBQVk7R0FDbEYsSUFBSSxFQUFFLGlMQUFpTDs7O0dBQ3BMLE9BQU8sRUFBRSxHQUFHO0dBQUUsRUFBRSxFQUFFLCtCQUErQjtHQUFFLElBQUksRUFBRSxtQkFBbUI7R0FBRSxLQUFLLEVBQUUsWUFBWTs7OztLQUUvRixDQUFDLEdBQUcsQ0FBQzs7VUFDQSxhQUFhLENBQUMsS0FBSztrQkFDekIsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTTtFQUN2QixPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxVQUFVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBRTdCLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUU7Ozs7b0JBQ3hCLElBQUksR0FBRyxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
