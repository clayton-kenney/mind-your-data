import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, y as globals, z as validate_each_argument, a as space, e as element, t as text, o as create_component, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, g as children, h as claim_text, p as claim_component, k as add_location, j as attr_dev, l as insert_dev, m as append_dev, r as mount_component, A as set_data_dev, u as transition_in, w as transition_out, x as destroy_component, B as null_to_empty, C as destroy_each } from './client.1f62008a.js';
import Progress from './Progress.ba2df0cf.js';

/* src/routes/quiz/q1.svelte generated by Svelte v3.23.2 */

const { console: console_1 } = globals;
const file = "src/routes/quiz/q1.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (51:2) {#each q1Steps as step }
function create_each_block(ctx) {
	let li;
	let t_value = /*step*/ ctx[5].name + "";
	let t;
	let li_class_value;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", li_class_value = "" + (null_to_empty(/*step*/ ctx[5].class) + " svelte-1u03q0h"));
			add_location(li, file, 51, 3, 1655);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*q1Steps*/ 1 && t_value !== (t_value = /*step*/ ctx[5].name + "")) set_data_dev(t, t_value);

			if (dirty & /*q1Steps*/ 1 && li_class_value !== (li_class_value = "" + (null_to_empty(/*step*/ ctx[5].class) + " svelte-1u03q0h"))) {
				attr_dev(li, "class", li_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(51:2) {#each q1Steps as step }",
		ctx
	});

	return block;
}

// (49:1) <Progress on:message={handleMessage}>
function create_default_slot(ctx) {
	let ul;
	let each_value = /*q1Steps*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(ul, file, 49, 2, 1620);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*q1Steps*/ 1) {
				each_value = /*q1Steps*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(49:1) <Progress on:message={handleMessage}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div;
	let h2;
	let t1;
	let t2;
	let p;
	let t3;
	let t4;
	let progress;
	let t5;
	let video_1;
	let current;

	progress = new Progress({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	progress.$on("message", /*handleMessage*/ ctx[3]);

	const block = {
		c: function create() {
			t0 = space();
			div = element("div");
			h2 = element("h2");
			t1 = text(/*headline*/ ctx[1]);
			t2 = space();
			p = element("p");
			t3 = text(/*body*/ ctx[2]);
			t4 = space();
			create_component(progress.$$.fragment);
			t5 = space();
			video_1 = element("video");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-11mvzac\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, /*headline*/ ctx[1]);
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, /*body*/ ctx[2]);
			p_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			claim_component(progress.$$.fragment, nodes);
			t5 = claim_space(nodes);
			video_1 = claim_element(nodes, "VIDEO", { autoplay: true, id: true });
			var video_1_nodes = children(video_1);
			video_1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Webcam Challenge";
			add_location(h2, file, 45, 0, 1536);
			add_location(p, file, 46, 0, 1557);
			attr_dev(div, "class", "quiz-holder svelte-1u03q0h");
			add_location(div, file, 44, 0, 1510);
			video_1.autoplay = "true";
			attr_dev(video_1, "id", "videoElement");
			add_location(video_1, file, 55, 1, 1728);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t1);
			append_dev(div, t2);
			append_dev(div, p);
			append_dev(p, t3);
			insert_dev(target, t4, anchor);
			mount_component(progress, target, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, video_1, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*headline*/ 2) set_data_dev(t1, /*headline*/ ctx[1]);
			if (!current || dirty & /*body*/ 4) set_data_dev(t3, /*body*/ ctx[2]);
			const progress_changes = {};

			if (dirty & /*$$scope, q1Steps*/ 257) {
				progress_changes.$$scope = { dirty, ctx };
			}

			progress.$set(progress_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t4);
			destroy_component(progress, detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(video_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let q1Steps = [
		{
			stepNum: "1",
			h2: "Webcam Challenge",
			name: "Introduction",
			class: "complete",
			copy: "If your computer has a built-in camera, also known as a webcam, you should know that it can be used to spy on you. And no, this is not just science fiction as a recent survey conducted by HP shows that 10% in the U.S. either know someone whose webcam was hacked or have had their own webcam hacked."
		},
		{
			stepNum: "2",
			h2: "Cover Your Webcam",
			name: "Permissions",
			class: "incomplete",
			copy: "Please have your webcam covered and proceed to next step. We will access to your webcam to make sure you covered the webcam properly. Click “Test” button to proceed challenge."
		},
		{
			stepNum: "3",
			h2: "Great! It’s properly covered.",
			name: "Cover your webcam",
			class: "incomplete",
			copy: "Please remember to leave your webcam covered while its not being used. This can prevent..."
		}
	];

	let q = 0;

	function handleMessage(event) {
		$$invalidate(4, q = event.detail.number);
		$$invalidate(0, q1Steps[q].class = "complete", q1Steps);
	}

	//var video = document.querySelector("#videoElement");
	if (navigator.mediaDevices.getUserMedia) {
		navigator.mediaDevices.getUserMedia({ video: true }).then(function (stream) {
			video.srcObject = stream;
		}).catch(function (err0r) {
			console.log("Something went wrong!");
		});
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Q1> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Q1", $$slots, []);

	$$self.$capture_state = () => ({
		Progress,
		q1Steps,
		q,
		handleMessage,
		headline,
		body
	});

	$$self.$inject_state = $$props => {
		if ("q1Steps" in $$props) $$invalidate(0, q1Steps = $$props.q1Steps);
		if ("q" in $$props) $$invalidate(4, q = $$props.q);
		if ("headline" in $$props) $$invalidate(1, headline = $$props.headline);
		if ("body" in $$props) $$invalidate(2, body = $$props.body);
	};

	let headline;
	let body;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*q1Steps, q*/ 17) {
			 $$invalidate(1, headline = q1Steps[q].h2);
		}

		if ($$self.$$.dirty & /*q1Steps, q*/ 17) {
			 $$invalidate(2, body = q1Steps[q].copy);
		}
	};

	return [q1Steps, headline, body, handleMessage];
}

class Q1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Q1",
			options,
			id: create_fragment.name
		});
	}
}

export default Q1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicTEuZDJjZmUyMjUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcXVpei9xMS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbmltcG9ydCBQcm9ncmVzcyBmcm9tICcuL1Byb2dyZXNzLnN2ZWx0ZSdcblxuXHRsZXQgcTFTdGVwcyA9IFtcblx0eyBzdGVwTnVtOiAnMScsIFxuXHRoMjogJ1dlYmNhbSBDaGFsbGVuZ2UnLCBcblx0bmFtZTogJ0ludHJvZHVjdGlvbicsIFxuXHRjbGFzczogJ2NvbXBsZXRlJyxcblx0Y29weTogJ0lmIHlvdXIgY29tcHV0ZXIgaGFzIGEgYnVpbHQtaW4gY2FtZXJhLCBhbHNvIGtub3duIGFzIGEgd2ViY2FtLCB5b3Ugc2hvdWxkIGtub3cgdGhhdCBpdCBjYW4gYmUgdXNlZCB0byBzcHkgb24geW91LiBBbmQgbm8sIHRoaXMgaXMgbm90IGp1c3Qgc2NpZW5jZSBmaWN0aW9uIGFzIGEgcmVjZW50IHN1cnZleSBjb25kdWN0ZWQgYnkgSFAgc2hvd3MgdGhhdCAxMCUgaW4gdGhlIFUuUy4gZWl0aGVyIGtub3cgc29tZW9uZSB3aG9zZSB3ZWJjYW0gd2FzIGhhY2tlZCBvciBoYXZlIGhhZCB0aGVpciBvd24gd2ViY2FtIGhhY2tlZC4nfSxcblx0eyBzdGVwTnVtOiAnMicsIFxuXHRoMjogJ0NvdmVyIFlvdXIgV2ViY2FtJywgXG5cdG5hbWU6ICdQZXJtaXNzaW9ucycsIFxuXHRjbGFzczogJ2luY29tcGxldGUnLFxuXHRjb3B5OiAnUGxlYXNlIGhhdmUgeW91ciB3ZWJjYW0gY292ZXJlZCBhbmQgcHJvY2VlZCB0byBuZXh0IHN0ZXAuIFdlIHdpbGwgYWNjZXNzIHRvIHlvdXIgd2ViY2FtIHRvIG1ha2Ugc3VyZSB5b3UgY292ZXJlZCB0aGUgd2ViY2FtIHByb3Blcmx5LiBDbGljayDigJxUZXN04oCdIGJ1dHRvbiB0byBwcm9jZWVkIGNoYWxsZW5nZS4nfSxcblx0eyBzdGVwTnVtOiAnMycsIFxuXHRoMjogJ0dyZWF0ISBJdOKAmXMgcHJvcGVybHkgY292ZXJlZC4nLCBcblx0bmFtZTogJ0NvdmVyIHlvdXIgd2ViY2FtJywgXG5cdGNsYXNzOiAnaW5jb21wbGV0ZScsXG5cdGNvcHk6ICdQbGVhc2UgcmVtZW1iZXIgdG8gbGVhdmUgeW91ciB3ZWJjYW0gY292ZXJlZCB3aGlsZSBpdHMgbm90IGJlaW5nIHVzZWQuIFRoaXMgY2FuIHByZXZlbnQuLi4nfVxuXHRdXG5cdGxldCBxID0gMDtcblx0ZnVuY3Rpb24gaGFuZGxlTWVzc2FnZShldmVudCkge1xuXHRcdFx0XHRxID0gZXZlbnQuZGV0YWlsLm51bWJlcjtcblx0XHRcdFx0cTFTdGVwc1txXS5jbGFzcyA9ICdjb21wbGV0ZSc7XG5cdFx0fVxuXHRcdFxuXHQkOiBoZWFkbGluZSA9IHExU3RlcHNbcV0uaDI7XG5cdCQ6IGJvZHkgPSBxMVN0ZXBzW3FdLmNvcHk7XG5cblx0Ly92YXIgdmlkZW8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ZpZGVvRWxlbWVudFwiKTtcblxuaWYgKG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB7XG4gIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHsgdmlkZW86IHRydWUgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoc3RyZWFtKSB7XG4gICAgICB2aWRlby5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycjByKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlNvbWV0aGluZyB3ZW50IHdyb25nIVwiKTtcbiAgICB9KTtcbn1cbjwvc2NyaXB0PlxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+V2ViY2FtIENoYWxsZW5nZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPGRpdiBjbGFzcz0ncXVpei1ob2xkZXInPlxuPGgyPntoZWFkbGluZX08L2gyPiBcbjxwPntib2R5fTwvcD4gXG48L2Rpdj5cblx0PFByb2dyZXNzIG9uOm1lc3NhZ2U9e2hhbmRsZU1lc3NhZ2V9PlxuXHRcdDx1bD5cblx0XHR7I2VhY2ggcTFTdGVwcyBhcyBzdGVwIH1cblx0XHRcdDxsaSBjbGFzcz17c3RlcC5jbGFzc30gPntzdGVwLm5hbWV9PC9saT5cblx0XHR7L2VhY2h9XG5cdFx0PC91bD5cblx0PC9Qcm9ncmVzcz5cblx0PHZpZGVvIGF1dG9wbGF5PVwidHJ1ZVwiIGlkPVwidmlkZW9FbGVtZW50XCI+XG5cdFxuXHQ8L3ZpZGVvPlxuPHN0eWxlPlxuICAgLnF1aXotaG9sZGVyIHtcblx0ICAgd2lkdGg6IDcwJTtcbiAgICAgICBwYWRkaW5nOiAyMHB4IDQwcHg7XG4gICB9XG4gICAuaW5jb21wbGV0ZSB7XG4gICAgICAgIGNvbG9yOiAjYTBhMGEwO1xuICAgIH1cbjwvc3R5bGU+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQW1ENEIsR0FBSSxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1RUFBdkIsR0FBSSxJQUFDLEtBQUs7Ozs7Ozs7O2dFQUFJLEdBQUksSUFBQyxJQUFJOztrR0FBdkIsR0FBSSxJQUFDLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQURmLEdBQU87Ozs7Z0NBQVosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFBQyxHQUFPOzs7OytCQUFaLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJDQUZlLEdBQWE7Ozs7Ozs7MEJBSC9CLEdBQVE7OztzQkFDVCxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7MENBREgsR0FBUTs7Ozs7cUNBQ1QsR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lFQURILEdBQVE7aUVBQ1QsR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQTNDSCxPQUFPOztHQUNULE9BQU8sRUFBRSxHQUFHO0dBQ2QsRUFBRSxFQUFFLGtCQUFrQjtHQUN0QixJQUFJLEVBQUUsY0FBYztHQUNwQixLQUFLLEVBQUUsVUFBVTtHQUNqQixJQUFJLEVBQUUsNFNBQTRTOzs7R0FDaFQsT0FBTyxFQUFFLEdBQUc7R0FDZCxFQUFFLEVBQUUsbUJBQW1CO0dBQ3ZCLElBQUksRUFBRSxhQUFhO0dBQ25CLEtBQUssRUFBRSxZQUFZO0dBQ25CLElBQUksRUFBRSxpTEFBaUw7OztHQUNyTCxPQUFPLEVBQUUsR0FBRztHQUNkLEVBQUUsRUFBRSwrQkFBK0I7R0FDbkMsSUFBSSxFQUFFLG1CQUFtQjtHQUN6QixLQUFLLEVBQUUsWUFBWTtHQUNuQixJQUFJLEVBQUUsNEZBQTRGOzs7O0tBRTlGLENBQUMsR0FBRyxDQUFDOztVQUNBLGFBQWEsQ0FBQyxLQUFLO2tCQUN6QixDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNO2tCQUN2QixPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxVQUFVOzs7O0tBUTdCLFNBQVMsQ0FBQyxZQUFZLENBQUMsWUFBWTtFQUNyQyxTQUFTLENBQUMsWUFBWSxDQUFDLFlBQVksR0FBRyxLQUFLLEVBQUUsSUFBSSxJQUM5QyxJQUFJLFdBQVcsTUFBTTtHQUNwQixLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU07S0FFekIsS0FBSyxXQUFXLEtBQUs7R0FDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQVhyQyxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFOzs7O29CQUN4QixJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
