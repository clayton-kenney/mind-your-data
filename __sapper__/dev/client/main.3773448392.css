main.svelte-19axu57{background-color:white;box-sizing:border-box}
h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}
h1.svelte-1acdip2.svelte-1acdip2,p.svelte-1acdip2.svelte-1acdip2{text-align:center;margin:0 auto}.hero.svelte-1acdip2.svelte-1acdip2{background-color:#3e4b59;padding-left:80px;padding-top:30vh;width:100%;height:60vh}.hero.svelte-1acdip2 p.svelte-1acdip2{margin:1em auto;color:white}h1.svelte-1acdip2.svelte-1acdip2{font-size:2.8em;text-align:left;text-transform:uppercase;font-weight:700;margin:0 0 0.5em 0;color:white;letter-spacing:25%}h2.svelte-1acdip2.svelte-1acdip2{text-align:left;margin:auto;text-transform:uppercase}h3.svelte-1acdip2.svelte-1acdip2{text-align:center;margin:auto}.bigImg.svelte-1acdip2.svelte-1acdip2{max-width:1400px;background-color:grey}button.svelte-1acdip2.svelte-1acdip2{background:#7AAF54;text-transform:uppercase;padding:10px 20px 10px 20px;font-size:30px;line-height:38px;border:none;border-radius:10px;color:white;box-shadow:0px 4px 4px rgba(0, 0, 0, 0.25)}img.svelte-1acdip2.svelte-1acdip2{width:100%;max-width:400px;margin:0 0 1em 0}.about.svelte-1acdip2.svelte-1acdip2{padding:1.5em}p.svelte-1acdip2.svelte-1acdip2{color:black;text-align:left}ul.svelte-1acdip2.svelte-1acdip2{display:flex;flex-direction:row;list-style:none;margin-block-start:0px;margin-block-end:0px;padding-inline-start:0px}li.svelte-1acdip2.svelte-1acdip2{justify-content:space-around;margin:auto}.why.svelte-1acdip2.svelte-1acdip2{padding-left:80px;margin:1em auto}a.svelte-1acdip2.svelte-1acdip2{text-decoration:none;padding:4px 30px}@media(min-width: 480px){h1.svelte-1acdip2.svelte-1acdip2{font-size:4em}}
#logo-holder.svelte-1vtc7gq{background-color:white;display:flex;flex-flow:column nowrap;align-items:center}img.svelte-1vtc7gq{width:800px}
main.svelte-11n97pp{display:flex;flex-flow:row}#main-content.svelte-11n97pp{background:#38424D;border-radius:15px;border:0px;margin:12px 22px 40px 20px;padding:9.3vh 5vw 0vh 9.3vh;color:#FFFFFF;width:100%}
.review.svelte-nt0awi{width:50vw;background-color:#38424d;display:flex;flex-flow:column;margin:auto;color:#ffffff;padding:65px 100px 65px 65px}.complete.svelte-nt0awi{background-color:#38424D;color:#ffffff}p.svelte-nt0awi{color:#e94040;font-weight:500;margin:5px}button.svelte-nt0awi{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}.caret.svelte-nt0awi{display:flex;flex-flow:row nowrap;align-items:center;justify-content:space-between}div.caret.svelte-nt0awi{background-color:#ffffff;border-radius:6px;border:none;margin:10px;padding:10px 20px}
main.svelte-11rukd4{display:flex;flex-flow:row;justify-content:center;margin-top:15px}section.svelte-11rukd4{background:#38424D;width:65vw;min-height:75vh;border-radius:15px;border:0px;margin:0px;padding:9.3vh 5vw 0vh 9.3vh;color:#FFFFFF;text-align:center}#chapter1.svelte-11rukd4{width:85vw;background-image:url('../bg-vector.png');background-blend-mode:darken}p.svelte-11rukd4{text-align:left}#headline.svelte-11rukd4{font-weight:600;margin-bottom:25px}#chapter.svelte-11rukd4{color:#73ef7b}button.svelte-11rukd4{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px;text-decoration:none}#start.svelte-11rukd4{background-color:#73ef7b}a.svelte-11rukd4{text-decoration:none}.active.svelte-11rukd4{background-color:pink}#permission.svelte-11rukd4{width:70%;margin:auto}.caret.svelte-11rukd4{display:flex;flex-flow:row nowrap;align-items:center;justify-content:space-between}
ul.svelte-1frg2tf{margin:0 0 1em 0;line-height:1.5}
.content.svelte-gnxal1 h2{font-size:1.4em;font-weight:500}.content.svelte-gnxal1 pre{background-color:#f9f9f9;box-shadow:inset 1px 1px 5px rgba(0,0,0,0.05);padding:0.5em;border-radius:2px;overflow-x:auto}.content.svelte-gnxal1 pre code{background-color:transparent;padding:0}.content.svelte-gnxal1 ul{line-height:1.5}.content.svelte-gnxal1 li{margin:0 0 0.5em 0}
.quiz-holder.svelte-dkh3bo{display:block;width:65vw;left:20vw;height:100vh;padding:20px 50px}.step.svelte-dkh3bo{margin-bottom:55px}#progress.svelte-dkh3bo{margin-top:50px}ul.svelte-dkh3bo{padding-inline-start:15px}li.svelte-dkh3bo{margin:30px 0px}.incomplete.svelte-dkh3bo{color:#a0a0a0;list-style-type:circle}.complete.svelte-dkh3bo{list-style-type:disc}.Side-headline.svelte-dkh3bo{font-size:24px;font-weight:700}#videoElement.svelte-dkh3bo{}.btn-dark.svelte-dkh3bo{color:white;background:#0F2033;border-radius:6px;width:30%;text-align:center;padding:5px 10px}button.svelte-dkh3bo{border:none;padding:5px 10px}
aside.svelte-n0ypaq{display:block;top:50px;left:0;width:27.77vw;height:100vh;padding-left:50px}section.svelte-n0ypaq{padding:10px 10px 20px 10px}
.button-holder.svelte-15z0ag8{width:27vw;display:flex;flex-flow:column nowrap}strong.svelte-15z0ag8{font-weight:700;font-size:22px}section.svelte-15z0ag8{width:50%;margin:auto}
.button-holder.svelte-ebsw60{width:27vw;display:flex;flex-flow:column nowrap}strong.svelte-ebsw60{font-weight:700;font-size:22px}
.button-holder.svelte-9jf7df{width:27vw;display:flex;flex-flow:column nowrap}button.svelte-9jf7df{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}
.button-holder.svelte-1sss75x{width:27vw;display:flex;flex-flow:column nowrap}.video-holder.svelte-1sss75x{width:100%}button.svelte-1sss75x{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}#alert.svelte-1sss75x{color:red;font-weight:700;font-size:24px}#not-covered.svelte-1sss75x{color:red;background:#FFEEEE;border-radius:6px;border:none}
.num.svelte-m0bqhn{padding-right:100px}div.svelte-m0bqhn{color:black}.active.svelte-m0bqhn{display:block}
.video-holder.svelte-1eg3wlj{width:100%}#alert.svelte-1eg3wlj{color:red;font-weight:700;font-size:24px}#not-covered.svelte-1eg3wlj{color:red;background:#FFEEEE;border-radius:6px;border:none}
.button-holder.svelte-18094jg{width:27vw;display:flex;flex-flow:column nowrap}button.svelte-18094jg{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}a.svelte-18094jg{text-decoration:none}
.caret.svelte-hhwisi{display:flex;flex-flow:row nowrap;align-items:center;justify-content:space-between}a.svelte-hhwisi{text-decoration:underline}
.button-holder.svelte-1omauo6{width:27vw;display:flex;flex-flow:column nowrap}#cookie-buttons.svelte-1omauo6{margin:40px 0px 0px 0px}
.button-holder.svelte-15owt46{width:27vw;display:flex;flex-flow:column nowrap}button.svelte-15owt46{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}a.svelte-15owt46{text-decoration:none}
.button-holder.svelte-h4ab6b{width:27vw;display:flex;flex-flow:column nowrap}.caret.svelte-h4ab6b{display:flex;flex-flow:row nowrap;align-items:center;justify-content:space-between}
.button-holder.svelte-338bov{width:27vw;display:flex;flex-flow:column nowrap}
section.svelte-1y4us4j{width:100%}.button-holder.svelte-1y4us4j{width:27vw;display:flex;flex-flow:column nowrap}
nav.svelte-1fqlyd7{display:flex;flex-flow:row nowrap;height:50px;justify-content:space-between;align-items:center;background-color:#303538;font-weight:300;padding:0 1em;position:sticky;top:0px;left:0px;z-index:1}ul.svelte-1fqlyd7{display:flex;list-style:none;justify-content:flex-end;margin:0;padding:0;color:#c7c7c7}img.svelte-1fqlyd7{display:flex;justify-content:flex-start;height:30px;margin-left:25px}li.svelte-1fqlyd7{display:flex;margin:0px 20px 0px 20px;text-transform:uppercase}[aria-current].svelte-1fqlyd7{position:relative;display:inline-block}[aria-current].svelte-1fqlyd7::after{position:absolute;content:'';width:calc(100% - 1em);height:2px;background-color:#e74e45;display:block}a.svelte-1fqlyd7{display:flex;padding:1em 0.5em;text-decoration:none;margin:2em, 0em}
aside.svelte-f5a52t{display:flex;flex-direction:column;justify-content:space-between;align-items:center;width:33.75vw;height:86vh;background-color:#38424D;border-radius:15px;border:0px;margin:12px 0px 40px 20px;min-width:33vw;position:sticky;top:50px}#timer.svelte-f5a52t{display:flex;flex-flow:row wrap;margin-block-start:30px;align-items:center;justify-content:center}#minutes.svelte-f5a52t{color:white;background:#0F2033;border-radius:6px;max-width:150px;height:60px;text-align:center;font-size:24px;margin:8px 20px;display:grid;align-content:center;padding:2px 30px}.done.svelte-f5a52t{display:flex;flex-flow:row nowrap;align-items:center;width:95%;margin-bottom:20px
    }progress.svelte-f5a52t{-webkit-appearance:none;border:none;display:block;width:86%;position:relative;bottom:4.7vh;height:6px;z-index:-1;margin-left:31px}progress.svelte-f5a52t::-webkit-progress-bar{background:#303538}progress.bg1.svelte-f5a52t::-webkit-progress-value{background:#74ef7b}progress.bg2.svelte-f5a52t::-webkit-progress-value{background:#F1C330}progress.bg3.svelte-f5a52t::-webkit-progress-value{background:#E94040}.bg1.svelte-f5a52t{background-image:url('../bg-group1.png');background-blend-mode:normal;background-size:cover;background-position:top;color:#74ef7b;font-size:20px}.bg2.svelte-f5a52t{background-image:url('../bg-group2.png');background-blend-mode:normal;background-size:cover;background-position:top;color:#F1C330;font-size:20px}.bg3.svelte-f5a52t{background-image:url('../bg-group3.png');background-blend-mode:normal;background-size:cover;background-position:top;color:#E94040;font-size:20px}#progress-holder.svelte-f5a52t{width:80%}#challenge-name.svelte-f5a52t{font-size:40px;color:white}
button.svelte-1wg7n7v{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}.green.svelte-1wg7n7v{background-color:#73ef7b;color:#2C3C4E}.yellow.svelte-1wg7n7v{background-color:#F1C330;color:#2C3C4E}.red.svelte-1wg7n7v{background-color:#E74E45;color:#FFFFFF}
button.svelte-1js4abv{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}.green.svelte-1js4abv{background-color:#73ef7b;color:#2C3C4E}.yellow.svelte-1js4abv{background-color:#F1C330;color:#2C3C4E}.red.svelte-1js4abv{background-color:#E74E45;color:#FFFFFF}
#back.svelte-1x5om3e{display:flex;position:inherit;bottom:72px;flex-flow:row nowrap;align-items:center;color:#757575;margin:20px 0px}svg.svelte-1x5om3e{margin-right:20px;fill:#757575}
strong.svelte-1qffeqo{font-weight:600;font-size:22px;text-decoration:underline}
.lock.svelte-n4s916{margin:auto}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi4zNzczNDQ4MzkyLmNzcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vX2xheW91dC5zdmVsdGUiLCIuLi8uLi8uLi9fZXJyb3Iuc3ZlbHRlIiwiLi4vLi4vLi4vaW5kZXhfb2xkLnN2ZWx0ZSIsIi4uLy4uLy4uL2luZGV4LnN2ZWx0ZSIsIi4uLy4uLy4uL3F1aXptYWluLnN2ZWx0ZSIsIi4uLy4uLy4uL3Jldmlldy5zdmVsdGUiLCIuLi8uLi8uLi9xdWl6LnN2ZWx0ZSIsIi4uLy4uLy4uL2luZGV4LnN2ZWx0ZSIsIi4uLy4uLy4uL1tzbHVnXS5zdmVsdGUiLCIuLi8uLi8uLi9xMWFyY2hpdmUuc3ZlbHRlIiwiLi4vLi4vLi4vUHJvZ3Jlc3Muc3ZlbHRlIiwiLi4vLi4vLi4vY2hlY2sxLnN2ZWx0ZSIsIi4uLy4uLy4uL2NoZWNrMi5zdmVsdGUiLCIuLi8uLi8uLi9jaGVjazMuc3ZlbHRlIiwiLi4vLi4vLi4vcTFkdXAuc3ZlbHRlIiwiLi4vLi4vLi4vcTAuc3ZlbHRlIiwiLi4vLi4vLi4vcTEuc3ZlbHRlIiwiLi4vLi4vLi4vcTIuc3ZlbHRlIiwiLi4vLi4vLi4vcTMuc3ZlbHRlIiwiLi4vLi4vLi4vcTQuc3ZlbHRlIiwiLi4vLi4vLi4vcTUuc3ZlbHRlIiwiLi4vLi4vLi4vcTYuc3ZlbHRlIiwiLi4vLi4vLi4vcTcuc3ZlbHRlIiwiLi4vLi4vLi4vcTguc3ZlbHRlIiwiLi4vLi4vLi4vTmF2LnN2ZWx0ZSIsIi4uLy4uLy4uL0NvbXBsZXRpb24uc3ZlbHRlIiwiLi4vLi4vLi4vY29tcGxldGUuc3ZlbHRlIiwiLi4vLi4vLi4vQnRuLnN2ZWx0ZSIsIi4uLy4uLy4uL0JhY2suc3ZlbHRlIiwiLi4vLi4vLi4vRGV0ZWN0LnN2ZWx0ZSIsIi4uLy4uLy4uL0NoZWNrLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuXHRpbXBvcnQgTmF2IGZyb20gJy4uL2NvbXBvbmVudHMvTmF2LnN2ZWx0ZSc7XG5cdGV4cG9ydCBsZXQgc2VnbWVudDtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cdG1haW4ge1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdH1cbjwvc3R5bGU+XG5cbjxOYXYge3NlZ21lbnR9Lz5cblxuPG1haW4+XG5cdDxzbG90Pjwvc2xvdD5cbjwvbWFpbj5cbjwhLS08UHJvZ3Jlc3MgLz4tLT4iLCI8c2NyaXB0PlxuXHRleHBvcnQgbGV0IHN0YXR1cztcblx0ZXhwb3J0IGxldCBlcnJvcjtcblxuXHRjb25zdCBkZXYgPSBcImRldmVsb3BtZW50XCIgPT09ICdkZXZlbG9wbWVudCc7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXHRoMSwgcCB7XG5cdFx0bWFyZ2luOiAwIGF1dG87XG5cdH1cblxuXHRoMSB7XG5cdFx0Zm9udC1zaXplOiAyLjhlbTtcblx0XHRmb250LXdlaWdodDogNzAwO1xuXHRcdG1hcmdpbjogMCAwIDAuNWVtIDA7XG5cdH1cblxuXHRwIHtcblx0XHRtYXJnaW46IDFlbSBhdXRvO1xuXHR9XG5cblx0QG1lZGlhIChtaW4td2lkdGg6IDQ4MHB4KSB7XG5cdFx0aDEge1xuXHRcdFx0Zm9udC1zaXplOiA0ZW07XG5cdFx0fVxuXHR9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT57c3RhdHVzfTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48aDE+e3N0YXR1c308L2gxPlxuXG48cD57ZXJyb3IubWVzc2FnZX08L3A+XG5cbnsjaWYgZGV2ICYmIGVycm9yLnN0YWNrfVxuXHQ8cHJlPntlcnJvci5zdGFja308L3ByZT5cbnsvaWZ9XG4iLCI8c3R5bGU+XG5cdG1haW4ge1xuXHRcdHdpZHRoOiAxMDAlO1xuXHR9XG5cdGgxLCBmaWd1cmUsIHAge1xuXHRcdHRleHQtYWxpZ246IGNlbnRlcjtcblx0XHRtYXJnaW46IDAgYXV0bztcblx0fVxuXHRcblx0Lmhlcm8ge1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICMzZTRiNTk7XG5cdFx0cGFkZGluZy1sZWZ0OiA4MHB4O1xuXHRcdHBhZGRpbmctdG9wOiAzMHZoO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGhlaWdodDogNjB2aDtcblx0fVxuXHQuaGVybyBwIHtcblx0XHRtYXJnaW46IDFlbSBhdXRvO1xuXHRcdGNvbG9yOiB3aGl0ZTtcblx0fVxuXHRoMSB7XG5cdFx0Zm9udC1zaXplOiAyLjhlbTtcblx0XHR0ZXh0LWFsaWduOiBsZWZ0O1xuXHRcdHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cdFx0Zm9udC13ZWlnaHQ6IDcwMDtcblx0XHRtYXJnaW46IDAgMCAwLjVlbSAwO1xuXHRcdGNvbG9yOiB3aGl0ZTtcblx0XHRsZXR0ZXItc3BhY2luZzogMjUlO1xuXHR9XG5cdGgyIHtcblx0XHR0ZXh0LWFsaWduOiBsZWZ0O1xuXHRcdG1hcmdpbjogYXV0bztcblx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHR9XG5cdGgzIHtcblx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdFx0bWFyZ2luOiBhdXRvO1xuXHR9XG5cdC5iaWdJbWcge1xuXHRcdG1heC13aWR0aDogMTQwMHB4O1xuXHRcdGJhY2tncm91bmQtY29sb3I6IGdyZXk7XG5cdH1cblxuXHRmaWd1cmUge1xuXHRcdG1hcmdpbjogMCAwIDFlbSAwO1xuXHR9XG5cdGJ1dHRvbiB7XG5cdFx0YmFja2dyb3VuZDogIzdBQUY1NDtcblx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHRcdHBhZGRpbmc6IDEwcHggMjBweCAxMHB4IDIwcHg7XG5cdFx0Zm9udC1zaXplOiAzMHB4O1xuXHRcdGxpbmUtaGVpZ2h0OiAzOHB4O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRib3JkZXItcmFkaXVzOiAxMHB4O1xuXHRcdGNvbG9yOiB3aGl0ZTtcblx0XHRib3gtc2hhZG93OiAwcHggNHB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xuXHR9XG5cdGltZyB7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0bWF4LXdpZHRoOiA0MDBweDtcblx0XHRtYXJnaW46IDAgMCAxZW0gMDtcblx0fVxuXHQuYWJvdXQge1xuXHRcdHBhZGRpbmc6IDEuNWVtO1xuXHR9XG5cdHAge1xuXHRcdGNvbG9yOiBibGFjaztcblx0XHR0ZXh0LWFsaWduOiBsZWZ0O1xuXHR9XG5cdHVsIHtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGZsZXgtZGlyZWN0aW9uOiByb3c7XG5cdFx0XG5cdFx0bGlzdC1zdHlsZTogbm9uZTtcblx0XHRtYXJnaW4tYmxvY2stc3RhcnQ6IDBweDtcblx0XHRtYXJnaW4tYmxvY2stZW5kOiAwcHg7XG5cdFx0cGFkZGluZy1pbmxpbmUtc3RhcnQ6IDBweDtcblx0fVxuXHRsaSB7XG5cdFx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG5cdFx0bWFyZ2luOiBhdXRvO1xuXHR9XG5cdC53aHl7XG5cdFx0cGFkZGluZy1sZWZ0OiA4MHB4O1xuXHRcdG1hcmdpbjogMWVtIGF1dG87XG5cdH1cblx0LndoeSBoMiB7XG5cdFx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcblx0XHR0ZXh0LWFsaWduOiBsZWZ0O1xuXHR9XG5cdGEge1xuXHRcdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblx0XHRwYWRkaW5nOiA0cHggMzBweDtcblx0fVxuXHRAbWVkaWEgKG1pbi13aWR0aDogNDgwcHgpIHtcblx0XHRoMSB7XG5cdFx0XHRmb250LXNpemU6IDRlbTtcblx0XHR9XG5cdH1cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPk1pbmQgWW91ciBEYXRhOiBBa2EgRnVjayBzdXJ2ZWlsbGFuY2UgY2FwaXRhbGlzbTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48ZGl2IGNsYXNzPVwiaGVyb1wiPlxuXHQ8aDE+TWluZCBZb3VyIERhdGE8L2gxPlxuXHQ8cCA+V2UgYmVsaWV2ZSB0aGF0IGV2ZXJ5b25lIGluIHRoaXMgd29ybGQgc2hvdWxkIGJlIHRoZSBvbmx5IG93bmVyIG9mIG91ciBkYXRhLjxicj5cblx0XHRCdXQgbW9zdCBvZiB1cyBibGFoIGJsYWggYmxhaCA8L3A+XG5cdFx0PGEgcmVsPXByZWZldGNoIGhyZWY9XCIvcXVpelwiPjxidXR0b24+U3RhcnQgdGhlIGxlc3NvbjwvYnV0dG9uPjwvYT5cbjwvZGl2PlxuPHVsPlxuXHQ8bGkgY2xhc3M9J2Fib3V0Jz5cblx0XHQ8aDM+V2hvIFdlIEFyZTwvaDM+XG5cdFx0PHAgY2xhc3M9J2Fib3V0Jz5Gb3IgYW55b25lIGNvbmNlcm5lZCBhYm91dCBsb3NzIG9mIHByaXZhY3kgYW5kIHRoZSBpbXBsaWNhdGlvbnMgaXQgaGFzIGZvciBvdXIgZGVtb2NyYWN5LCBNaW5kIHlvdXIgRGF0YSBlZHVjYXRlcywgYW5kIGVtcG93ZXJzIGNpdGl6ZW5zIHRvIGZpZ2h0IGZvciBhIG1vcmUgZXF1aXRhYmxlIGZvcm0gb2Ygc3VydmlsbGFuY2UgY2FwaXRhbGlzbSBiZWNhdXNlLCBvdXIgZnV0dXJlIGZyZWVkb20gdG8gcHJpdmFjeSBkZXBlbmRzIG9uIHRoZSBhY3Rpb25zIHdlIHRha2Ugbm93LjwvcD5cblx0PC9saT5cblx0PGxpIGNsYXNzPSdhYm91dCc+XHRcdFxuXHRcdDxoMz5PdXIgTWlzc2lvbjwvaDM+XG5cdFx0PHAgY2xhc3M9J2Fib3V0Jz5XZSBhcmUgdG8gZWR1Y2F0ZSBwZW9wbGUgYWJvdXQgdGhlIGltcGxpY2F0aW9ucyBvZiBzdXJ2ZWlsbGFuY2UgY2FwaXRhbGlzbSBhbmQgZW1wb3dlciB0aGVtIHRvIE9wdCBvdXQgYW5kIHRvIGhlbHAgYnJpbmcgZm9ydGggaW5zdGl0dXRpb25zLCByZWd1bGF0aW9ucywgYW5kIGxhd3MgdG8gcHJvbW90ZSBhIHNvY2lhbCBmb3JtIG9mIHN1cnZlaWxsYW5jZSBjYXBpdGFsaXNtIHRoYXQgc2VydmVzIGFsbC4gPC9wPlxuXHQ8L2xpPlxuXHQ8bGkgY2xhc3M9J2Fib3V0Jz5cdFx0XG5cdFx0PGgzPlNvbWV0aGlnbiBFbHNlPC9oMz5cblx0XHQ8cCBjbGFzcz0nYWJvdXQnPldlIGFyZSB0byBlZHVjYXRlIHBlb3BsZSBhYm91dCB0aGUgaW1wbGljYXRpb25zIG9mIHN1cnZlaWxsYW5jZSBjYXBpdGFsaXNtIGFuZCBlbXBvd2VyIHRoZW0gdG8gT3B0IG91dCBhbmQgdG8gaGVscCBicmluZyBmb3J0aCBpbnN0aXR1dGlvbnMsIHJlZ3VsYXRpb25zLCBhbmQgbGF3cyB0byBwcm9tb3RlIGEgc29jaWFsIGZvcm0gb2Ygc3VydmVpbGxhbmNlIGNhcGl0YWxpc20gdGhhdCBzZXJ2ZXMgYWxsLiA8L3A+XG5cdDwvbGk+XG48L3VsPlxuPGltZyBzcmM9Jy4vMTQwMHg0NTAucG5nJyBjbGFzcz1cImJpZ0ltZ1wiIGFsdD0ncGxhY2Vob2xkZXInPlxuPGgyIGNsYXNzPSd3aHknPldoeSBpdCBtYXR0ZXJzPC9oMj5cblx0PHAgY2xhc3M9XCJ3aHlcIj5JJ20gYmFieSBtaXh0YXBlIHNlbGZpZXMgZHVpcyBiZWZvcmUgdGhleSBzb2xkIG91dCBjcm9udXQgaVBob25lLiBCdXRjaGVyIGR1aXMgd2lsbGlhbXNidXJnIGZvb2QgdHJ1Y2sgc3VzdGFpbmFibGUgcXVpcyBuZXh0IGxldmVsIGlwc3VtIHRodW5kZXJjYXRzIHN5bnRoLiBTY2hsaXR6IHVtYW1pIGluIG1lZ2dpbmdzIHl1Y2NpZSBmb29kIHRydWNrLiBGYXNoaW9uIGF4ZSBjcnVjaWZpeCBsYWJvcmlzIGFzeW1tZXRyaWNhbCBqZWFuIHNob3J0cyBkb2xvcmUuIEZyZWVnYW4gY2hpbGx3YXZlIGZhc2hpb24gYXhlIHZpY2UgcGludGVyZXN0IGJpY3ljbGUgcmlnaHRzIHZhcG9yd2FyZSBmb3VyIGxva28gYWYgZWl1c21vZCByYXcgZGVuaW0uIFZleGlsbG9sb2dpc3QgZmluZ2Vyc3RhY2hlIG9yZ2FuaWMgeXIgcG9rZSwgbHlmdCBudWxsYSBwb3J0bGFuZCBoZWlybG9vbSBlbGl0IG1hcmZhIGJydW5jaC4gQnVzaHdpY2sgZGVlcCB2IHV0LCB0aHVuZGVyY2F0cyBhaXIgcGxhbnQgYmFuam8gcGFsbyBzYW50byB0YXhpZGVybXkgc3VjY3VsZW50cyBiZWZvcmUgdGhleSBzb2xkIG91dCBwdXQgYSBiaXJkIG9uIGl0IGxpdmUtZWRnZSBob29kaWUgaGVsbGEuXG5cdDwvcD5cbiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgZmFkZSwgYmx1ciB9IGZyb20gJ3N2ZWx0ZS90cmFuc2l0aW9uJztcbiAgICBpbXBvcnQgeyBxdWludEluT3V0IH0gZnJvbSAnc3ZlbHRlL2Vhc2luZyc7XG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG4gICAgaW1wb3J0IFRyYW5zIGZyb20gJy4uL2NvbXBvbmVudHMvVHJhbnNIZWxwLnN2ZWx0ZSdcbiAgICBsZXQgdmlzaWJsZSA9IGZhbHNlO1xuICAgIG9uTW91bnQoKCkgPT4gdmlzaWJsZSA9IHRydWUpXG48L3NjcmlwdD5cbjxUcmFucz5cbjxkaXYgaWQ9XCJsb2dvLWhvbGRlclwiPlxuICAgIDxkaXY+XG4gICAgeyNpZiB2aXNpYmxlfVxuICAgIDxhIHByZWZldGNoIGhyZWY9XCJxdWl6XCI+XG4gICAgPGltZyBzcmM9XCJNWURsb2dvX2xhcmdlLnBuZ1wiIGFsdD1cIk1pbmQgeW91ciBkYXRhIGxvZ28sIGNsaWNrIHRvIGVudGVyXCIgaW46ZmFkZT1cInt7ZGVsYXk6IDMwMDAsIGR1cmF0aW9uOiA5MDAwLCB9fVwiIG91dDpibHVyPVwie3tkZWxheTogMCwgZHVyYXRpb246IDIwMDB9fVwiPjwvYT5cbiAgICB7L2lmfVxuICAgIDwvZGl2PlxuPC9kaXY+XG48L1RyYW5zPlxuPHN0eWxlPlxuICAgICNsb2dvLWhvbGRlcntcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICBpbWcge1xuICAgICAgICB3aWR0aDogODAwcHg7XG4gICAgfVxuPC9zdHlsZT4iLCI8c2NyaXB0PlxuIGltcG9ydCBRdWl6MSBmcm9tICcuL3F1aXovcTEuc3ZlbHRlJ1xuIGltcG9ydCBRdWl6MiBmcm9tICcuL3F1aXovcTIuc3ZlbHRlJ1xuIGltcG9ydCBRdWl6MyBmcm9tICcuL3F1aXovcTMuc3ZlbHRlJ1xuIGltcG9ydCBRdWl6NCBmcm9tICcuL3F1aXovcTQuc3ZlbHRlJ1xuIGltcG9ydCBRdWl6NSBmcm9tICcuL3F1aXovcTUuc3ZlbHRlJ1xuIGltcG9ydCBRdWl6NiBmcm9tICcuL3F1aXovcTYuc3ZlbHRlJ1xuIGltcG9ydCBRdWl6NyBmcm9tICcuL3F1aXovcTcuc3ZlbHRlJ1xuIGltcG9ydCBRdWl6OCBmcm9tICcuL3F1aXovcTguc3ZlbHRlJ1xuIGltcG9ydCBRdWl6OSBmcm9tICcuL3F1aXovcTkuc3ZlbHRlJ1xuIGltcG9ydCBDaGVja3BvaW50MSBmcm9tICcuL3F1aXovY2hlY2sxLnN2ZWx0ZSdcbiBpbXBvcnQgQ2hlY2twb2ludDIgZnJvbSAnLi9xdWl6L2NoZWNrMi5zdmVsdGUnXG4gaW1wb3J0IENoZWNrcG9pbnQzIGZyb20gJy4vcXVpei9jaGVjazMuc3ZlbHRlJ1xuIGltcG9ydCBDb21wbGV0aW9uIGZyb20gJy4uL2NvbXBvbmVudHMvQ29tcGxldGlvbi5zdmVsdGUnXG4gaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyLCBiZWZvcmVVcGRhdGUsIGFmdGVyVXBkYXRlLCBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJztcbmltcG9ydCB7IHNsaWRlIH0gZnJvbSAnc3ZlbHRlL3RyYW5zaXRpb24nO1xuaW1wb3J0IHsgcXVpbnRPdXQsIHF1aW50SW4gfSBmcm9tICdzdmVsdGUvZWFzaW5nJztcbmltcG9ydCB7IGNvdW50IH0gZnJvbSAnLi4vc3RvcmUuanMnXG4vL2ltcG9ydCBxdWl6U3RlcHMgZnJvbSAnLi4vc3RvcmUuanMnXG5cblxuY29uc3QgcXVpelN0ZXAgPSAgKFtcbiAgICB7Y29tcG9uZW50OiBRdWl6MSwgbmFtZTogJ1dFQkNBTScsIHNob3dTaWRlQmFyOiB0cnVlfSxcbiAgICB7Y29tcG9uZW50OlF1aXoyLCBuYW1lOiAnSFRUUFMnICwgc2hvd1NpZGVCYXI6IHRydWV9LFxuICAgIHtjb21wb25lbnQ6UXVpejYsIG5hbWU6ICdETlMnICwgc2hvd1NpZGVCYXI6IHRydWV9LFxuICAgIHtjb21wb25lbnQ6Q2hlY2twb2ludDEsIG5hbWU6ICdTZWN1cml0eSB2cyBQcml2YWN5Jywgc2hvd1NpZGVCYXI6IGZhbHNlfSxcbiAgICB7Y29tcG9uZW50OlF1aXozLCBuYW1lOiAnU0VBUkNIJyAsIHNob3dTaWRlQmFyOiB0cnVlfSxcbiAgICB7Y29tcG9uZW50OlF1aXo0LCBuYW1lOiAnUFJJVkFDWSBTRVRUSU5HUycgLCBzaG93U2lkZUJhcjogdHJ1ZX0sXG4gICAge2NvbXBvbmVudDpRdWl6NSwgbmFtZTogJ1RSQUNLRVIgQkxPQ0tFUicgLCBzaG93U2lkZUJhcjogdHJ1ZX0sXG4gICAge2NvbXBvbmVudDpDaGVja3BvaW50MiwgbmFtZTogJ1N1cnZlaWxsYW5jZSBDYXBpdGFsaXNtJywgc2hvd1NpZGVCYXI6IGZhbHNlfSxcbiAgICB7Y29tcG9uZW50OlF1aXo3LCBuYW1lOiAnSW50ZXJuZXQgb2YgVGhpbmdzJyAsIHNob3dTaWRlQmFyOiB0cnVlfSxcbiAgICB7Y29tcG9uZW50OlF1aXo4LCBuYW1lOiAnTG9jYXRpb24gVHJhY2tpbmcnICwgc2hvd1NpZGVCYXI6IHRydWV9LFxuICAgIHtjb21wb25lbnQ6Q2hlY2twb2ludDMsIG5hbWU6ICdDaGFuZ2UnICwgc2hvd1NpZGVCYXI6IGZhbHNlfSxcbl0pXG4kOiBzaG93U2lkZUJhciA9IHF1aXpTdGVwWyRjb3VudF0uc2hvd1NpZGVCYXI7XG48L3NjcmlwdD5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPlRlc3QgeW91ciBrbm93bGVkZ2U8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxtYWluIHRyYW5zaXRpb246c2xpZGU9XCJ7e2RlbGF5OiAxMDAsIGR1cmF0aW9uOiA0MDAsIGVhc2luZzogcXVpbnRPdXR9fVwiPlxuICAgICAgIHsjaWYgc2hvd1NpZGVCYXJ9XG4gICAgICAgPENvbXBsZXRpb24gY2xhc3M9J3N0ZXAnPlxuICAgICAgICAgICAgICB7cXVpelN0ZXBbJGNvdW50XS5uYW1lfVxuICAgICAgICAgICBcbiAgICAgICA8L0NvbXBsZXRpb24+XG4gICAgICAgey9pZn1cbiAgICAgICA8ZGl2IGlkPVwibWFpbi1jb250ZW50XCI+IFxuICAgICAgICA8c3ZlbHRlOmNvbXBvbmVudCB0aGlzPXtxdWl6U3RlcFskY291bnRdLmNvbXBvbmVudH0gLz5cbiAgICAgICA8IS0tPFF1aXoyIG9uOm1lc3NhZ2U9e2hhbmRsZU1lc3NhZ2V9Lz4gLS0+XG48IS0tPHNlbGVjdCBiaW5kOnZhbHVlPXtzZWxlY3RlZH0+XG4gICAgICAgIHsjZWFjaCBxdWl6U3RlcHMgYXMgcX1cblx0XHQ8b3B0aW9uIHZhbHVlPXtxfT5RdWVzdGlvbiB7cS5pZH08L29wdGlvbj5cblx0ey9lYWNofVxuPC9zZWxlY3Q+LS0+XG48IS0tPGJ1dHRvbiBvbjpjbGljaz17aGFuZGxlQ2xpY2t9PkNsaWNrIG1lPC9idXR0b24+LS0+XG48IS0tPFByb2dyZXNzIHBhc3Q9e3Bhc3QubmFtZX0gY3VycmVudD17c2VsZWN0ZWQubmFtZX0gbmV4dD17bmV4dC5uYW1lfS8+LS0+XG48L2Rpdj5cbjwvbWFpbj5cbjxzdHlsZT5cbiAgICAgICBtYWluIHtcbiAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgZmxleC1mbG93OiByb3c7XG5cbiAgICAgICB9XG4gICAgICAgI21haW4tY29udGVudHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZDogIzM4NDI0RDtcbiAgICAgICAgICAgICAgLypoZWlnaHQ6IDg2dmg7ICovXG4gICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gICAgICAgICAgICAgIGJvcmRlcjogMHB4O1xuICAgICAgICAgICAgICBtYXJnaW46IDEycHggMjJweCA0MHB4IDIwcHg7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDkuM3ZoIDV2dyAwdmggOS4zdmg7XG4gICAgICAgICAgICAgIGNvbG9yOiAjRkZGRkZGO1xuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICBcbiAgICAgICAgICAgICAgLyptYXJnaW4tdG9wOiAtNTBweDtcbiAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDIxdnc7XG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNTBweDtcbiAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTVweDsqL1xuICAgICAgIH1cbjwvc3R5bGU+IiwiPHNjcmlwdD5cblx0aW1wb3J0IHsgb25Nb3VudCwgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblx0aW1wb3J0IFRyYW5zIGZyb20gJy4uL2NvbXBvbmVudHMvVHJhbnNIZWxwLnN2ZWx0ZSc7XG5cdGltcG9ydCBDb21wbGV0ZSBmcm9tICcuLi9jb21wb25lbnRzL2NvbXBsZXRlLnN2ZWx0ZScgLy9zZXQgc3VjY2Vzcz17ZmFsc2V9IGZvciBmYWlsdXJlXG5cdGltcG9ydCBCdG4gZnJvbSAnLi4vY29tcG9uZW50cy9CdG4uc3ZlbHRlJyAvL3NldCA8TmV4dCBxPXsyfT4gdG8gc2tpcCBtdWx0aXBsZSBzdGVwc1xuXHRpbXBvcnQgeyBjb3VudCwgc3RlcCwgcXVpelN0ZXBzIH0gZnJvbSAnLi4vc3RvcmUuanMnXG5cdGltcG9ydCBCYWNrIGZyb20gJy4uL2NvbXBvbmVudHMvQmFjay5zdmVsdGUnXG5cblxuXHQvL3NldHMgYXNpZGUgaWNvbiB0byBpbiBwcm9ncmVzcyB2aWEgc3RvcmVcbiAgICBvbk1vdW50KGFzeW5jKCkgPT4geyRxdWl6U3RlcHNbJGNvdW50XS5zdGF0dXMgPSAxO1xuICAgICAgICAkcXVpelN0ZXBzLmZvckVhY2goKHYpID0+IHtpZih2LmNvbXBsZXRlICYmICF2LmRpc3BsYXlQcm9ncmVzcyl7Y29tcGxldGVkKyt9fSl9KTtcbiAgICBsZXQgY29tcGxldGVkPSAwO1xuICAgXG5cdGxldCBjdXJyZW50ID0gJ2luaXRpYWwnO1xuPC9zY3JpcHQ+XG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5JbnRlcm5ldCBvZiB0aGluZ3MoIEFsZXhhLCBIb21lIGRldmljZXMpPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG48VHJhbnM+XG48c2VjdGlvbiBjbGFzcz0ncmV2aWV3Jz5cbiAgICA8aDI+WW91IGhhdmUgY29tcGxldGVkIHtjb21wbGV0ZWR9IC8gOCBjaGFsbGVuZ2VzITwvaDI+XG4gICAgXG4gICAgeyNlYWNoICRxdWl6U3RlcHMgYXMge25hbWUsIGNvbXBsZXRlLCBkaXNwbGF5UHJvZ3Jlc3N9fVxuICAgIHsjaWYgZGlzcGxheVByb2dyZXNzfVxuICAgIDxkaXYgY2xhc3M9XCJjYXJldFwiIGNsYXNzOmNvbXBsZXRlPlxuICAgICAgICA8cCBjbGFzczpjb21wbGV0ZT57bmFtZX08L3A+XG4gICAgICAgIHsjaWYgIWNvbXBsZXRlfVxuICAgICAgICA8c3ZnIHdpZHRoPVwiMjhcIiBoZWlnaHQ9XCIyOFwiIHZpZXdCb3g9XCIwIDAgMjggMjhcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgICAgIDxjaXJjbGUgY3g9XCIxNFwiIGN5PVwiMTRcIiByPVwiMTNcIiBzdHJva2U9XCIjRTk0MDQwXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz5cbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTMuOTk5MSA2LjkxMDE2TDEyLjc0OTMgOC4xNTk5M0wxNy42OTUyIDEzLjExNDdINi45MDgyVjE0Ljg4NzRIMTcuNjk1MkwxMi43NDkzIDE5Ljg0MjJMMTMuOTk5MSAyMS4wOTJMMjEuMDkgMTQuMDAxMUwxMy45OTkxIDYuOTEwMTZaXCIgZmlsbD1cIiNFOTQwNDBcIi8+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIFxuICAgICAgICB7OmVsc2V9XG4gICAgICAgIDxzdmcgd2lkdGg9XCIyMVwiIGhlaWdodD1cIjIxXCIgdmlld0JveD1cIjAgMCAyMSAyMVwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgPHBhdGggZD1cIk0xMC4yNzU0IDE5LjAzN0MxNS4xMjA2IDE5LjAzNyAxOS4wNTA5IDE1LjExMjYgMTkuMDUwOSAxMC4yNjg1QzE5LjA1MDkgNS40MjQ0NCAxNS4xMjA2IDEuNSAxMC4yNzU0IDEuNUM1LjQzMDI1IDEuNSAxLjUgNS40MjQ0NCAxLjUgMTAuMjY4NUMxLjUgMTUuMTEyNiA1LjQzMDI1IDE5LjAzNyAxMC4yNzU0IDE5LjAzN1pcIiBmaWxsPVwiI0U5NDA0MFwiIHN0cm9rZT1cIiNFOTQwNDBcIiBzdHJva2Utd2lkdGg9XCIzXCIvPlxuICAgICAgICAgICAgPHBhdGggZD1cIk04LjI4NDUzIDE1LjgyNzJMMy44NzA3NSAxMS40MTc2QzMuNjA1NTggMTEuMTUyNyAzLjYwNTU4IDEwLjcyMzIgMy44NzA3NSAxMC40NTgzTDQuODMxMDQgOS40OTg4NkM1LjA5NjIxIDkuMjMzOTEgNS41MjYxOCA5LjIzMzkxIDUuNzkxMzUgOS40OTg4Nkw4Ljc2NDY4IDEyLjQ2OTNMMTUuMTMzMiA2LjEwNjg5QzE1LjM5ODQgNS44NDE5NyAxNS44Mjg0IDUuODQxOTcgMTYuMDkzNSA2LjEwNjg5TDE3LjA1MzggNy4wNjYyOUMxNy4zMTkgNy4zMzEyIDE3LjMxOSA3Ljc2MDc0IDE3LjA1MzggOC4wMjU2OEw5LjI0NDg0IDE1LjgyNzJDOC45Nzk2NCAxNi4wOTIxIDguNTQ5NyAxNi4wOTIxIDguMjg0NTMgMTUuODI3MlpcIiBmaWxsPVwiIzMwMzUzOFwiLz5cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICB7L2lmfVxuICAgIDwvZGl2PiAgXG4gICAgey9pZn1cbiAgICB7L2VhY2h9XG4gICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1ob2xkZXJcIj5cbiAgICAgICAgPGEgcHJlZmV0Y2ggaHJlZj0naG9tZSc+PGJ1dHRvbj5DbGFpbSBteSBQcml6ZTwvYnV0dG9uPjwvYT5cbiAgICAgICAgPGEgcHJlZmV0Y2ggaHJlZj0ncXVpem1haW4nPjxidXR0b24+QmFjayB0byBxdWl6PC9idXR0b24+PC9hPlxuICAgIDwvZGl2PlxuXG48L3NlY3Rpb24+XG5cbjwvVHJhbnM+XG48c3R5bGU+XG4gICAgLnJldmlld3tcbiAgICAgICAgd2lkdGg6NTB2dztcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzM4NDI0ZDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1mbG93OiBjb2x1bW47XG4gICAgICAgIG1hcmdpbjogYXV0bztcbiAgICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICAgIHBhZGRpbmc6IDY1cHggMTAwcHggNjVweCA2NXB4O1xuICAgIH1cbiAgIC5jb21wbGV0ZXtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvciA6IzM4NDI0RDtcbiAgICAgICAgY29sb3I6ICNmZmZmZmY7XG5cbiAgIH1cbiAgIHAge1xuICAgICAgIFxuICAgICAgIGNvbG9yOiNlOTQwNDA7XG4gICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgICBtYXJnaW46IDVweDtcbiAgIH1cbiAgIGJ1dHRvbiB7XG5cdCAgIHBhZGRpbmc6IDEwcHggMjBweDtcblx0ICAgbWFyZ2luOiAxMHB4O1xuXHQgICBib3JkZXI6IGJsYWNrIHNvbGlkIDBweDtcblx0ICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgfVxuICAgLmNhcmV0e1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0ZmxleC1mbG93OiByb3cgbm93cmFwO1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICB9XG4gICAgZGl2LmNhcmV0IHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIG1hcmdpbjogMTBweDtcbiAgICAgICAgcGFkZGluZzogMTBweCAyMHB4O1xuICAgIH1cbjwvc3R5bGU+IiwiPHNjcmlwdD5cbiAgaW1wb3J0IFRyYW5zIGZyb20gJy4uL2NvbXBvbmVudHMvVHJhbnNIZWxwLnN2ZWx0ZSdcblxuICAgIGxldCBwYXJ0ID0gMDtcbiAgbGV0IGN1cnJlbnQgPSAnaW5pdGlhbCc7XG4gIGltcG9ydCB7IHF1aXpTdGVwcyB9IGZyb20gJy4uL3N0b3JlLmpzJ1xuPC9zY3JpcHQ+XG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5EYXRhIHByaXZhY3kgcXVpejwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48bWFpbj5cbiAgICA8VHJhbnM+XG4gICAgeyNpZiBwYXJ0ID09PSAwfVxuICAgIDxzZWN0aW9uPlxuICAgICAgICA8aDE+V2VsY29tZSB0byBNaW5kIFlvdXIgRGF0YSBDaGFsbGVuZ2U8L2gxPlxuICAgICAgICA8cD5cbiAgICAgICAgICAgIE9ubHkgZm9yIGVkdWNhdGlvbmFsIHB1cnBvc2UsIHRoaXMgdGVzdCB3aWxsIHV0aWxpemUgYmxhaCBibGFoIGJsYWguIFRoZXJlIHdpbGwgYmUgbm8gcGVyc29uYWwgZGF0YSBjb2xsZWN0ZWQgb3Igc2hhcmVkLi4uIFRoaXMgdGVzdCB3aWxsIG9ubHkgIGJsYWggYmxhaCBibGFoIGFuZCB1dGlsaXplIGJsYWggYmxhaCBibGFoLiBUaGVyZSB3aWxsIGJlIG5vIGRhdGEuLi4gVGhpcyB0ZXN0IHdpbGwgb25seSBkbyBibGFoIGJsYWggYmxhaCBhbmQgdXRpbGl6ZSBibGFoIGJsYWggYmxhaC4gVGhlcmUgd2lsbCBiZSBubyBkYXRhLi4uIFRoaXMgdGVzdCB3aWxsIG9ubHkgZG8gYmxhaCBibGFoIGJsYWggYW5kIHV0aWxpemUgYmxhaCBibGFoIGJsYWguIFRoZXJlIHdpbGwgYmUgbm8gZGF0YS4uLiA8L3A+XG4gICAgICAgIDxidXR0b24gb246Y2xpY2s9J3soKSA9PiBwYXJ0ID0gMX0nPlN0YXJ0IENoYWxsZW5nZTwvYnV0dG9uPlxuICAgIDwvc2VjdGlvbj5cbiAgICB7OmVsc2UgaWYgcGFydCA9PT0gMX1cbiAgICA8c2VjdGlvbj5cbiAgICAgICAgPHAgaWQ9XCJoZWFkbGluZVwiPlRoaXMgdGVzdCBjb250YWlucyAxMCB1bmlxdWUgcHJpdmFjeSB0ZXN0cyB0aGF0IHdpbGwgdGFrZSB5b3UgYWJvdXQgMzAgbWludXRlcyB0byBjb21wbGV0ZS4gVGhyb3VnaHQgdGhlIHRlc3QsIHdlIHdpbGwgcHJvdmlkZS4uLjwvcD5cbiAgICAgICAgPGRpdiBjbGFzczphY3RpdmU9XCJ7Y3VycmVudCA9PT0gJ3dlYmNhbSd9XCIgb246Y2xpY2s9XCJ7KCkgPT4gY3VycmVudCA9ICd3ZWJjYW0nfVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmV0XCI+XG4gICAgICAgICAgICAgICAgPHA+eyRxdWl6U3RlcHNbMF0ubmFtZX08L3A+XG4gICAgICAgICAgICAgICAgPHN2ZyB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTguODg1IDdMMTIgMTMuNzk4OUw1LjExNSA3TDMgOS4wOTMxMkwxMiAxOEwyMSA5LjA5MzEyTDE4Ljg4NSA3WlwiIGZpbGw9XCJ3aGl0ZVwiLz5cbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICB7I2lmIGN1cnJlbnQgPT09ICd3ZWJjYW0nfVxuICAgICAgICAgICAgICAgIDxwPnExIGNvbnRlbnQ8L3A+XG4gICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8aHI+XG4gICAgICAgIDxkaXYgY2xhc3M6YWN0aXZlPVwie2N1cnJlbnQgPT09ICdodHRwcyd9XCJcbiAgICAgICAgb246Y2xpY2s9XCJ7KCkgPT4gY3VycmVudCA9ICdodHRwcyd9XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJldFwiPlxuICAgICAgICAgICAgPHA+eyRxdWl6U3RlcHNbMV0ubmFtZX08L3A+XG4gICAgICAgICAgICA8c3ZnIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTE4Ljg4NSA3TDEyIDEzLjc5ODlMNS4xMTUgN0wzIDkuMDkzMTJMMTIgMThMMjEgOS4wOTMxMkwxOC44ODUgN1pcIiBmaWxsPVwid2hpdGVcIi8+XG4gICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHsjaWYgY3VycmVudCA9PT0gJ2h0dHBzJ31cbiAgICAgICAgICAgIDxwPnEyIGNvbnRlbnQ8L3A+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGhyPlxuICAgICAgICA8ZGl2IGNsYXNzOmFjdGl2ZT1cIntjdXJyZW50ID09PSAnc2VhcmNoJ31cIlxuICAgICAgICBvbjpjbGljaz1cInsoKSA9PiBjdXJyZW50ID0gJ3NlYXJjaCd9XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJldFwiPlxuICAgICAgICAgICAgPHA+eyRxdWl6U3RlcHNbM10ubmFtZX08L3A+XG4gICAgICAgICAgICA8c3ZnIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTE4Ljg4NSA3TDEyIDEzLjc5ODlMNS4xMTUgN0wzIDkuMDkzMTJMMTIgMThMMjEgOS4wOTMxMkwxOC44ODUgN1pcIiBmaWxsPVwid2hpdGVcIi8+XG4gICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHsjaWYgY3VycmVudCA9PT0gJ3NlYXJjaCd9XG4gICAgICAgICAgICA8cD5xMyBjb250ZW50PC9wPlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxocj5cbiAgICAgICAgPGRpdiBjbGFzczphY3RpdmU9XCJ7Y3VycmVudCA9PT0gJ3ByaXZhY3knfVwiXG4gICAgICAgIG9uOmNsaWNrPVwieygpID0+IGN1cnJlbnQgPSAncHJpdmFjeSd9XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJldFwiPlxuICAgICAgICAgICAgPHA+eyRxdWl6U3RlcHNbNF0ubmFtZX08L3A+XG4gICAgICAgICAgICA8c3ZnIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTE4Ljg4NSA3TDEyIDEzLjc5ODlMNS4xMTUgN0wzIDkuMDkzMTJMMTIgMThMMjEgOS4wOTMxMkwxOC44ODUgN1pcIiBmaWxsPVwid2hpdGVcIi8+XG4gICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHsjaWYgY3VycmVudCA9PT0gJ3ByaXZhY3knfVxuICAgICAgICAgICAgPHA+cTQgY29udGVudDwvcD5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aHI+XG4gICAgICAgIDxkaXYgY2xhc3M6YWN0aXZlPVwie2N1cnJlbnQgPT09ICd0cmFja2VyJ31cIlxuICAgICAgICBvbjpjbGljaz1cInsoKSA9PiBjdXJyZW50ID0gJ3RyYWNrZXInfVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZXRcIj5cbiAgICAgICAgICAgIDxwPnskcXVpelN0ZXBzWzVdLm5hbWV9PC9wPlxuICAgICAgICAgICAgPHN2ZyB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICAgICAgICAgICAgPHBhdGggZD1cIk0xOC44ODUgN0wxMiAxMy43OTg5TDUuMTE1IDdMMyA5LjA5MzEyTDEyIDE4TDIxIDkuMDkzMTJMMTguODg1IDdaXCIgZmlsbD1cIndoaXRlXCIvPlxuICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7I2lmIGN1cnJlbnQgPT09ICd0cmFja2VyJ31cbiAgICAgICAgICAgIDxwPnE1IGNvbnRlbnQ8L3A+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGhyPlxuICAgICAgICA8ZGl2IGNsYXNzOmFjdGl2ZT1cIntjdXJyZW50ID09PSAnZG5zJ31cIlxuICAgICAgICBvbjpjbGljaz1cInsoKSA9PiBjdXJyZW50ID0gJ2Rucyd9XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJldFwiPlxuICAgICAgICAgICAgPHA+eyRxdWl6U3RlcHNbNl0ubmFtZX08L3A+XG4gICAgICAgICAgICA8c3ZnIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTE4Ljg4NSA3TDEyIDEzLjc5ODlMNS4xMTUgN0wzIDkuMDkzMTJMMTIgMThMMjEgOS4wOTMxMkwxOC44ODUgN1pcIiBmaWxsPVwid2hpdGVcIi8+XG4gICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHsjaWYgY3VycmVudCA9PT0gJ2Rucyd9XG4gICAgICAgICAgICA8cD5xNiBjb250ZW50PC9wPlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxocj5cbiAgICAgICAgPGRpdiBjbGFzczphY3RpdmU9XCJ7Y3VycmVudCA9PT0gJ2xvY2F0aW9uJ31cIlxuICAgICAgICBvbjpjbGljaz1cInsoKSA9PiBjdXJyZW50ID0gJ2xvY2F0aW9uJ31cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmV0XCI+XG4gICAgICAgICAgICA8cD57JHF1aXpTdGVwc1s4XS5uYW1lfTwvcD5cbiAgICAgICAgICAgIDxzdmcgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTguODg1IDdMMTIgMTMuNzk4OUw1LjExNSA3TDMgOS4wOTMxMkwxMiAxOEwyMSA5LjA5MzEyTDE4Ljg4NSA3WlwiIGZpbGw9XCJ3aGl0ZVwiLz5cbiAgICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgeyNpZiBjdXJyZW50ID09PSAnbG9jYXRpb24nfVxuICAgICAgICAgICAgPHA+cTcgY29udGVudDwvcD5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aHI+XG4gICAgICAgIDxkaXYgY2xhc3M6YWN0aXZlPVwie2N1cnJlbnQgPT09ICdpb3QnfVwiXG4gICAgICAgIG9uOmNsaWNrPVwieygpID0+IGN1cnJlbnQgPSAnaW90J31cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmV0XCI+XG4gICAgICAgICAgICA8cD57JHF1aXpTdGVwc1s5XS5uYW1lfTwvcD5cbiAgICAgICAgICAgIDxzdmcgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTguODg1IDdMMTIgMTMuNzk4OUw1LjExNSA3TDMgOS4wOTMxMkwxMiAxOEwyMSA5LjA5MzEyTDE4Ljg4NSA3WlwiIGZpbGw9XCJ3aGl0ZVwiLz5cbiAgICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgeyNpZiBjdXJyZW50ID09PSAnaW90J31cbiAgICAgICAgICAgIDxwPnE4IGNvbnRlbnQ8L3A+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICBcbiAgICAgICAgPGJ1dHRvbiBvbjpjbGljaz0neygpID0+IHBhcnQgPSAyfSc+Q29udGludWU8L2J1dHRvbj5cbiAgICA8L3NlY3Rpb24+XG4gICAgezplbHNlfSBcbiAgICA8c2VjdGlvbiBpZD1cImNoYXB0ZXIxXCI+XG4gICAgICAgIDxoMSBpZD1cImNoYXB0ZXJcIj5DaGFwdGVyIDE6IFNlY3VyaXR5PC9oMT5cbiAgICAgICAgPHAgaWQ9XCJwZXJtaXNzaW9uXCI+VGhyb3VnaCBvdXQgdGhpcyBjaGFsbGVuZ2UsIHdlIG5lZWQgeW91ciBwZXJtaXNzaW9uIHRvIGdpdmUgdXMgb25lIHRpbWUgbm9uLXJlY3VycmluZyBhY2Nlc3MgdG8geW91ciB3ZWJjYW0gdG8gdGVzdCB5b3VyIHByYWN0aWNlLiBQbGVhc2UgY2xpY2sgYWxsb3cgZm9yIG9uZSB0aW1lIG5vbi1yZWN1cnJpbmcgYWNjZXNzIHRvIHlvdXIgd2ViY2FtZSB0byBtb3ZlIHRvIHRoZSBuZXh0IHN0ZXAgdG8gY29tcGxldGUgdGhpcyBjaGFsbGVuZ2UuPC9wPlxuICAgICAgICA8YnV0dG9uIGlkPVwic3RhcnRcIj48YSByZWw9cHJlZmV0Y2ggaHJlZj0ncXVpem1haW4nID5TdGFydCBDaGFsbGVuZ2U8L2E+PC9idXR0b24+XG4gICAgPC9zZWN0aW9uPlxuICAgIHsvaWZ9XG48L1RyYW5zPlxuICAgIDwvbWFpbj5cblxuPHN0eWxlPlxuICAgIG1haW4ge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICBmbGV4LWZsb3c6IHJvdztcbiAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDE1cHg7XG4gICAgICAgfVxuICAgICAgIHNlY3Rpb257XG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6ICMzODQyNEQ7XG4gICAgICAgICAgICAgIHdpZHRoOiA2NXZ3O1xuICAgICAgICAgICAgICBtaW4taGVpZ2h0OiA3NXZoO1xuICAgICAgICAgICAgICAvKmhlaWdodDogODZ2aDsgKi9cbiAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTVweDtcbiAgICAgICAgICAgICAgYm9yZGVyOiAwcHg7XG4gICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgICBwYWRkaW5nOiA5LjN2aCA1dncgMHZoIDkuM3ZoO1xuICAgICAgICAgICAgICBjb2xvcjogI0ZGRkZGRjtcbiAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAvKm1hcmdpbi10b3A6IC01MHB4O1xuICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMjF2dztcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA1MHB4O1xuICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OyovXG4gICAgICAgfVxuICAgICAgICNjaGFwdGVyMSB7XG4gICAgICAgICAgIHdpZHRoOiA4NXZ3O1xuICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4uL2JnLXZlY3Rvci5wbmcnKTtcbiAgICAgICAgICAgXG4gICAgICAgICAgIGJhY2tncm91bmQtYmxlbmQtbW9kZTogZGFya2VuO1xuICAgICAgIH1cbiAgICAgICBwe1xuICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgIH1cbiAgICAgICAjaGVhZGxpbmUge1xuICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyNXB4O1xuICAgICAgIH1cbiAgICAgICAjY2hhcHRlciB7XG4gICAgICAgICAgIGNvbG9yOiAjNzNlZjdiO1xuICAgICAgIH1cbiAgICAgICBidXR0b257XG4gICAgICAgIHBhZGRpbmc6IDEwcHggMjBweDtcblx0XHRtYXJnaW46IDEwcHg7XG5cdFx0Ym9yZGVyOiBibGFjayBzb2xpZCAwcHg7XG5cdFx0Ym9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgI3N0YXJ0IHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM3M2VmN2I7XG4gICAgICAgIH1cbiAgICAgICAgYXtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgICAgICAgIH1cbiAgICAgICAuYWN0aXZlIHtcbiAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcGluaztcbiAgICAgICB9XG4gICAgICAgI3Blcm1pc3Npb24ge1xuICAgICAgICB3aWR0aDogNzAlO1xuICAgICAgICBtYXJnaW46IGF1dG87XG4gICAgICAgfVxuICAgICAgIC5jYXJldHtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGZsZXgtZmxvdzogcm93IG5vd3JhcDtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcblx0fVxuPC9zdHlsZT4iLCI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cblx0ZXhwb3J0IGZ1bmN0aW9uIHByZWxvYWQoeyBwYXJhbXMsIHF1ZXJ5IH0pIHtcblx0XHRyZXR1cm4gdGhpcy5mZXRjaChgYmxvZy5qc29uYCkudGhlbihyID0+IHIuanNvbigpKS50aGVuKHBvc3RzID0+IHtcblx0XHRcdHJldHVybiB7IHBvc3RzIH07XG5cdFx0fSk7XG5cdH1cbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuXHRleHBvcnQgbGV0IHBvc3RzO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cblx0dWwge1xuXHRcdG1hcmdpbjogMCAwIDFlbSAwO1xuXHRcdGxpbmUtaGVpZ2h0OiAxLjU7XG5cdH1cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPkJsb2c8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGgxPlJlY2VudCBwb3N0czwvaDE+XG5cbjx1bD5cblx0eyNlYWNoIHBvc3RzIGFzIHBvc3R9XG5cdFx0PCEtLSB3ZSdyZSB1c2luZyB0aGUgbm9uLXN0YW5kYXJkIGByZWw9cHJlZmV0Y2hgIGF0dHJpYnV0ZSB0b1xuXHRcdFx0XHR0ZWxsIFNhcHBlciB0byBsb2FkIHRoZSBkYXRhIGZvciB0aGUgcGFnZSBhcyBzb29uIGFzXG5cdFx0XHRcdHRoZSB1c2VyIGhvdmVycyBvdmVyIHRoZSBsaW5rIG9yIHRhcHMgaXQsIGluc3RlYWQgb2Zcblx0XHRcdFx0d2FpdGluZyBmb3IgdGhlICdjbGljaycgZXZlbnQgLS0+XG5cdFx0PGxpPjxhIHJlbD0ncHJlZmV0Y2gnIGhyZWY9J2Jsb2cve3Bvc3Quc2x1Z30nPntwb3N0LnRpdGxlfTwvYT48L2xpPlxuXHR7L2VhY2h9XG48L3VsPiIsIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuXHRleHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlbG9hZCh7IHBhcmFtcywgcXVlcnkgfSkge1xuXHRcdC8vIHRoZSBgc2x1Z2AgcGFyYW1ldGVyIGlzIGF2YWlsYWJsZSBiZWNhdXNlXG5cdFx0Ly8gdGhpcyBmaWxlIGlzIGNhbGxlZCBbc2x1Z10uc3ZlbHRlXG5cdFx0Y29uc3QgcmVzID0gYXdhaXQgdGhpcy5mZXRjaChgYmxvZy8ke3BhcmFtcy5zbHVnfS5qc29uYCk7XG5cdFx0Y29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cblx0XHRpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG5cdFx0XHRyZXR1cm4geyBwb3N0OiBkYXRhIH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZXJyb3IocmVzLnN0YXR1cywgZGF0YS5tZXNzYWdlKTtcblx0XHR9XG5cdH1cbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuXHRleHBvcnQgbGV0IHBvc3Q7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXHQvKlxuXHRcdEJ5IGRlZmF1bHQsIENTUyBpcyBsb2NhbGx5IHNjb3BlZCB0byB0aGUgY29tcG9uZW50LFxuXHRcdGFuZCBhbnkgdW51c2VkIHN0eWxlcyBhcmUgZGVhZC1jb2RlLWVsaW1pbmF0ZWQuXG5cdFx0SW4gdGhpcyBwYWdlLCBTdmVsdGUgY2FuJ3Qga25vdyB3aGljaCBlbGVtZW50cyBhcmVcblx0XHRnb2luZyB0byBhcHBlYXIgaW5zaWRlIHRoZSB7e3twb3N0Lmh0bWx9fX0gYmxvY2ssXG5cdFx0c28gd2UgaGF2ZSB0byB1c2UgdGhlIDpnbG9iYWwoLi4uKSBtb2RpZmllciB0byB0YXJnZXRcblx0XHRhbGwgZWxlbWVudHMgaW5zaWRlIC5jb250ZW50XG5cdCovXG5cdC5jb250ZW50IDpnbG9iYWwoaDIpIHtcblx0XHRmb250LXNpemU6IDEuNGVtO1xuXHRcdGZvbnQtd2VpZ2h0OiA1MDA7XG5cdH1cblxuXHQuY29udGVudCA6Z2xvYmFsKHByZSkge1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICNmOWY5Zjk7XG5cdFx0Ym94LXNoYWRvdzogaW5zZXQgMXB4IDFweCA1cHggcmdiYSgwLDAsMCwwLjA1KTtcblx0XHRwYWRkaW5nOiAwLjVlbTtcblx0XHRib3JkZXItcmFkaXVzOiAycHg7XG5cdFx0b3ZlcmZsb3cteDogYXV0bztcblx0fVxuXG5cdC5jb250ZW50IDpnbG9iYWwocHJlKSA6Z2xvYmFsKGNvZGUpIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5cblx0LmNvbnRlbnQgOmdsb2JhbCh1bCkge1xuXHRcdGxpbmUtaGVpZ2h0OiAxLjU7XG5cdH1cblxuXHQuY29udGVudCA6Z2xvYmFsKGxpKSB7XG5cdFx0bWFyZ2luOiAwIDAgMC41ZW0gMDtcblx0fVxuPC9zdHlsZT5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+e3Bvc3QudGl0bGV9PC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxoMT57cG9zdC50aXRsZX08L2gxPlxuXG48ZGl2IGNsYXNzPSdjb250ZW50Jz5cblx0e0BodG1sIHBvc3QuaHRtbH1cbjwvZGl2PlxuIiwiPHNjcmlwdD5cbmltcG9ydCB7IG9uTW91bnQsIGFmdGVyVXBkYXRlIH0gZnJvbSAnc3ZlbHRlJztcbmltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJ3N2ZWx0ZSc7XG5pbXBvcnQgQ29tcGxldGlvbiBmcm9tICcuLi8uLi9jb21wb25lbnRzL0NvbXBsZXRpb24uc3ZlbHRlJ1xuXG5jb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG5mdW5jdGlvbiBjb21wbGV0ZSgpIHtcblx0ZGlzcGF0Y2goJ21lc3NhZ2UnLCB7XG5cdFx0cXVlc3Rpb246IDAsXG5cdFx0Y29tcGxldGU6ICd0cnVlJ1xuXHR9KTtcbn1cblx0bGV0IHExU3RlcHMgPSBbXG5cdHsgc3RlcE51bTogJzEnLCBcblx0aDI6ICdJcyB5b3VyIFdlYmNhbSBDb3ZlcmVkPycsIFxuXHRuYW1lOiAnSW50cm9kdWN0aW9uJywgXG5cdGNsYXNzbjogJ2NvbXBsZXRlJyxcblx0ZDogJzEgLyAzJyxcblx0Y29weTogJ0l04oCZcyBsaWtlbHkgeW91ciBjb21wdXRlciBhbHJlYWR5IGhhcyBhIGJ1aWx0LWluIGNhbWVyYSwgYW5kIGl04oCZcyBwb3NzaWJsZSBmb3IgdGhhdCBjYW1lcmEgdG8gYmUgdXNlZCB0byBzcHkgb24geW91LiAgPGJyPiAgSWYgeW91ciB3ZWJjYW0gZm9yIHdoYXRldmVyIHJlYXNvbiBoYXMgYmVlbiBoYWNrZWQsIHRoZSBwZXJzb24gb24gdGhlIG90aGVyIHNpZGUgY2FuIHRha2UgcGljdHVyZXMgYW5kIHZpZGVvIG9mIGFueXRoaW5nIG9yIGFueW9uZS4gTm8sIHRoaXMgaXNu4oCZdCBqdXN0IHBhcmFub2lh4oCTYSByZWNlbnQgc3VydmV5IGNvbmR1Y3RlZCBieSBIUCBmb3VuZCB0aGF0IDEwJSBpbiB0aGUgVS5TLiBlaXRoZXIga25vdyBzb21lb25lIHdob3NlIHdlYmNhbSB3YXMgaGFja2VkIG9yIGhhdmUgaGFkIHRoZWlyIG93biB3ZWJjYW0gaGFja2VkLid9LFxuXHR7IHN0ZXBOdW06ICcyJywgXG5cdGgyOiAnQUNUSU9OOiBDb3ZlciBZb3VyIFdlYmNhbScsIFxuXHRuYW1lOiAnUGVybWlzc2lvbnMnLCBcblx0Y2xhc3NuOiAnaW5jb21wbGV0ZScsXG5cdGQ6ICcyIC8gMycsXG5cdGNvcHk6ICdQbGVhc2UgaGF2ZSB5b3VyIHdlYmNhbSBjb3ZlcmVkIGFuZCBwcm9jZWVkIHRvIG5leHQgc3RlcC4gV2Ugd2lsbCBhY2Nlc3MgdG8geW91ciB3ZWJjYW0gdG8gbWFrZSBzdXJlIHlvdSBjb3ZlcmVkIHRoZSB3ZWJjYW0gcHJvcGVybHkuIENsaWNrIOKAnFRlc3TigJ0gYnV0dG9uIHRvIHByb2NlZWQgY2hhbGxlbmdlLid9LFxuXHR7IHN0ZXBOdW06ICczJywgXG5cdGgyOiAnR3JlYXQhIEl04oCZcyBwcm9wZXJseSBjb3ZlcmVkLicsIFxuXHRuYW1lOiAnQ292ZXIgeW91ciB3ZWJjYW0nLCBcblx0Y2xhc3NuOiAnaW5jb21wbGV0ZScsXG5cdGQ6ICczIC8gMycsXG5cdGNvcHk6ICdQbGVhc2UgcmVtZW1iZXIgdG8gbGVhdmUgeW91ciB3ZWJjYW0gY292ZXJlZCB3aGlsZSBpdHMgbm90IGJlaW5nIHVzZWQuIFRoaXMgY2FuIHByZXZlbnQuLi4nfSxcblx0e3N0ZXBOdW06ICcnLFxuXHRoMjogJycsXG5cdG5hbWU6ICcnLFxuXHRjbGFzc246ICcnLFxuXHRkOiAnJyxcblx0Y29weTogJyd9XG4gICAgXVxuXHRcblx0JDogcSA9IDA7XG5cdGxldCBpc0FjdGl2ZTtcblx0ZnVuY3Rpb24gc3RlcFVwKCkge1xuXHRcdHErKztcblx0XHRxMVN0ZXBzW3FdLmNsYXNzbiA9ICdjb21wbGV0ZSc7XG5cdFx0aWYgKHEgPT0gMiApe1xuXHRcdFx0aXNBY3RpdmUgPSB0cnVlO1xuXHRcdH1cblx0XHRpZiAocSA+IDIpIHtcblx0XHRcdGNvbXBsZXRlKCk7XG5cdFx0fVxuXHR9XG5cdCQ6IGhlYWRsaW5lID0gcTFTdGVwc1txXS5oMjtcblx0JDogYm9keSA9IHExU3RlcHNbcV0uY29weTtcblx0JDogZnJhY3Rpb24gPSBxMVN0ZXBzW3FdLmQ7XG5cdGxldCB2aWRlb1xuXHRhZnRlclVwZGF0ZSgoKSA9PiB7XG5cdHZpZGVvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN2aWRlb0VsZW1lbnRcIik7XG5cdFxuXHRpZiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpIHtcbiAgXHRuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7IHZpZGVvOiB0cnVlIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHN0cmVhbSkge1xuXHRcdFx0dmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtO1xuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIwcikge1xuICAgICAgY29uc29sZS5sb2coXCJOb3QgbG9hZGVkXCIpO1xuICAgIH0pO1xuXHRcdH1cbn0pXG5cbjwvc2NyaXB0PlxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+V2ViY2FtIENoYWxsZW5nZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPCEtLSBDb21wbGV0aW9uIGNsYXNzPSdzdGVwJy8gLS0+XG48IS0tXG5cdDxoMz5XZWJjYW0gQ2hhbGxlbmdlIHtmcmFjdGlvbn08L2gzPlxuXHQ8dWw+XG5cdFx0eyNlYWNoIHExU3RlcHMgYXMgc3RlcH1cblx0XHRcdDxsaSBjbGFzcz17c3RlcC5jbGFzc259ID57c3RlcC5uYW1lfTwvbGk+XG5cdFx0ey9lYWNofVxuXHQ8L3VsPlxuPC9Qcm9ncmVzcz4gLS0+XG48c2VjdGlvbiBpZD1cInByb2dyZXNzXCI+XG5cdDxoMz5XZWJjYW0gQ2hhbGxlbmdlIHtmcmFjdGlvbn08L2gzPlxuXHQ8dWw+XG5cdFx0eyNlYWNoIHExU3RlcHMgYXMgc3RlcH1cblx0XHRcdDxsaSBjbGFzcz17c3RlcC5jbGFzc259ID57c3RlcC5uYW1lfTwvbGk+XG5cdFx0ey9lYWNofVxuXHQ8L3VsPlxuPC9zZWN0aW9uPlxuPGRpdiBjbGFzcz0ncXVpei1ob2xkZXInPlxuXHQ8aDE+e2hlYWRsaW5lfTwvaDE+XG5cdDxwPntib2R5fTwvcD4gXG5cdDxzZWN0aW9uIGlkPSduZXh0LXNraXAnPiBcbiAgICAgICAgPGJ1dHRvbiBvbjpjbGljaz17c3RlcFVwfSBjbGFzcz0nYnRuLWRhcmsnPk5leHQ8L2J1dHRvbj5cbiAgICA8L3NlY3Rpb24+XG5cdHsjaWYgaXNBY3RpdmV9XG5cdFx0PHZpZGVvIGF1dG9wbGF5PVwidHJ1ZVwiIGlkPVwidmlkZW9FbGVtZW50XCI+PC92aWRlbz5cblx0ey9pZn1cbjwvZGl2PlxuXHRcblx0XG48c3R5bGU+XG5cdG1haW57XG5cdFx0ZmxleC1mbG93OiByb3cgd3JhcDtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG5cdH1cbiAgIC5xdWl6LWhvbGRlciB7XG5cdCAgIGRpc3BsYXk6IGJsb2NrO1xuXHQgICB3aWR0aDogNjV2dzsgLyogNzIuNSBvcmlnaW5hbHkgKi9cblx0ICAgbGVmdDogMjB2dztcblx0ICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICBwYWRkaW5nOiAyMHB4IDUwcHg7XG4gICB9XG4gICAuc3RlcHtcblx0XHRtYXJnaW4tYm90dG9tOiA1NXB4O1xuICAgfVxuICAgI3Byb2dyZXNzIHtcblx0ICAgbWFyZ2luLXRvcDogNTBweDtcbiAgIH1cbiAgIHVsIHtcblx0ICAgcGFkZGluZy1pbmxpbmUtc3RhcnQ6IDE1cHg7XG4gICB9XG4gICBsaSB7XG5cdCAgIG1hcmdpbjogMzBweCAwcHg7XG4gICB9XG4gICAuaW5jb21wbGV0ZSB7XG4gICAgICAgIGNvbG9yOiAjYTBhMGEwO1xuXHRcdGxpc3Qtc3R5bGUtdHlwZTogY2lyY2xlO1xuXHR9XG5cdC5jb21wbGV0ZSB7XG5cdFx0bGlzdC1zdHlsZS10eXBlOiBkaXNjO1xuXHR9XG5cdC5TaWRlLWhlYWRsaW5lIHtcblx0XHRmb250LXNpemU6IDI0cHg7XG5cdFx0Zm9udC13ZWlnaHQ6IDcwMDtcblx0fVxuXHQjdmlkZW9FbGVtZW50IHtcblx0XHRcblx0fVxuXHQuYnRuLWRhcmsge1xuICAgICAgICBjb2xvcjp3aGl0ZTtcbiAgICAgICAgYmFja2dyb3VuZDogIzBGMjAzMztcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgICB3aWR0aDogMzAlO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgIH1cbiAgICBidXR0b24ge1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgIH1cbjwvc3R5bGU+XG5cbiIsIjxzY3JpcHQ+XG5sZXQgY29tcGxldGVkO1xuXG48L3NjcmlwdD5cbjxzdHlsZT5cbiAgICBhc2lkZSB7XG4gICAgICAgLyogcG9zaXRpb246IGZpeGVkOyAqL1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgdG9wOjUwcHg7XG4gICAgICAgIGxlZnQ6MDtcbiAgICAgICAgd2lkdGg6IDI3Ljc3dnc7XG4gICAgICAgIGhlaWdodDogMTAwdmg7XG4gICAgICAgIC8qYmFja2dyb3VuZC1jb2xvcjogI2U0ZTRlNDtcbiAgICAgICAgYm9yZGVyOiAycHggc29saWQgI2M3YzdjNzsqL1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDUwcHg7XG4gICAgfVxuICAgIHNlY3Rpb24ge1xuICAgICAgICBwYWRkaW5nOiAxMHB4IDEwcHggMjBweCAxMHB4O1xuICAgIH1cbiAgICAjdGltZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyBcbiAgICAgICAgLypib3JkZXItYm90dG9tOiAxcHggc29saWQgI2M3YzdjNzsqL1xuICAgIH1cbiAgICAjcmVtYWluaW5nIHtcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgICBwYWRkaW5nOiA1cHggMHB4IDIwcHggMHB4O1xuICAgICAgICBcblxuICAgIH1cbiAgICAjbWludXRlcyB7XG4gICAgICAgIGNvbG9yOndoaXRlO1xuICAgICAgICBiYWNrZ3JvdW5kOiAjMEYyMDMzO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgIHdpZHRoOiA5Ljd2dztcbiAgICAgICAgaGVpZ2h0OiA2Ljd2aDtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBmb250LXNpemU6IDMwcHg7XG4gICAgICAgIFxuXG4gICAgfVxuICAgIC5idG4tZGFyayB7XG4gICAgICAgIGNvbG9yOndoaXRlO1xuICAgICAgICBiYWNrZ3JvdW5kOiAjMEYyMDMzO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgIHdpZHRoOiAzMCU7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgfVxuICAgIGJ1dHRvbiB7XG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgfVxuICAgICNuZXh0LXNraXAge1xuICAgICAgICBtYXJnaW46IDVweCAxMHB4O1xuICAgICAgICBwYWRkaW5nOiA1cHggMHB4IDIwcHggMHB4O1xuICAgIH1cbiAgICBcbjwvc3R5bGU+XG48YXNpZGUgaWQ9J3NpZGViYXInPlxuICAgIDxzZWN0aW9uIGlkPVwicHJvZ3Jlc3NcIj5cbiAgICAgICAgPHNsb3Q+XG5cbiAgICAgICAgPC9zbG90PlxuICAgIDwvc2VjdGlvbj5cbiAgICA8IS0tXG4gICAgPHNlY3Rpb24gaWQ9J25leHQtc2tpcCc+IFxuICAgICAgICA8YnV0dG9uIG9uOmNsaWNrPXtzYXlIZWxsb30gY2xhc3M9J2J0bi1kYXJrJz5OZXh0PC9idXR0b24+XG4gICAgICAgIDxidXR0b24gIGNsYXNzPSdidG4tZGFyayc+U2tpcDwvYnV0dG9uPlxuICAgIDwvc2VjdGlvbj4gLS0+XG48L2FzaWRlPiIsIjxzY3JpcHQ+XG5cdGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cdGltcG9ydCB7IG9uTW91bnQsIGFmdGVyVXBkYXRlLCBjcmVhdGVFdmVudERpc3BhdGNoZXIsIG9uRGVzdHJveSB9IGZyb20gJ3N2ZWx0ZSc7XG5cdGltcG9ydCBEZXRlY3QgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9EZXRlY3Quc3ZlbHRlJ1xuICAgIGltcG9ydCBUcmFucyBmcm9tICcuLi8uLi9jb21wb25lbnRzL1RyYW5zSGVscC5zdmVsdGUnO1xuXHQgLy9zZXRzIGFzaWRlIGljb24gdG8gaW4gcHJvZ3Jlc3MgdmlhIHN0b3JlXG5cdCBpbXBvcnQgeyBxdWl6U3RlcHMgfSBmcm9tICcuLi8uLi9zdG9yZS5qcydcblx0IGltcG9ydCB7IGNvdW50LCB0aW1lckFjdGl2ZSB9IGZyb20gJy4uLy4uL3N0b3JlLmpzJ1xuXHQgaW1wb3J0IENvbXBsZXRlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY29tcGxldGUuc3ZlbHRlJ1xuXHQgaW1wb3J0IEJhY2sgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CYWNrLnN2ZWx0ZSdcblxuICAgIG9uTW91bnQoYXN5bmMoKSA9PiB7XG5cdFx0JHF1aXpTdGVwc1skY291bnRdLnN0YXR1cyA9IDE7XG5cdFx0dGltZXJBY3RpdmUuc2V0KCEkdGltZXJBY3RpdmUpXG5cdFx0fSk7XG5cdG9uRGVzdHJveSgoKSA9PiB0aW1lckFjdGl2ZS5zZXQoISR0aW1lckFjdGl2ZSkpXG48L3NjcmlwdD5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPlNlY3VyaXR5IHZzIFByaXZhY3k6IFdoYXTigJlzIGF0IHN0YWtlPzwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPFRyYW5zPlx0XG5cdDxzZWN0aW9uPlxuXHQ8aDM+Q2hlY2twb2ludDE8L2gzPlxuICAgICAgICA8aDE+U2VjdXJpdHkgdnMgUHJpdmFjeTogV2hhdOKAmXMgYXQgc3Rha2U/PC9oMT5cblx0XHQ8cD48c3Ryb25nPkNvbmdyYXR1bGF0aW9ucyE8L3N0cm9uZz4gQnkgY29tcGxldGluZyB0aGVzZSB0YXNrcywgeW91IGhhdmUganVzdCB0YWtlbiBhIGZldyBzdGVwcyB0b3dhcmQgc2VjdXJpbmcgeW91ciBwZXJzb25hbCBpbmZvcm1hdGlvbiBmcm9tIHBvdGVudGlhbCBjeWJlcmNyaW1lLiBCdXQgdGhlIHRydXRoIGlzLCB5b3VyIGRhdGEg4oCUIGRpZmZlcmVudCBkZXRhaWxzIGFib3V0IHlvdSDigJQgbGl2ZXMgaW4gYSBsb3Qgb2YgcGxhY2VzIGluIG91ciBpbmNyZWFzaW5nbHkgY29ubmVjdGVkIHdvcmxkLiA8L3A+XG5cdFx0PHA+U29tZSBwZW9wbGUgdGhpbmsgb2YgcHJpdmFjeSBhbmQgc2VjdXJpdHkgYXMgcHJldHR5IG11Y2ggdGhlIHNhbWUgdGhpbmcuICBXaGlsZSB0aGUgdHdvIHNvbWV0aW1lcyBvdmVybGFwLCB0aGV5IGFyZW7igJl0IHRoZSBzYW1lLCBhbmQga25vd2luZyBob3cgdGhleSBkaWZmZXIgd2lsbCBoZWxwIGdpdmUgeW91IGNvbnRyb2wgb3ZlciB5b3VyIHBlcnNvbmFsIGluZm9ybWF0aW9uIGFuZCBob3cgaXTigJlzIHVzZWQuPC9wPlxuXHRcdDxwPjxzdHJvbmc+V2hhdOKAmXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBwcml2YWN5IGFuZCBzZWN1cml0eT88L3N0cm9uZz48L3A+XG5cdFx0PHA+U2VjdXJpdHkgcmVmZXJzIHRvIGhvdyB5b3VyIHBlcnNvbmFsIGluZm9ybWF0aW9uIGlzIHByb3RlY3RlZC4gPC9wPlxuXHRcdDxwPlByaXZhY3ksIG9uIHRoZSBvdGhlciBoYW5kLCByZWxhdGVzIHlvdXIgcmlnaHRzIHRvIGNvbnRyb2wgdGhlIGRhdGEgdGhhdOKAmXMgYmVpbmcgY29sbGVjdGVkIGFib3V0IHlvdSwgaG93IGl04oCZcyBjb2xsZWN0ZWQsIHdoeSwgYW5kIHdobyBpdOKAmXMgc2hhcmVkIHdpdGguPC9wPlxuXHRcdCBcblx0XHQ8cD48c3Ryb25nPldoeSBkb2VzIHByaXZhY3kgbWF0dGVyPzwvc3Ryb25nPjwvcD5cblx0XHQ8cD5UaGUgY29udmVuaWVuY2Ugb2YgbGl2aW5nIGluIGEgY29uc3RhbnRseSBjb25uZWN0ZWQgd29ybGQgY29tZXMgYXQgYSBjb3N0LiBPdXIgZGFpbHkgaW50ZXJhY3Rpb25zIHdpdGggdGVjaG5vbG9neSBnZW5lcmF0ZXMgYW4gdW5pbWFnaW5hYmxlIGFtb3VudCBvZiBkYXRhIHRoYXQgaXMgYmVpbmcgaGFydmVzdGVkIGFuZCBzb2xkIHRvIHRob3NlIHdobyB3YW50IHRvIHByZWRpY3QgYW5kIHNoYXBlIG91ciBiZWhhdmlvci4gPC9wPlxuXHRcdFxuXHRcdFxuXHRcdDxwPllvdSBtaWdodCB0aGluayBpdOKAmXMgbm8gYmlnIGRlYWwgdG8gZ2l2ZSB1cCB5b3VyIGRhdGEgaW4gZXhjaGFuZ2UgZm9yIHBlcnNvbmFsaXplZCBhZHMgYW5kIGNvbnRlbnQsIGJ1dCBjb25zdW1wdGlvbiAtLSBicm93c2luZyB0aHJvdWdoIGEgc3RvcmUgYW5kIGJ1eWluZyB0aGluZ3MgLS0gYW5kIHF1aWV0IHRpbWUgYWxvbmUgYXJlIGJvdGggaW1wb3J0YW50IHBhcnRzIG9mIGhvdyB3ZSBkZWZpbmUgb3Vyc2VsdmVzLiBJZiB3ZSBibGluZGx5IGFncmVlIHRvIGxpdmUgaW4gYSBzdGF0ZSBvZiBjb25zdGFudCBzdXJ2ZWlsbGFuY2UsIHdlIGxvc2UgdGhlIGFiaWxpdHkgdG8gY2hvb3NlIGZvciBvdXJzZWx2ZXMgYW5kIGFsbG93IG90aGVycyB0byBpbmZsdWVuY2Ugb3VyIGJlaGF2aW9ycyBhbmQgc2VsZi1wZXJjZXB0aW9uLjwvcD5cblx0XHRcblx0XHQ8cD5Ob3cgaW1hZ2luZSBpZiBvdXIgc29jaWV0eSBhY2NlcHRzIHN1cnZlaWxsYW5jZSBhcyB0aGUgbmV3IG5vcm1hbCBhbmQgY2l0aXplbnMga25vdyB0aGV5IGFyZSBiZWluZyB3YXRjaGVkIGNvbnN0YW50bHkuIFdlIG1heSBoYXZlIGhpZ2hseSBwZXJzb25hbGl6ZWQgYWNjZXNzIHRvIGdvb2RzIGFuZCBzZXJ2aWNlcywgYnV0IHdlIHdpbGwgYmUgbGVzcyBsaWtlbHkgdG8gc3BlYWsgZnJlZWx5IGFuZCBhY3QgaW5kaXZpZHVhbGx5LiBXaXRob3V0IHByaXZhY3kgYXMgYSBmdW5kYW1lbnRhbCByaWdodCwgd2UgbG9zZSBwb3dlciBhbmQgYmVjb21lIGFuIG9iZWRpZW50IGFuZCBzdWJtaXNzaXZlIHNvY2lldHkuPC9wPlxuXHRcdFxuPGRpdiBjbGFzcz1cImJ1dHRvbi1ob2xkZXJcIj5cbiAgICA8Q29tcGxldGU+Q29udGludWUgdG8gbmV4dCBDaGFsbGVuZ2U8L0NvbXBsZXRlPlxuPC9kaXY+XG48L3NlY3Rpb24+XG48QmFjay8+XG48L1RyYW5zPlxuXG48c3R5bGU+XG4gICAuYnV0dG9uLWhvbGRlciB7XG5cdHdpZHRoOiAyN3Z3O1xuXHRkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgIH1cbiAgIGJ1dHRvbiB7XG5cdCAgIHBhZGRpbmc6IDEwcHggMjBweDtcblx0ICAgbWFyZ2luOiAxMHB4O1xuXHQgICBib3JkZXI6IGJsYWNrIHNvbGlkIDBweDtcblx0ICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgfVxuICAgc3Ryb25nIHtcblx0ICAgZm9udC13ZWlnaHQ6IDcwMDtcblx0ICAgZm9udC1zaXplOiAyMnB4O1xuICAgfVxuICAgc2VjdGlvbiB7XG5cdCAgIHdpZHRoOiA1MCU7XG5cdCAgIG1hcmdpbjogYXV0bztcbiAgIH1cbjwvc3R5bGU+IiwiPHNjcmlwdD5cblx0aW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblx0aW1wb3J0IHsgb25Nb3VudCwgYWZ0ZXJVcGRhdGUsIG9uRGVzdHJveSB9IGZyb20gJ3N2ZWx0ZSc7XG5cdGltcG9ydCBEZXRlY3QgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9EZXRlY3Quc3ZlbHRlJ1xuXHRpbXBvcnQgVHJhbnMgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9UcmFuc0hlbHAuc3ZlbHRlJztcblx0aW1wb3J0IENvbXBsZXRlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY29tcGxldGUuc3ZlbHRlJ1xuXHRpbXBvcnQgQmFjayBmcm9tICcuLi8uLi9jb21wb25lbnRzL0JhY2suc3ZlbHRlJ1xuXG5cdCAvL3NldHMgYXNpZGUgaWNvbiB0byBpbiBwcm9ncmVzcyB2aWEgc3RvcmVcblx0IGltcG9ydCB7IHF1aXpTdGVwcywgY291bnQsIHRpbWVyQWN0aXZlIH0gZnJvbSAnLi4vLi4vc3RvcmUuanMnXG5cblx0b25Nb3VudChhc3luYygpID0+IHskcXVpelN0ZXBzWyRjb3VudF0uc3RhdHVzID0gMTtcblx0XHR0aW1lckFjdGl2ZS5zZXQoISR0aW1lckFjdGl2ZSl9KTtcblx0b25EZXN0cm95KCgpID0+IHRpbWVyQWN0aXZlLnNldCghJHRpbWVyQWN0aXZlKSlcblxuPC9zY3JpcHQ+XG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5TdXJ2ZWlsbGFuY2UgQ2FwaXRhbGlzbSBIb3cgZGlkIHRoaXMgaGFwcGVuPzwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPFRyYW5zPlxuICAgIDxoMz5DaGVja3BvaW50IDI6PC9oMz5cbiAgICAgICAgPGgxPlN1cnZlaWxsYW5jZSBDYXBpdGFsaXNtIEhvdyBkaWQgdGhpcyBoYXBwZW4/PC9oMT5cblx0XHQ8cD48c3Ryb25nPkdyZWF0ITwvc3Ryb25nPllvdSBhcmUgbm93IG9uIHlvdXIgd2F5IHRvIGNsYWltaW5nIHlvdXIgcHJpdmFjeS48L3A+XG5cdFx0PHA+Qnkgbm93IHdlIGhvcGUgeW91IHNlZSBob3cgb3VyIHByaXZhdGUgZXhwZXJpZW5jZXMgYXJlIGJlaW5nIGhhcnZlc3RlZCB0byBiZSB0cmFuc2xhdGVkIGludG8gYmVoYXZpb3JhbCBkYXRhLiBUaGlzIGRhdGEgaXMgdGhlbiBwcm9jZXNzZWQgYW5kIHBhY2thZ2VkIGFzIHByZWRpY3Rpb24gcHJvZHVjdHMgYW5kIHNvbGQgdG8gYnVzaW5lc3MgY3VzdG9tZXJzIHdpdGggYSBjb21tZXJjaWFsIGludGVyZXN0IGluIGtub3dpbmcgd2hhdCB3ZSB3aWxsIGRvIG5vdywgc29vbiwgYW5kIGxhdGVyLiBUaGlzIGlzIHN1cnZlaWxsYW5jZSBjYXBpdGFsaXNtLjwvcD5cblx0XHQ8cD48c3Ryb25nPkhvdyBkaWQgdGhpcyBoYXBwZW4/PC9zdHJvbmc+PC9wPlxuXHRcdDxwPkl0IHdhc27igJl0IHRoYXQgbG9uZyBhZ28gdGhhdCB0aGUgaW50ZXJuZXQgZW50ZXJlZCBvdXIgZGFpbHkgbGl2ZXMuIFdlIHdlbnQgb25saW5lIGV4cGVjdGluZyBlbXBvd2VybWVudCwgdGhlIGRlbW9jcmF0aXphdGlvbiBvZiBrbm93bGVkZ2UsIGFuZCBoZWxwIHdpdGggcmVhbCBwcm9ibGVtcywgYnV0IHN1cnZlaWxsYW5jZSBjYXBpdGFsaXNtIHJlYWxseSB3YXMganVzdCB0b28gbHVjcmF0aXZlIHRvIHJlc2lzdC4gR29vZ2xlIHdhcyB0aGUgZmlyc3QgdG8gbGVhcm4gaG93IHRvIGNhcHR1cmUgc3VycGx1cyBiZWhhdmlvcmFsIGRhdGEgYW5kIHVzZSBpdCB0byBjb21wdXRlIHByZWRpY3Rpb24gcHJvZHVjdHMgdGhhdCB0aGV5IGNvdWxkIHNlbGwgdG8gYWR2ZXJ0aXNlcnMuXG5cdFx0PC9wPlxuXHRcdDxwPlRoaXMgZWNvbm9taWMgbG9naWMgaGFzIG5vdyBzcHJlYWQgYmV5b25kIHRoZSB0ZWNoIGNvbXBhbmllcyB0byBuZXcgc3VydmVpbGxhbmNl4oCTYmFzZWQgZWNvc3lzdGVtcyBpbiB2aXJ0dWFsbHkgZXZlcnkgc2VjdG9yLCBmcm9tIGluc3VyYW5jZSB0byBhdXRvbW9iaWxlcyB0byBoZWFsdGgsIGVkdWNhdGlvbiwgZmluYW5jZSwgdG8gZXZlcnkgcHJvZHVjdCBkZXNjcmliZWQgYXMg4oCcc21hcnTigJ0gYW5kIGV2ZXJ5IHNlcnZpY2UgZGVzY3JpYmVkIGFzIOKAnHBlcnNvbmFsaXplZC7igJ0gQnkgbm93IGl04oCZcyB2ZXJ5IGRpZmZpY3VsdCB0byBwYXJ0aWNpcGF0ZSBpbiBzb2NpZXR5IHdpdGhvdXQgaW50ZXJmYWNpbmcgd2l0aCB0aGVzZSBzYW1lIGNoYW5uZWxzIHRoYXQgYXJlIHN1cHBseSBjaGFpbnMgZm9yIHN1cnZlaWxsYW5jZSBjYXBpdGFsaXNt4oCZcyBkYXRhIGZsb3dzLjwvcD5cbiAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLWhvbGRlclwiPlxuXHRcdDxDb21wbGV0ZT5TdGFydCB0aGUgbmV4dCBDaGFsbGVuZ2U8L0NvbXBsZXRlPlxuXHQ8L2Rpdj5cblx0PEJhY2svPlxuPC9UcmFucz5cblxuPHN0eWxlPlxuICAgLmJ1dHRvbi1ob2xkZXIge1xuXHR3aWR0aDogMjd2dztcblx0ZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XG4gICB9XG4gICBzdHJvbmcge1xuXHQgICBmb250LXdlaWdodDogNzAwO1xuXHQgICBmb250LXNpemU6IDIycHg7XG4gICB9XG48L3N0eWxlPiIsIjxzY3JpcHQ+XG5cdGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJ3N2ZWx0ZSc7XG5cdGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cdGltcG9ydCB7IG9uTW91bnQsIGFmdGVyVXBkYXRlLCBvbkRlc3Ryb3kgfSBmcm9tICdzdmVsdGUnO1xuXHRpbXBvcnQgRGV0ZWN0IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvRGV0ZWN0LnN2ZWx0ZSdcblx0aW1wb3J0IENvbXBsZXRlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY29tcGxldGUuc3ZlbHRlJ1xuXG4gICAgaW1wb3J0IFRyYW5zIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvVHJhbnNIZWxwLnN2ZWx0ZSc7XG4gLy9zZXRzIGFzaWRlIGljb24gdG8gaW4gcHJvZ3Jlc3MgdmlhIHN0b3JlXG4gaW1wb3J0IHsgY291bnQsIHF1aXpTdGVwcywgdGltZXJBY3RpdmUgfSBmcm9tICcuLi8uLi9zdG9yZS5qcydcbiBpbXBvcnQgQmFjayBmcm9tICcuLi8uLi9jb21wb25lbnRzL0JhY2suc3ZlbHRlJ1xuXHRvbk1vdW50KGFzeW5jKCkgPT4ge1xuXHRcdCRxdWl6U3RlcHNbJGNvdW50XS5zdGF0dXMgPSAxO1xuXHRcdHRpbWVyQWN0aXZlLnNldCghJHRpbWVyQWN0aXZlKTtcblx0fSk7XG5cdG9uRGVzdHJveSgoKSA9PiB0aW1lckFjdGl2ZS5zZXQoISR0aW1lckFjdGl2ZSkpXG48L3NjcmlwdD5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPkhvdyAgdG8gbWFrZSBjaGFuZ2U/PC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG48VHJhbnM+XG4gICAgPGgxPldlIG11c3QgY2xhaW0gb3VyIHJpZ2h0IHRvIHByaXZhY3kuPC9oMT5cbiAgICAgICAgPHA+QWdpdGF0ZSBmb3IgY2hhbmdlLiBMaWtlIG1vc3QgcmlnaHRzLCBwcml2YWN5IGRyYXdzIG5vdGljZSBvbmx5IGFmdGVyIGl04oCZcyBnb25lLiBBdCB0aGF0IHBvaW50LCBpdOKAmXMgaGFyZGVyIHRvIHJlZ2Fpbi4gSnVzdCBhcyB3ZSBzZWUgdGhlIGVudmlyb25tZW50YWwgaW1wYWN0IG9mIHRoZSBlYXJseSBJbmR1c3RyaWFsIEFnZSwgZnV0dXJlIGdlbmVyYXRpb25zIHdpbGwganVkZ2UgdG9kYXnigJlzIHNvY2lldHkgb24gaG93IHdlbGwgaXQgcm9zZSB0byB0aGUgY2hhbGxlbmdlcyBvZiBzdXJ2ZWlsbGFuY2UgYW5kIG1hc3NpdmUgaW5mb3JtYXRpb24gY29sbGVjdGlvbi4gUHVzaCBmb3IgcmVmb3JtLjwvcD5cbiAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLWhvbGRlclwiPlxuXHRcdDxhIHJlbD1wcmVmZXRjaCBocmVmPVwicmV2aWV3XCI+PGJ1dHRvbj5TZWUgeW91ciByZXN1bHRzPC9idXR0b24+PC9hPlxuICAgICAgICA8YnV0dG9uID5TaWduIGEgUGV0aXRpb248L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiA+Q29udGFjdCB5b3VyIFJlcDwvYnV0dG9uPlxuXHQ8L2Rpdj5cbjxCYWNrLz5cbjwvVHJhbnM+XG5cbjxzdHlsZT5cbiAgIC5idXR0b24taG9sZGVyIHtcblx0d2lkdGg6IDI3dnc7XG5cdGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xuICAgfVxuICAgYnV0dG9uIHtcblx0ICAgcGFkZGluZzogMTBweCAyMHB4O1xuXHQgICBtYXJnaW46IDEwcHg7XG5cdCAgIGJvcmRlcjogYmxhY2sgc29saWQgMHB4O1xuXHQgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICB9XG48L3N0eWxlPiIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgb25Nb3VudCwgYmVmb3JlVXBkYXRlLCBhZnRlclVwZGF0ZSwgb25EZXN0cm95IH0gZnJvbSAnc3ZlbHRlJztcbiAgICBpbXBvcnQgVHJhbnMgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9UcmFuc0hlbHAuc3ZlbHRlJztcbiAgICBpbXBvcnQgQ29tcGxldGUgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9jb21wbGV0ZS5zdmVsdGUnXG4gICAgaW1wb3J0IEJhY2sgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CYWNrLnN2ZWx0ZSdcbiAgICBpbXBvcnQgeyBjb3VudCB9IGZyb20gJy4uLy4uL3N0b3JlLmpzJ1xuICAgIGltcG9ydCB7IHF1aXpTdGVwcyB9IGZyb20gJy4uLy4uL3N0b3JlLmpzJ1xuXHRcbiAgICBsZXQgcSA9IDA7XG4gICAgbGV0IGlzQWN0aXZlO1xuXHRmdW5jdGlvbiBhZHZhbmNlKCkge1xuXHRcdHErKztcbiAgICAgICAgY29uc29sZS5sb2cocSk7XG4gICAgICAgIGlmIChxPTIpIHtcbiAgICAgICAgICAgIGlzQWN0aXZlPSB0cnVlO1xuICAgICAgICB9XG5cdH1cblx0ZnVuY3Rpb24gYWR2YW5jZVR3bygpIHtcblx0XHRxKz0yO1xuXHRcdGNvbnNvbGUubG9nKHEpO1xuICAgIH1cbiAgICAvL3NldHMgYXNpZGUgaWNvbiB0byBpbiBwcm9ncmVzcyB2aWEgc3RvcmVcbiAgICBvbk1vdW50KGFzeW5jKCkgPT4geyRxdWl6U3RlcHNbJGNvdW50XS5zdGF0dXMgPSAxfSk7XG4gICAgLy9TdGFydCBWaWRlbyBvbiB1cGRhdGVcbiAgICBsZXQgdmlkZW87XG5cdGFmdGVyVXBkYXRlKGFzeW5jKCkgPT4ge1xuXHR2aWRlbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdmlkZW9FbGVtZW50XCIpO1xuXHRpZiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpIHtcbiAgXHRuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7IHZpZGVvOiB0cnVlIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHN0cmVhbSkge1xuXHRcdFx0dmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtO1xuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIwcikge1xuICAgICAgY29uc29sZS5sb2coXCJOb3QgbG9hZGVkXCIpO1xuICAgIH0pO1xuXHRcdH1cbn0pXG4vL3N0b3AgdmlkZW8gZnVuY3Rpb24gb24gZW5kIG9mIGNvbXBvbmVudCAgIFxuICAgIGFmdGVyVXBkYXRlKGFzeW5jKCkgPT4geyBcbiAgICAgICAgZnVuY3Rpb24gc3RvcFN0cmVhbWVkVmlkZW8odmlkZW8pIHsgXG4gICAgICAgICAgICBjb25zdCBzdHJlYW0gPSB2aWRlby5zcmNPYmplY3Q7XG4gICAgICAgICAgICBjb25zdCB0cmFja3MgPSBzdHJlYW0uZ2V0VHJhY2tzKCk7XG4gICAgICAgICAgICAgICAgdHJhY2tzWzBdLnN0b3AoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmlkZW8uc3JjT2JqZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuPC9zY3JpcHQ+XG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5XZWJjYW0gQ2hhbGxlbmdlPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG48VHJhbnM+XG5cbnsjaWYgcT09MH1cbjxzZWN0aW9uPlxuXHQ8aDI+SXMgeW91ciBXZWJjYW0gQ292ZXJlZD88L2gyPiBcblx0PHA+SXTigJlzIGxpa2VseSB5b3VyIGNvbXB1dGVyIGFscmVhZHkgaGFzIGEgYnVpbHQtaW4gY2FtZXJhLCBhbmQgaXTigJlzIHBvc3NpYmxlIGZvciB0aGF0IGNhbWVyYSB0byBiZSB1c2VkIHRvIHNweSBvbiB5b3UuICA8YnI+ICBJZiB5b3VyIHdlYmNhbSBmb3Igd2hhdGV2ZXIgcmVhc29uIGhhcyBiZWVuIGhhY2tlZCwgdGhlIHBlcnNvbiBvbiB0aGUgb3RoZXIgc2lkZSBjYW4gdGFrZSBwaWN0dXJlcyBhbmQgdmlkZW8gb2YgYW55dGhpbmcgb3IgYW55b25lLiBObywgdGhpcyBpc27igJl0IGp1c3QgcGFyYW5vaWHigJNhIHJlY2VudCBzdXJ2ZXkgY29uZHVjdGVkIGJ5IEhQIGZvdW5kIHRoYXQgMTAlIGluIHRoZSBVLlMuIGVpdGhlciBrbm93IHNvbWVvbmUgd2hvc2Ugd2ViY2FtIHdhcyBoYWNrZWQgb3IgaGF2ZSBoYWQgdGhlaXIgb3duIHdlYmNhbSBoYWNrZWQuPC9wPlxuXHQ8YnV0dG9uIG9uOmNsaWNrPXthZHZhbmNlfT5Db250aW51ZTwvYnV0dG9uPlxuPC9zZWN0aW9uPlxuezplbHNlIGlmIHE9PTF9XG48c2VjdGlvbj5cblx0PGgyPkNvdmVyIFlvdXIgV2ViY2FtPC9oMj5cblx0PHA+Q292ZXIgeW91ciB3ZWJjYW0uIFlvdSBjYW4gZ2V0IGZhbmN5IHJlbW92YWJsZSBzdGlja2VycyBmb3IgdGhpcyBwdXJwb3NlLCBidXQgZm9yIG5vdywgZmluZCBhIHN0aWNreSBub3RlIG9yIHBpZWNlIG9mIG1hc2tpbmcgdGFwZSBhbmQgY292ZXIgeW91ciB3ZWJjYW0gd2hlbiBpdOKAmXMgbm90IGluIHVzZSAobGlrZSByaWdodCBub3cpLiA8L3A+XG5cdDxkaXYgY2xhc3M9XCJidXR0b24taG9sZGVyXCI+XG4gICAgICAgIDxidXR0b24gb246Y2xpY2s9e2FkdmFuY2V9Pkl0J3MgY292ZXJlZDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIG9uOmNsaWNrPXthZHZhbmNlVHdvfT5ObyBUaGFua3MsIEl0J3MgYSBoYXNzbGU8L2J1dHRvbj5cblx0PC9kaXY+XG48L3NlY3Rpb24+XG57OmVsc2UgaWYgcT09Mn1cbiAgIDxkaXYgY2xhc3M9XCJ2aWRlby1ob2xkZXJcIj48dmlkZW8gYXV0b3BsYXk9XCJ0cnVlXCIgaWQ9XCJ2aWRlb0VsZW1lbnRcIj48L3ZpZGVvPjwvZGl2PlxuICAgIDxwIGlkPVwiYWxlcnRcIj5Db3ZlciB5b3VyIHdlYmNhbTwvcD5cbiAgICA8cCBpZD1cIm5vdC1jb3ZlcmVkXCI+WW91IGhhdmVu4oCZdCBjb3ZlcmVkIHlvdXIgd2ViY2FtZSBvciBkaWQgbm90IGRvIGl0IHByb3Blcmx5LiBQbGVhc2UgY292ZXIgeW91ciB3ZWJjYW0gY29tcGxldGVseSB0byBwcm9jZWVkIHRvIHRoZSBuZXh0IHN0ZXAuPC9wPlxuICAgIDwhLS08YnV0dG9uIG9uOmNsaWNrPXtpbmNvbXBsZXRlfT5PbndhcmRzIHRvIHRoZSBuZXh0IGNoYWxsZW5nZTwvYnV0dG9uPiAtLT5cbiAgICA8Q29tcGxldGU+XG4gICAgICAgIE9ud2FyZHMgdG8gdGhlIG5leHQgY2hhbGxlbmdlXG4gICAgPC9Db21wbGV0ZT5cbns6ZWxzZX1cbiAgICA8dmlkZW8gYXV0b3BsYXk9XCJ0cnVlXCIgaWQ9XCJ2aWRlb0VsZW1lbnRcIj48L3ZpZGVvPlxuey9pZn1cbjxCYWNrLz5cbjwvVHJhbnM+XG48c3R5bGU+XG4gICAuYnV0dG9uLWhvbGRlciB7XG5cdHdpZHRoOiAyN3Z3O1xuXHRkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgIH1cbiAgIC52aWRlby1ob2xkZXJ7XG4gICAgICAgd2lkdGg6IDEwMCU7XG4gICB9XG4gICBidXR0b24ge1xuXHQgICBwYWRkaW5nOiAxMHB4IDIwcHg7XG5cdCAgIG1hcmdpbjogMTBweDtcblx0ICAgYm9yZGVyOiBibGFjayBzb2xpZCAwcHg7XG5cdCAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgIH1cbiAgICNhbGVydCB7XG4gICAgICAgY29sb3I6IHJlZDtcbiAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICBmb250LXNpemU6IDI0cHg7XG4gICB9XG4gICAjbm90LWNvdmVyZWQge1xuICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgYmFja2dyb3VuZDogI0ZGRUVFRTtcbiAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgYm9yZGVyOiBub25lO1xuICAgfVxuPC9zdHlsZT4iLCI8c2NyaXB0PlxuIGltcG9ydCB7IHNsaWRlIH0gZnJvbSAnc3ZlbHRlL3RyYW5zaXRpb24nO1xuaW1wb3J0IHsgcXVpbnRPdXQsIHF1aW50SW4gfSBmcm9tICdzdmVsdGUvZWFzaW5nJztcbiAgICAgY29uc3QgcXVpelN0ZXBzID0gIFtcbiAgICAgICAgeyBpZDogJ3ExJywgbmFtZTogJ1dlYmNhbSBDaGFsbGVuZ2UnLCB0aW1lOiAnMm1pbnMnLCBkZXNjcmlwdGlvbjpcIklmIHlvdXIgY29tcHV0ZXIgaGFzIGEgYnVpbHQtaW4gY2FtZXJhLCBhbHNvIGtub3duIGFzIGEgd2ViY2FtLCB5b3Ugc2hvdWxkIGtub3cgdGhhdCBpdCBjYW4gYmUgdXNlZCB0byBzcHkgb24geW91LiBBbmQgbm8sIHRoaXMgaXMgbm90IGp1c3Qgc2NpZW5jZSBmaWN0aW9uIGFzIGEgcmVjZW50IHN1cnZleSBjb25kdWN0ZWQgYnkgSFAgc2hvd3MgdGhhdCAxMCUgaW4gdGhlIFUuUy4gZWl0aGVyIGtub3cgc29tZW9uZSB3aG9zZSB3ZWJjYW0gd2FzIGhhY2tlZCBvciBoYXZlIGhhZCB0aGVpciBvd24gd2ViY2FtIGhhY2tlZC4gSW4gdGhpcyBjaGFsbGVuZ2UsIHdlIGFyZSBnb2luZyB0byB3YWxrIHlvdSB0aHJvdWdoIHRoZSBiZXN0IHByYWN0aWNlIHRvIGF2b2lkIHRoaXMgcmlzay5cIn0sXG4gICAgICAgIHsgaWQ6ICdxMicsIG5hbWU6ICdCcm93c2VyIENob2ljZScsIHRpbWU6ICczbWlucyd9LFxuICAgICAgICB7IGlkOiAncTMnLCBuYW1lOiAnUHJpdmFjeSBTZXR0aW5nJywgdGltZTogJzRtaW5zJ30sXG4gICAgICAgIHsgaWQ6ICdxNCcsIG5hbWU6ICdIdHRwcyBldmVyeXdoZXJlJywgdGltZTogJzRtaW5zJ30sXG4gICAgICAgIHsgaWQ6ICdxNScsIG5hbWU6ICdMb2NhdGlvbiBTZXJ2aWNlcyAocGhvbmUgbmVlZGVkKScsIHRpbWU6ICczbWlucyd9LFxuICAgICAgICB7IGlkOiAncTYnLCBuYW1lOiAnVHJhY2tlciBibG9ja2VyJywgdGltZTogJzNtaW5zJ30sXG4gICAgICAgIHsgaWQ6ICdxNycsIG5hbWU6ICdsb2NhdGlvbiBUcmFja2luZycsIHRpbWU6ICcxbWlucyd9LFxuICAgICAgICB7IGlkOiAncTgnLCBuYW1lOiAnTW9iaWxlIGtleWJvYXJkJywgdGltZTogJzVtaW5zJ30sXG4gICAgICAgIHsgaWQ6ICdxOScsIG5hbWU6ICdNZXNzZW5nZXIgcGxhdGZvcm0nLCB0aW1lOiAnMm1pbnMnfSxcbiAgICAgICAgeyBpZDogJ3ExMCcsIG5hbWU6ICdpb3QnLCB0aW1lOiAnMm1pbnMnfVxuICAgICBdXG4gICAgbGV0IGFjdGl2ZSA9IHRydWU7XG4gICAgIGZ1bmN0aW9uIGhhbmRsZU1vdXNlU2hvdygpe1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcblxuICAgICB9XG48L3NjcmlwdD5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPlF1aXogT3ZlcnZpZXc8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxkaXYgdHJhbnNpdGlvbjpzbGlkZT1cInt7ZGVsYXk6IDEwMCwgZHVyYXRpb246IDQwMCwgZWFzaW5nOiBxdWludE91dH19XCIgPlxuPGgyPlRoaXMgdGVzdCBjb250YWlucyAxMCB1bmlxdWUgcHJpdmFjeSB0ZXN0cyB0aGF0IHdpbGwgdGFrZSB5b3UgYWJvdXQgMzAgbWludXRlcyB0byBjb21wbGV0ZS4gVGhyb3VnaHQgdGhlIHRlc3QsIHdlIHdpbGwgcHJvdmlkZS4uLjwvaDI+XG48ZGl2PlxuICAgIHsjZWFjaCBxdWl6U3RlcHMgYXMge2lkLCBuYW1lLCB0aW1lLCBkZXNjcmlwdGlvbn0sIGl9XG4gICAgPGRpdiBjbGFzcz0nbnVtJz57aX17bmFtZX0gKHt0aW1lfSk8L2Rpdj48ZGl2IGNsYXNzOmFjdGl2ZT17YWN0aXZlfT57ZGVzY3JpcHRpb259PC9kaXY+XG4gICAgey9lYWNofVxuPC9kaXY+XG48L2Rpdj5cbjxzdHlsZT5cbiAgICAubnVtIHtcbiAgICAgICAgcGFkZGluZy1yaWdodDogMTAwcHg7XG4gICAgIFxuICAgIH1cbiAgICBkaXYge1xuICAgICAgICBjb2xvcjpibGFjaztcbiAgICB9XG4gICAgLmFjdGl2ZSB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cbiAgICBcbjwvc3R5bGU+IiwiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBvbk1vdW50LCBiZWZvcmVVcGRhdGUsIGFmdGVyVXBkYXRlLCBvbkRlc3Ryb3kgfSBmcm9tICdzdmVsdGUnO1xuICAgIGltcG9ydCBWaWQgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9WaWQuc3ZlbHRlJ1xuICAgIGltcG9ydCBUcmFucyBmcm9tICcuLi8uLi9jb21wb25lbnRzL1RyYW5zSGVscC5zdmVsdGUnO1xuICAgIGltcG9ydCBDb21wbGV0ZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NvbXBsZXRlLnN2ZWx0ZSdcblx0aW1wb3J0IEJ0biBmcm9tICcuLi8uLi9jb21wb25lbnRzL0J0bi5zdmVsdGUnIC8vc2V0IDxOZXh0IHE9ezJ9PiB0byBza2lwIG11bHRpcGxlIHN0ZXBzXG4gICAgaW1wb3J0IHsgY291bnQsIHN0ZXAsIHF1aXpTdGVwcywgdGltZXJBY3RpdmUsIHByb2dyZXNzfSBmcm9tICcuLi8uLi9zdG9yZS5qcydcbiAgICBpbXBvcnQgQmFjayBmcm9tICcuLi8uLi9jb21wb25lbnRzL0JhY2suc3ZlbHRlJ1xuXG4gICAgLy9zZXRzIGFzaWRlIGljb24gdG8gaW4gcHJvZ3Jlc3MgdmlhIHN0b3JlXG4gICBvbk1vdW50KGFzeW5jKCkgPT4ge1xuICAgICAgICAkcXVpelN0ZXBzWyRjb3VudF0uc3RhdHVzID0gMTtcbiAgICAgICAgdGltZXJBY3RpdmUuc2V0KCEkdGltZXJBY3RpdmUpfSk7XG4gICAgLy9TdGFydCBWaWRlbyBvbiB1cGRhdGVcbiAgICAvKlxuICAgIGxldCB2aWRlbztcblx0YWZ0ZXJVcGRhdGUoYXN5bmMoKSA9PiB7XG5cdHZpZGVvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN2aWRlb0VsZW1lbnRcIik7XG5cdGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICBcdG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHsgdmlkZW86IHRydWUgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoc3RyZWFtKSB7XG5cdFx0XHR2aWRlby5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24gKGVycjByKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIk5vdCBsb2FkZWRcIik7XG4gICAgfSk7XG5cdFx0fVxufSlcbi8vc3RvcCB2aWRlbyBmdW5jdGlvbiBvbiBlbmQgb2YgY29tcG9uZW50ICAgXG4gICBvbkRlc3Ryb3koYXN5bmMoKSA9PiB7IFxuICAgICAgICBmdW5jdGlvbiBzdG9wU3RyZWFtZWRWaWRlbyh2aWRlbykgeyBcbiAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IHZpZGVvLnNyY09iamVjdDtcbiAgICAgICAgICAgIGNvbnN0IHRyYWNrcyA9IHN0cmVhbS5nZXRUcmFja3MoKTtcbiAgICAgICAgICAgICAgICB0cmFja3MuZm9yRWFjaCh0ID0+IHQuc3RvcCgpKTtcbiAgICAgICAgICAgICAgICBzdHJlYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL3ZpZGVvLnNyY09iamVjdCA9IG51bGw7XG4gICAgICAgICAgICB9KTsqL1xuPC9zY3JpcHQ+XG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5XZWJjYW0gQ2hhbGxlbmdlPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG48VHJhbnM+XG5cbnsjaWYgJHN0ZXA9PTB9XG48c2VjdGlvbj5cblx0PGgyPklzIHlvdXIgV2ViY2FtIENvdmVyZWQ/PC9oMj4gXG4gICAgPHA+SXTigJlzIGxpa2VseSB5b3VyIGNvbXB1dGVyIGFscmVhZHkgaGFzIGEgYnVpbHQtaW4gY2FtZXJhLCBhbmQgaXTigJlzIHBvc3NpYmxlIGZvciB0aGF0IGNhbWVyYSB0byBiZSB1c2VkIHRvIHNweSBvbiB5b3UuPC9wPiAgPHA+SWYgeW91ciB3ZWJjYW0gZm9yIHdoYXRldmVyIHJlYXNvbiBoYXMgYmVlbiBoYWNrZWQsIHRoZSBwZXJzb24gb24gdGhlIG90aGVyIHNpZGUgY2FuIHRha2UgcGljdHVyZXMgYW5kIHZpZGVvIG9mIGFueXRoaW5nIG9yIGFueW9uZS4gTm8sIHRoaXMgaXNu4oCZdCBqdXN0IHBhcmFub2lh4oCTYSByZWNlbnQgc3VydmV5IGNvbmR1Y3RlZCBieSBIUCBmb3VuZCB0aGF0IDEwJSBpbiB0aGUgVS5TLiBlaXRoZXIga25vdyBzb21lb25lIHdob3NlIHdlYmNhbSB3YXMgaGFja2VkIG9yIGhhdmUgaGFkIHRoZWlyIG93biB3ZWJjYW0gaGFja2VkLjwvcD5cbiAgICA8QnRuIHA9ezQuNzV9IGdyZWVuPXt0cnVlfT5Db250aW51ZTwvQnRuPlxuPC9zZWN0aW9uPlxuezplbHNlIGlmICRzdGVwPT0xfVxuPHNlY3Rpb24+XG5cdDxoMj5Db3ZlciBZb3VyIFdlYmNhbTwvaDI+XG5cdDxwPkNvdmVyIHlvdXIgd2ViY2FtLiBZb3UgY2FuIGZpbmQgcmVtb3ZhYmxlIHN0aWNrZXJzIGZvciB0aGlzIHB1cnBvc2UsIGJ1dCBzaW1wbGUgZml4ZXMgY2FuIGJlIGZvdW5kIGF0IHlvdXIgaG9tZSBvciBvZmZpY2UuIFlvdSBjYW4gdXNlIGEgc3RpY2t5IG5vdGUgb3IgIGEgcGllY2Ugb2YgbWFza2luZyB0YXBlIHRvIG9ic2N1cmUgeW91ciB3ZWJjYW0gd2hlbiBpdOKAmXMgbm90IGluIHVzZS4gTGlrZSByaWdodCBub3cuIDwvcD5cblx0PGRpdiBjbGFzcz1cImJ1dHRvbi1ob2xkZXJcIj5cbiAgICAgICAgPEJ0biBwPXs0Ljc1fT5JdCdzIGNvdmVyZWQ8L0J0bj5cbiAgICAgICAgPENvbXBsZXRlIHN1Y2Nlc3M9e2ZhbHNlfSBwPXs4LjV9Pk5vIFRoYW5rcywgSXQncyBhIGhhc3NsZTwvQ29tcGxldGU+IFxuXHQ8L2Rpdj5cbjwvc2VjdGlvbj5cbns6ZWxzZSBpZiAkc3RlcD09Mn1cbjxzZWN0aW9uPlxuICAgPGRpdiBjbGFzcz1cInZpZGVvLWhvbGRlclwiPlxuICAgICAgIDxWaWQ+PC9WaWQ+XG4gICAgPC9kaXY+XG4gICAgPHAgaWQ9XCJhbGVydFwiPkNvdmVyIHlvdXIgd2ViY2FtPC9wPlxuICAgIDxwIGlkPVwibm90LWNvdmVyZWRcIj5Zb3UgaGF2ZW7igJl0IGNvdmVyZWQgeW91ciB3ZWJjYW1lIG9yIGRpZCBub3QgZG8gaXQgcHJvcGVybHkuIFBsZWFzZSBjb3ZlciB5b3VyIHdlYmNhbSBjb21wbGV0ZWx5IHRvIHByb2NlZWQgdG8gdGhlIG5leHQgc3RlcC48L3A+XG4gICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1ob2xkZXJcIj5cbiAgICA8Q29tcGxldGUgcD17NC43NX0gZ3JlZW49e3RydWV9PlxuICAgICAgICBPbndhcmRzIHRvIHRoZSBuZXh0IGNoYWxsZW5nZVxuICAgIDwvQ29tcGxldGU+XG4gICAgPC9kaXY+XG48L3NlY3Rpb24+XG57OmVsc2V9XG48c2VjdGlvbj5cbiAgICA8VmlkPjwvVmlkPlxuICAgIDxkaXYgY2xhc3M9XCJidXR0b24taG9sZGVyXCI+XG4gICAgPENvbXBsZXRlIHA9ezQuNzV9IGdyZWVuPXt0cnVlfT5cbiAgICAgICAgT253YXJkcyB0byB0aGUgbmV4dCBjaGFsbGVuZ2VcbiAgICA8L0NvbXBsZXRlPlxuICAgIDwvZGl2PlxuPC9zZWN0aW9uPlxuey9pZn1cblxuPEJhY2svPlxuPC9UcmFucz5cbjxzdHlsZT5cbiAgIC52aWRlby1ob2xkZXJ7XG4gICAgICAgd2lkdGg6IDEwMCU7XG4gICB9XG4gICAjYWxlcnQge1xuICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgICAgZm9udC1zaXplOiAyNHB4O1xuICAgfVxuICAgI25vdC1jb3ZlcmVkIHtcbiAgICAgICBjb2xvcjogcmVkO1xuICAgICAgIGJhY2tncm91bmQ6ICNGRkVFRUU7XG4gICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgIGJvcmRlcjogbm9uZTtcbiAgIH1cbjwvc3R5bGU+IiwiPHNjcmlwdD5cblx0aW1wb3J0IHsgb25Nb3VudCwgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblx0aW1wb3J0IFRyYW5zIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvVHJhbnNIZWxwLnN2ZWx0ZSc7XG5cdGltcG9ydCBDb21wbGV0ZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NvbXBsZXRlLnN2ZWx0ZScgLy9zZXQgc3VjY2Vzcz17ZmFsc2V9IGZvciBmYWlsdXJlXG5cdGltcG9ydCBCdG4gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CdG4uc3ZlbHRlJyAvL3NldCA8TmV4dCBxPXsyfT4gdG8gc2tpcCBtdWx0aXBsZSBzdGVwc1xuXHRpbXBvcnQgeyBjb3VudCwgc3RlcCwgcXVpelN0ZXBzIH0gZnJvbSAnLi4vLi4vc3RvcmUuanMnXG5cdGltcG9ydCBCYWNrIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQmFjay5zdmVsdGUnXG5cbiAgICAgLy9zZXRzIGFzaWRlIGljb24gdG8gaW4gcHJvZ3Jlc3MgdmlhIHN0b3JlXG5cdG9uTW91bnQoYXN5bmMoKSA9PiB7JHF1aXpTdGVwc1skY291bnRdLnN0YXR1cyA9IDF9KTtcblx0bGV0IGRpc2FibGVkID0gZmFsc2U7XG5cdGZ1bmN0aW9uIGRpc2FibGUoKSB7XG5cdFx0ZGlzYWJsZWQ9IHRydWU7XG5cdFx0Y29uc29sZS5sb2coZGlzYWJsZWQpO1xuXHR9XG5cdGNvbnNvbGUubG9nKGRpc2FibGVkKTtcbjwvc2NyaXB0PlxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+SHR0cHMgRXZlcnl3aGVyZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPFRyYW5zPlxueyNpZiAkc3RlcCA9PSAwfVxuPHNlY3Rpb24+XG5cdDxoMj5JcyB5b3VyIGluZm9ybWF0aW9uIGVuY3J5cHRlZCBhbmQgc2VjdXJlPzwvaDI+IFxuXHQ8cD5IVFRQIHN0YW5kcyBmb3IgaHlwZXJ0ZXh0IHRyYW5zZmVyIHByb3RvY29sLiBJdOKAmXMgYSBwcm90b2NvbCB0aGF0IGFsbG93cyB0aGUgdHJhbnNmZXJyaW5nIG9mIGRhdGEgZnJvbSBhIHdlYiBzZXJ2ZXIgdG8gYSBicm93c2VyIHRvIHZpZXcgd2ViIHBhZ2VzLjwvcD5cblx0PHA+VGhlIHByb2JsZW0gaXMgdGhhdCB0aGUgZGF0YSB0cmFuc2ZlcnJlZCBieSBIVFRQIGlzIG5vdCBlbmNyeXB0ZWQsIGFuZCBpdCBjYW4gYmUgaW50ZXJjZXB0ZWQgYnkgdGhpcmQgcGFydGllcyB0byB2aWV3IHRoZSBkYXRhIGJlaW5nIHBhc3NlZCBiZXR3ZWVuIHRoZSB0d28gc3lzdGVtcy4gVGhpcyBjYW4gYmUgYWRkcmVzc2VkIGJ5IHVzaW5nIGEgc2VjdXJlIHZlcnNpb24gY2FsbGVkIEhUVFBTLCB3aGVyZSB0aGUgXCJTXCIgc3RhbmRzIGZvciBzZWN1cmUuPC9wPlxuXHQ8cD5Vc2luZyAgSFRUUFMgIGlzIGVzcGVjaWFsbHkgaW1wb3J0YW50IGZvciBzaXRlcyB0aGF0IHRyYW5zbWl0IHNlbnNpdGl2ZSBkYXRhLCBsaWtlIGVjb21tZXJjZSBzaXRlcyB0aGF0IGFjY2VwdCBvbmxpbmUgY2FyZCBwYXltZW50cywgb3IgbG9naW4gYXJlYXMgdGhhdCByZXF1aXJlIHVzZXJzIHRvIGVudGVyIHRoZWlyIGNyZWRlbnRpYWxzLjwvcD5cblxuXHQ8ZGl2IGNsYXNzPVwiYnV0dG9uLWhvbGRlclwiPlxuXHRcdDxCdG4gZ3JlZW49e3RydWV9PkNvbnRpbnVlPC9CdG4+XG5cdDwvZGl2PlxuPC9zZWN0aW9uPlxuezplbHNlfVxuPHNlY3Rpb24+XG5cdDxoMj5Eb3dubG9hZCBIVFRQUyBFdmVyeXdoZXJlIGV4dGVuc2lvbjwvaDI+XG5cdDxwPkx1Y2tpbHksIHRoZSBFbGVjdHJvbmljIEZyb250aWVyIEZvdW5kYXRpb24gaGFzIGNyZWF0ZWQgYSBzbWFydCBleHRlbnNpb24gdGhhdCByZXdyaXRlcyB3ZWJzaXRlIHJlcXVlc3RzIHRvIEhUVFBTLiBXaXRoIEhUVFBTLCB0aGUgaW50ZXJuZXQgdHJhZmZpYyBiZXR3ZWVuIHlvdXIgZGV2aWNlIGFuZCB0aGUgc2VydmVyIGhvc3RpbmcgeW91ciB3ZWJzaXRlIGNhbuKAmXQgYmUgc2VlbiBieSBwcnlpbmcgZXllcy48L3A+XG5cbjxkaXYgY2xhc3M9XCJidXR0b24taG9sZGVyXCI+XG5cdDxhIGhyZWY9J2h0dHBzOi8vd3d3LmVmZi5vcmcvaHR0cHMtZXZlcnl3aGVyZScgdGFyZ2V0PVwiX2JsYW5rXCI+PGJ1dHRvbiBvbjpjbGlja3xvbmNlPSd7ZGlzYWJsZX0nIGRpc2FibGVkPSd7ZGlzYWJsZWR9Jz5Eb3dubG9hZCBleHRlbnNpb24gbm93XG5cdDwvYnV0dG9uPjwvYT5cblx0PENvbXBsZXRlPlxuXHRcdHsjaWYgIWRpc2FibGVkfVxuXHRcdEFscmVhZHkgSGF2ZSBpdFxuXHRcdHs6ZWxzZX1cblx0XHRKdXN0IGRvd25sb2FkZWQgaXRcblx0XHR7L2lmfVxuXHQ8L0NvbXBsZXRlPlxuXHQ8Q29tcGxldGUgc3VjY2Vzcz17ZmFsc2V9PlxuXHRcdE5vIFRoYW5rc1xuXHQ8L0NvbXBsZXRlPlxuXHRcblx0PC9kaXY+XG48L3NlY3Rpb24+XG57L2lmfVxuPEJhY2svPlxuPC9UcmFucz5cbjxzdHlsZT5cbiAgIC5idXR0b24taG9sZGVyIHtcblx0d2lkdGg6IDI3dnc7XG5cdGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xuICAgfVxuICAgYnV0dG9uIHtcblx0ICAgcGFkZGluZzogMTBweCAyMHB4O1xuXHQgICBtYXJnaW46IDEwcHg7XG5cdCAgIGJvcmRlcjogYmxhY2sgc29saWQgMHB4O1xuXHQgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICB9XG4gICBhIHtcblx0ICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgfVxuICAgXG48L3N0eWxlPiIsIjxzY3JpcHQ+XG5cdGltcG9ydCB7IG9uTW91bnQsIGFmdGVyVXBkYXRlIH0gZnJvbSAnc3ZlbHRlJztcblx0aW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblx0Ly9pbXBvcnQgQ29tcGxldGlvbiBmcm9tICcuLi8uLi9jb21wb25lbnRzL0NvbXBsZXRpb24uc3ZlbHRlJ1xuXHRpbXBvcnQgVHJhbnMgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9UcmFuc0hlbHAuc3ZlbHRlJztcblx0IFxuXHRpbXBvcnQgQ29tcGxldGUgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9jb21wbGV0ZS5zdmVsdGUnIC8vc2V0IHN1Y2Nlc3M9e2ZhbHNlfSBmb3IgZmFpbHVyZVxuXHRpbXBvcnQgQnRuIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQnRuLnN2ZWx0ZScgLy9zZXQgPE5leHQgcT17Mn0+IHRvIHNraXAgbXVsdGlwbGUgc3RlcHNcblx0aW1wb3J0IHsgY291bnQsIHN0ZXAsIHF1aXpTdGVwcyB9IGZyb20gJy4uLy4uL3N0b3JlLmpzJ1xuXHRpbXBvcnQgQmFjayBmcm9tICcuLi8uLi9jb21wb25lbnRzL0JhY2suc3ZlbHRlJ1xuXG5cdG9uTW91bnQoYXN5bmMoKSA9PiB7JHF1aXpTdGVwc1skY291bnRdLnN0YXR1cyA9IDE7XG5cdFx0fSk7XG5cdGxldCBtYWMgPSBmYWxzZTtcblx0bGV0IHBjID0gZmFsc2U7XG5cdDwvc2NyaXB0PlxuXHQ8c3ZlbHRlOmhlYWQ+XG5cdFx0PHRpdGxlPlNlYXJjaCBFbmdpbmU8L3RpdGxlPlxuXHQ8L3N2ZWx0ZTpoZWFkPlxuXHRcblx0PFRyYW5zPlxuXHRcdDxzZWN0aW9uPlxuXHR7I2lmICRzdGVwPT0wfSBcblx0XHQ8aDE+Q2hhbmdlIFlvdXIgU2VhcmNoPC9oMT5cblx0XHQ8cD5Ib3cgYXJlIHlvdSBzZWFyY2hpbmcgZm9yIGluZm9ybWF0aW9uPyA8L3A+XG5cdFx0PHA+VXNpbmcgYSBzZWFyY2ggZW5naW5lIGNhbiBkaXNjbG9zZSBoaWdobHkgcGVyc29uYWwgaW5mb3JtYXRpb24gYWJvdXQgeW91LCBzdWNoIGFzIG1lZGljYWwgaXNzdWVzLCBlbXBsb3ltZW50IHN0YXR1cywgZmluYW5jaWFsIGluZm9ybWF0aW9uLCBwb2xpdGljYWwgYmVsaWVmcywgYW5kIG90aGVyIHByaXZhdGUgZGV0YWlscy4gVGhpcyBkYXRhLCBvZiBjb3Vyc2UsIGNhbiBiZSBjb2xsZWN0ZWQsIHN0b3JlZCwgYW5kIGxpbmtlZCB0byB5b3VyIGRhdGEgcHJvZmlsZSAoYW5kIHlvdXIgcmVhbCBpZGVudGl0eSkuIFRoZSBvbmx5IHdheSB0byBlZmZlY3RpdmVseSDigJxvcHQgb3V04oCdIGlzIHRvIGtlZXAgeW91ciBkYXRhIHNhZmUgYW5kIG91dCBvZiB0aGUgaGFuZHMgb2YgdGhlIGRhdGEgY29sbGVjdG9ycy48L3A+XG5cdFx0PGRpdiBjbGFzcz1cImJ1dHRvbi1ob2xkZXJcIj5cblx0XHRcdDxCdG4geWVsbG93PXt0cnVlfT4gY29udGludWU8L0J0bj5cblx0XHQ8L2Rpdj5cblx0ezplbHNlfVxuXHRcblx0XHRcdDxoMT5Vc2UgYWx0ZXJuYXRpdmUgc2VhcmNoIGVuZ2luZTwvaDE+XG5cdFx0XHQ8cD5Qcm90ZWN0IHlvdXIgcHJpdmFjeSB3aGlsZSB5b3Ugc2VhcmNoIHVzaW5nIGFuIGFsdGVybmF0aXZlIHNlYXJjaCBlbmdpbmUgd2hlbiB5b3UgbmVlZCB0byBmaW5kIHNvbWV0aGluZyBvbiB0aGUgaW50ZXJuZXQuIFRoaXMgaXNu4oCZdCBhcyBoYXJkIGFzeW91IG1pZ2h0IHRoaW5rIGFzIHRoZXJlIGFyZSBzb21lIGNvbXBldGl0aXZlIGFsdGVybmF0aXZlcyBub3cgdGhhdCBkb27igJl0IGNvbGxlY3Qgb3Igc2hhcmUgeW91ciBwZXJzb25hbCBpbmZvcm1hdGlvbiDigJQgd2UgbGlrZSBEdWNrRHVja0dvIGFzIGFuIGV4dGVuc2lvbiBmb3Igc2VhcmNoZXMsIGJ1dCBpZiB5b3XigJlkIGxpa2UgdG8gc2VhcmNoIGZvciBvdGhlciBzZWFyY2ggZW5naW5lcyA8YSBocmVmPVwiaHR0cHM6Ly9yZXN0b3JlcHJpdmFjeS5jb20vcHJpdmF0ZS1zZWFyY2gtZW5naW5lL1wiPmhlcmUgYXJlIGEgZmV3IG9wdGlvbnM8L2E+LlxuXHRcdFx0XG5cdFx0PGRpdiBjbGFzczptYWMgb246Y2xpY2s9XCJ7KCkgPT4gbWFjID0gIW1hY31cIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjYXJldFwiPlxuXHRcdFx0XHQ8cD5DaGFuZ2UgeW91ciBkZWZ1YWx0IHNlYXJjaCBlbmdpbmUgZm9yIE1hYyA8L3A+XG5cdFx0XHRcdFx0PHN2ZyB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG5cdFx0XHRcdFx0PHBhdGggZD1cIk0xOC44ODUgN0wxMiAxMy43OTg5TDUuMTE1IDdMMyA5LjA5MzEyTDEyIDE4TDIxIDkuMDkzMTJMMTguODg1IDdaXCIgZmlsbD1cIndoaXRlXCIvPlxuXHRcdFx0XHRcdDwvc3ZnPlxuXHRcdFx0PC9kaXY+XG5cdFx0XHR7I2lmIG1hY31cblx0XHRcdFx0PG9sPlxuXHRcdFx0XHRcdDxsaT5DaG9vc2UgU3lzdGVtIFByZWZlcmVuY2VzIGZyb20gdGhlIEFwcGxlICgpIG1lbnUuPC9saT5cblx0XHRcdFx0XHQ8bGk+Q2xpY2sgR2VuZXJhbDwvbGk+XG5cdFx0XHRcdFx0PGxpPkNob29zZSB5b3VyIHdlYiBicm93c2VyIGZyb20gdGhlIOKAnURlZmF1bHQgd2ViIGJyb3dzZXLigJ0gcG9wLXVwIG1lbnUuPC9saT5cblx0XHRcdFx0PC9vbD5cblx0XHRcdHsvaWZ9XG5cdFx0PC9kaXY+XG5cdFx0PGhyPlxuXHRcdCA8ZGl2IGNsYXNzOnBjIG9uOmNsaWNrPVwieygpID0+IHBjID0gIXBjfVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNhcmV0XCI+XG5cdFx0XHQ8cD5DaGFuZ2UgeW91ciBkZWZ1YWx0IHNlYXJjaCBlbmdpbmUgZm9yIFdpbmRvd3MgPC9wPjxzdmcgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuPHBhdGggZD1cIk0xOC44ODUgN0wxMiAxMy43OTg5TDUuMTE1IDdMMyA5LjA5MzEyTDEyIDE4TDIxIDkuMDkzMTJMMTguODg1IDdaXCIgZmlsbD1cIndoaXRlXCIvPlxuPC9zdmc+PC9kaXY+XG5cdFx0XHR7I2lmIHBjfVxuXHRcdFx0PG9sPlxuXHRcdFx0XHRcdDxsaT5TZWxlY3QgdGhlIFN0YXJ0ICBidXR0b24sIGFuZCB0aGVuIHR5cGUgRGVmYXVsdCBhcHBzLjwvbGk+XG5cdFx0XHRcdFx0PGxpPkluIHRoZSBzZWFyY2ggcmVzdWx0cywgc2VsZWN0IERlZmF1bHQgYXBwcy48L2xpPlxuXHRcdFx0XHRcdDxsaT5VbmRlciBXZWIgYnJvd3Nlciwgc2VsZWN0IHRoZSBicm93c2VyIGN1cnJlbnRseSBsaXN0ZWQsIGFuZCB0aGVuIHNlbGVjdCBNaWNyb3NvZnQgRWRnZSBvciBhbm90aGVyIGJyb3dzZXIuPC9saT5cblx0XHRcdDwvb2w+XG4gICAgXHRcdHsvaWZ9XG5cdFx0PC9kaXY+XG5cdFx0PGhyPlxuXHRcdDxkaXY+XG5cdFx0ICAgPHA+PGEgaHJlZj1cImh0dHBzOi8vY2hyb21lLmdvb2dsZS5jb20vd2Vic3RvcmUvZGV0YWlsL2R1Y2tkdWNrZ28tcHJpdmFjeS1lc3NlbnQvYmtkZ2ZsY2xkbm5uYXBibGtocGhiZ3BnZ2RpaWtwcGdcIiB0YXJnZXQ9XCJfYmxhbmtcIj5PciB5b3UgY2FuIGRvd25sb2FkIHRoZSBEdWNrRHVja0dvIEV4dGVuc2lvbiBoZXJlPC9hPjwvcD5cblx0XHQ8L2Rpdj5cblx0XHQ8ZGl2IGNsYXNzPVwiYnV0dG9uLWhvbGRlclwiPlxuXHRcdFx0PENvbXBsZXRlPlxuICAgICAgICBcdFx0U2VhcmNoIEVuZ2luZSBDaGFuZ2VkXG5cdFx0XHQ8L0NvbXBsZXRlPlxuXHRcdFx0PENvbXBsZXRlIHN1Y2Nlc3M9e2ZhbHNlfT5cbiAgICAgICAgXHRcdE5vIFRoYW5rc1xuICAgIFx0XHQ8L0NvbXBsZXRlPlxuXHRcdDwvZGl2PlxuXHRcdHsvaWZ9XG5cdDwvc2VjdGlvbj5cblx0XHQ8QmFjay8+XG5cdDwvVHJhbnM+XG5cdFx0XG5cdFx0XG5cdDxzdHlsZT5cblx0XHQuY2FyZXR7XG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0ZmxleC1mbG93OiByb3cgbm93cmFwO1xuXHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcblx0XHR9XG5cdFx0YSB7XG5cdFx0XHR0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcblx0XHR9XG5cdDwvc3R5bGU+IiwiPHNjcmlwdD5cblx0aW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblx0aW1wb3J0IHsgb25Nb3VudCwgYWZ0ZXJVcGRhdGUgfSBmcm9tICdzdmVsdGUnO1xuXHRpbXBvcnQgRGV0ZWN0IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvRGV0ZWN0LnN2ZWx0ZSdcblx0aW1wb3J0IFRyYW5zIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvVHJhbnNIZWxwLnN2ZWx0ZSc7XG5cdGltcG9ydCBDb21wbGV0ZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NvbXBsZXRlLnN2ZWx0ZScgLy9zZXQgc3VjY2Vzcz17ZmFsc2V9IGZvciBmYWlsdXJlXG5cdGltcG9ydCBCdG4gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CdG4uc3ZlbHRlJyAvL3NldCA8TmV4dCBxPXsyfT4gdG8gc2tpcCBtdWx0aXBsZSBzdGVwc1xuXHRpbXBvcnQgeyBjb3VudCwgc3RlcCwgcXVpelN0ZXBzIH0gZnJvbSAnLi4vLi4vc3RvcmUuanMnXG5cdGltcG9ydCBCYWNrIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQmFjay5zdmVsdGUnXG5cblx0Ly9zZXRzIGFzaWRlIGljb24gdG8gaW4gcHJvZ3Jlc3MgdmlhIHN0b3JlXG4gICAgb25Nb3VudChhc3luYygpID0+IHskcXVpelN0ZXBzWyRjb3VudF0uc3RhdHVzID0gMX0pO1xuXHQvL2NvbmZpcm0gY29tbGV0aW9uIG9mIHF1aXogdG8gbWFzdGVyIHF1aXogY29tcG9uZW50XG48L3NjcmlwdD5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPlF1ZXN0aW9uIDQ6IFByaXZhY3kgU2V0dGluZ3M8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxUcmFucz5cbnsjaWYgJHN0ZXA9PTB9XG48c2VjdGlvbj5cblx0PGgxPlByaXZhY3kgc2V0dGluZ3MgLSAzcmQgcGFydHkgY29va2llczwvaDE+XG5cdDxoMj5XYW50IHNvbWUgY29va2llcz88L2gyPlxuXHQ8cD5XZWxsLCBub3QgdGhhdCBraW5kIG9mIGNvb2tpZS48L3A+XG5cdDxwPkNvb2tpZXMgYXJlIHNtYWxsIGZpbGVzIHRoYXQgYXJlIHN0b3JlZCBvbiB5b3VyIGNvbXB1dGVyIGFuZCBjYXJyeSBpbmZvcm1hdGlvbiBmcm9tIG9uZSBzZXNzaW9uIG9uIGEgd2Vic2l0ZSB0byBhbm90aGVyLiBVc3VhbGx5LCB0aGUgd2Vic2l0ZSB0aGF0IHNldHMgYSBjb29raWUgaXMgdGhlIG9ubHkgb25lIHRoYXQgcmVhZHMgdGhlIGNvb2tpZS4gSG93ZXZlciwgdGhpcmQtcGFydHkgY29va2llcyBjYW4gYmUgc2V0IGJ5IG9uZSB3ZWJzaXRlIGFuZCByZWFkIGJ5IGFub3RoZXIuIFRoaXJkLXBhcnR5IGNvb2tpZXMgYXJlIHVzZWQgYnkgc2VydmVycyB0aGF0IGRlbGl2ZXIgYWR2ZXJ0aXNlbWVudHMgYW5kIHRob3NlIGFubm95aW5nIHBvcC11cCBhbmQgcG9wLXVuZGVyIGFkcy48L3A+XG5cdDxkaXYgY2xhc3M9XCJidXR0b24taG9sZGVyXCI+XG5cdFx0PEJ0biB5ZWxsb3c9e3RydWV9PkNvbnRpbnVlPC9CdG4+XG5cdDwvZGl2PlxuPC9zZWN0aW9uPlxuezplbHNlfVxuPHNlY3Rpb24+XG5cdDxoMj5HaXZlIDNyZCBwYXJ0eSBjb29raWVzIHRoZSBib290IGJ5IG1hbmFnaW5nIHlvdXIgYnJvd3NlciBzZXR0aW5nczo8L2gyPlxuXHQ8RGV0ZWN0IC8+XG5cdDxkaXYgY2xhc3M9XCJidXR0b24taG9sZGVyXCIgaWQ9J2Nvb2tpZS1idXR0b25zJz5cblx0XHQ8aDM+RGlkIHlvdSBkaXNhYmxlIHRyYWNraW5nIGNvb2tpZXM/PC9oMz5cblx0XHQ8Q29tcGxldGU+WXVwPC9Db21wbGV0ZT5cblx0XHQ8Q29tcGxldGUgc3VjY2Vzcz17ZmFsc2V9Pk5vLCBJIGRvbid0IG1pbmQgdGhlbSBmb2xsb3dpbmcgbWU8L0NvbXBsZXRlPlxuXHQ8L2Rpdj5cbjwvc2VjdGlvbj5cbnsvaWZ9XG48QmFjay8+XG48L1RyYW5zPlxuPHN0eWxlPlxuICAgLmJ1dHRvbi1ob2xkZXIge1xuXHR3aWR0aDogMjd2dztcblx0ZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XG4gICB9XG4gICAjY29va2llLWJ1dHRvbnN7XG5cdCAgIG1hcmdpbjogNDBweCAwcHggMHB4IDBweDtcbiAgIH1cbjwvc3R5bGU+IiwiPHNjcmlwdD5cblx0aW1wb3J0IHsgb25Nb3VudCwgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblx0aW1wb3J0IFRyYW5zIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvVHJhbnNIZWxwLnN2ZWx0ZSc7XG5cdGltcG9ydCBDb21wbGV0ZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NvbXBsZXRlLnN2ZWx0ZSdcblx0aW1wb3J0IEJ0biBmcm9tICcuLi8uLi9jb21wb25lbnRzL0J0bi5zdmVsdGUnIC8vc2V0IDxOZXh0IHE9ezJ9PiB0byBza2lwIG11bHRpcGxlIHN0ZXBzXG5cdGltcG9ydCB7IGNvdW50LCBzdGVwLCBxdWl6U3RlcHMgfSBmcm9tICcuLi8uLi9zdG9yZS5qcydcblx0aW1wb3J0IEJhY2sgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CYWNrLnN2ZWx0ZSdcblxuXHQvL3NldHMgYXNpZGUgaWNvbiB0byBpbiBwcm9ncmVzcyB2aWEgc3RvcmVcblx0b25Nb3VudChhc3luYygpID0+IHskcXVpelN0ZXBzWyRjb3VudF0uc3RhdHVzID0gMX0pO1xuXHRsZXQgZGlzYWJsZWQgPSBmYWxzZTtcblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRkaXNhYmxlZD0gdHJ1ZTtcblx0XHRjb25zb2xlLmxvZyhkaXNhYmxlZCk7XG5cdH1cbjwvc2NyaXB0PlxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+VHJhY2tlciBibG9ja2VyPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG48VHJhbnM+XG57I2lmICRzdGVwPT0wfVxuPHNlY3Rpb24+XG5cdDxoMj5UcmFja2VyIGJsb2NrZXI6IFByaXZhY3kgQmFkZ2VyPC9oMj4gXG5cdDxwPkFyZSB5b3UgYmVpbmcgdHJhY2tlZCBvbiB0aGUgd2ViPyBBbG1vc3QgZGVmaW5pdGVseS4gXG5cdFx0VHJhY2tlcnMgYXJlIGluc3RhbGxlZCBvbiBtYW55IHdlYnNpdGVzIHRvIGxvZyB5b3VyIGJlaGF2aW9yLiBXaGlsZSBjb29raWVzIGFyZSB0aGUgbGl0dGxlIGlkZW50aWZpZXJzIGZvciB3ZWJzaXRlcyB0byByZWNvZ25pemUgeW91IHRocm91Z2ggbXVsdGlwbGUgdmlzaXRzLCB0cmFja2VycyB1c2UgdGhvc2UgY29va2llcyB0byBhbmFseXplIHlvdXIgYmVoYXZpb3IgYW5kIGJ1aWxkIHRoZWlyIHZhbHVhYmxlIHVzZXIgcHJvZmlsZXMuIFRyYWNrZXJzIHdpbGwgbG9nIHRoZSBzaXRlIHlvdSB2aXNpdCwgdGhlIGRhdGUgYW5kIHRpbWUsIGFuZCB5b3VyIGNvbXB1dGVyIHNldHRpbmdzIChtb3JlIHBvd2VyZnVsIHRyYWNrZXJzIGNhbiBldmVuIHdhdGNoIHlvdXIgbW91c2UgbW92ZW1lbnQpIGFsbCBvZiB0aGlzIHdpdGhvdXQgeW91ciBjb25zZW50LjwvcD5cblx0XHQ8ZGl2IGNsYXNzPVwiYnV0dG9uLWhvbGRlclwiPlxuXHRcdFx0PEJ0biB5ZWxsb3c9e3RydWV9PkNvbnRpbnVlPC9CdG4+XG5cdFx0PC9kaXY+XG48L3NlY3Rpb24+XG57OmVsc2V9XG48c2VjdGlvbj5cblx0PGgyPkluc3RhbGwgdGhlIFByaXZhY3kgQmFkZ2VyIGV4dGVuc2lvbi48L2gyPlxuXHQ8cD5Qcml2YWN5IEJhZGdlciBpcyBhIGZyZWUgYW5kIG9wZW4tc291cmNlIGJyb3dzZXIgZXh0ZW5zaW9uIGZvciBHb29nbGUgQ2hyb21lLCBNb3ppbGxhIGFuZCBGaXJlZm94IHRoYXQgYXV0b21hdGljYWxseSBkaXNjb3ZlcnMgdHJhY2tlcnMgYXMgeW91IGJyb3dzZSB0aGUgV2ViLiBUaGUgbG9uZ2VyIHlvdSBicm93c2Ugd2l0aCBQcml2YWN5IEJhZGdlciwgdGhlIGJldHRlciBpdCBnZXRzIGF0IHByb3RlY3RpbmcgeW91LCBzbyBzdGFydCBicm93c2luZyBhIGxpdHRsZSB0byB0ZWFjaCB5b3VyIEJhZGdlci48L3A+XG5cdDxkaXYgY2xhc3M9XCJidXR0b24taG9sZGVyXCI+XG5cdFx0PGEgaHJlZj0naHR0cHM6Ly9wcml2YWN5YmFkZ2VyLm9yZycgdGFyZ2V0PVwiX2JsYW5rXCI+PGJ1dHRvbiBvbjpjbGlja3xvbmNlPSd7ZGlzYWJsZX0nIGRpc2FibGVkPSd7ZGlzYWJsZWR9Jz5Eb3dubG9hZCBQcml2YWN5IEJhZGdlclxuXHRcdDwvYnV0dG9uPjwvYT5cblx0XHQ8Q29tcGxldGU+XG5cdFx0XHR7I2lmICFkaXNhYmxlZH1cblx0XHRcdEFscmVhZHkgSGF2ZSBpdFxuXHRcdFx0ezplbHNlfVxuXHRcdFx0SnVzdCBkb3dubG9hZGVkIGl0XG5cdFx0XHR7L2lmfVxuXHRcdDwvQ29tcGxldGU+XG5cdFx0PENvbXBsZXRlIHN1Y2Nlc3M9e2ZhbHNlfT5cblx0XHRcdE5vIFRoYW5rc1xuXHRcdDwvQ29tcGxldGU+XG5cdDwvZGl2PlxuPC9zZWN0aW9uPlxuey9pZn1cbjxCYWNrLz5cbjwvVHJhbnM+XG48c3R5bGU+XG4gICAuYnV0dG9uLWhvbGRlciB7XG5cdHdpZHRoOiAyN3Z3O1xuXHRkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgIH1cbiAgIGJ1dHRvbiB7XG5cdCAgIHBhZGRpbmc6IDEwcHggMjBweDtcblx0ICAgbWFyZ2luOiAxMHB4O1xuXHQgICBib3JkZXI6IGJsYWNrIHNvbGlkIDBweDtcblx0ICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgfVxuICAgYSB7XG5cdCAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgIH1cbjwvc3R5bGU+IiwiPHNjcmlwdD5cblx0aW1wb3J0IHsgb25Nb3VudCwgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblx0aW1wb3J0IFRyYW5zIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvVHJhbnNIZWxwLnN2ZWx0ZSc7XG5cdGltcG9ydCBDb21wbGV0ZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NvbXBsZXRlLnN2ZWx0ZScgLy9zZXQgc3VjY2Vzcz17ZmFsc2V9IGZvciBmYWlsdXJlXG5cdGltcG9ydCBCdG4gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CdG4uc3ZlbHRlJyAvL3NldCA8TmV4dCBxPXsyfT4gdG8gc2tpcCBtdWx0aXBsZSBzdGVwc1xuXHRpbXBvcnQgeyBjb3VudCwgc3RlcCwgcXVpelN0ZXBzIH0gZnJvbSAnLi4vLi4vc3RvcmUuanMnXG5cdGltcG9ydCBCYWNrIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQmFjay5zdmVsdGUnXG5cblx0Ly9zZXRzIGFzaWRlIGljb24gdG8gaW4gcHJvZ3Jlc3MgdmlhIHN0b3JlXG4gICAgb25Nb3VudChhc3luYygpID0+IHskcXVpelN0ZXBzWyRjb3VudF0uc3RhdHVzID0gMX0pO1xuXHRsZXQgbWFjID0gZmFsc2U7XG5cdGxldCBwYyA9IGZhbHNlO1xuPC9zY3JpcHQ+XG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5Eb21haW4gTmFtZSBTZXJ2aWNlPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG48VHJhbnM+XG57I2lmICRzdGVwPT0wfVxuPHNlY3Rpb24+XG5cdDxoMj5Eb21haW4gTmFtZSBTZXJ2ZXIgKEROUyk6IFF1YWQ5XG5cdDwvaDI+IFxuXHQ8cD5FdmVyeXRoaW5nIG9uIHRoZSBJbnRlcm5ldCwgaW5jbHVkaW5nIHdlYnNpdGVzLCBsaXZlIGF0IGEgbnVtZXJpY2FsIElQIGFkZHJlc3MuIFRoZSBEb21haW4gTmFtZSBTeXN0ZW0sIG9yIEROUywgdHJhbnNsYXRlcyB0aGVzZSBudW1lcmljYWwgSVAgYWRkcmVzc2VzIGludG8gaHVtYW4tcmVhZGFibGUgZG9tYWluIG5hbWVzIHRoYXQgd2UgYWxsIGtub3cgYW5kIHJlbWVtYmVyIChsaWtlIG1pbmR5b3VyZGF0YS5vcmcpLiBJZiB5b3VyIEROUyBzZXR0aW5ncyBhcmUgbm90IHdvcmtpbmcgY29ycmVjdGx5LCBvciB5b3XigJlyZSBzdGlsbCB1c2luZyBkZWZhdWx0cywgeW91IG1heSBiZSBhdCByaXNrIGZvciBjeWJlcmNyaW1lIGFuZCBwZXJmb3JtYW5jZSBpc3N1ZXMuIEFuZCwgdGhlIHdlYnNpdGVzIHlvdSB2aXNpdCBtYXkgYmUgY29sbGVjdGVkIGFuZCBzaGFyZWQgYnkgd2hhdGV2ZXIgZW50aXR5IG93bnMgdGhlIEROUyBzZXJ2aWNlLjwvcD5cblx0PGRpdiBjbGFzcz1cImJ1dHRvbi1ob2xkZXJcIj5cblx0XHQ8QnRuIGdyZWVuPXt0cnVlfT5Db250aW51ZTwvQnRuPlxuXHQ8L2Rpdj5cbjwvc2VjdGlvbj5cbns6ZWxzZX1cbjxzZWN0aW9uPlxuXHQ8aDI+U2V0dXAgUXVhZDk8L2gyPlxuXHQ8cD5RdWFkOSBpcyBhIGZyZWUsIG5vdC1mb3ItcHJvZml0IHNlY3VyaXR5IHNvbHV0aW9uIHRoYXQgdXNlcyB0aGUgRE5TIHRvIHByb3RlY3QgeW91ciBzeXN0ZW0gYWdhaW5zdCB0aGUgbW9zdCBjb21tb24gY3liZXIgdGhyZWF0cy4gTm90IG9ubHkgZG9lcyBpdCAgcHJlc2VydmUgYW5kIHByb3RlY3QgeW91ciBwcml2YWN5LCBpdCB3aWxsIGFsc28gaW1wcm92ZSB5b3VyIHN5c3RlbeKAmXMgcGVyZm9ybWFuY2UhIEl04oCZcyBsaWtlIGEgcGFpbmxlc3MgaW1tdW5pemF0aW9uIGZvciB5b3VyIGNvbXB1dGVyIGFuZCBkZXZpY2VzLjwvcD5cblx0PGRpdiBjbGFzczptYWMgb246Y2xpY2s9XCJ7KCkgPT4gbWFjID0gIW1hY31cIj5cblx0XHQ8ZGl2IGNsYXNzPVwiY2FyZXRcIj5cblx0XHRcdDxwPlNldHVwIFF1YWQ5IGZvciBNYWM6PC9wPlxuXHRcdFx0PHN2ZyB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG5cdFx0XHQ8cGF0aCBkPVwiTTE4Ljg4NSA3TDEyIDEzLjc5ODlMNS4xMTUgN0wzIDkuMDkzMTJMMTIgMThMMjEgOS4wOTMxMkwxOC44ODUgN1pcIiBmaWxsPVwid2hpdGVcIi8+XG5cdFx0XHQ8L3N2Zz5cblx0XHQ8L2Rpdj5cblx0XHR7I2lmIG1hY31cblx0XHQ8aWZyYW1lIHRpdGxlPVwiU2V0dXAgUXVhZDkgZm9yIG1hY1wiIHdpZHRoPVwiNTYwXCIgaGVpZ2h0PVwiMzE1XCIgc3JjPVwiaHR0cHM6Ly93d3cueW91dHViZS1ub2Nvb2tpZS5jb20vZW1iZWQvTk00QWRmRW5BbVlcIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvdz1cImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPlxuXHRcdHsvaWZ9XG5cdDwvZGl2PlxuXHRcdDxocj5cbiBcdDxkaXYgY2xhc3M6cGMgb246Y2xpY2s9XCJ7KCkgPT4gcGMgPSAhcGN9XCI+XG5cdFx0PGRpdiBjbGFzcz1cImNhcmV0XCI+XG5cdFx0XHQ8cD5TZXR1cCBRdWFkOSBmb3IgUEM6PC9wPlxuXHRcdFx0PHN2ZyB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG5cdFx0XHQ8cGF0aCBkPVwiTTE4Ljg4NSA3TDEyIDEzLjc5ODlMNS4xMTUgN0wzIDkuMDkzMTJMMTIgMThMMjEgOS4wOTMxMkwxOC44ODUgN1pcIiBmaWxsPVwid2hpdGVcIi8+XG5cdFx0XHQ8L3N2Zz5cblx0XHQ8L2Rpdj5cblx0XHQgeyNpZiBwY31cblx0XHQgPGlmcmFtZSB0aXRsZT1cIlNldHVwIFF1YWQ5IGZvciBXaW5kb3dzXCIgd2lkdGg9XCI1NjBcIiBoZWlnaHQ9XCIzMTVcIiBzcmM9XCJodHRwczovL3d3dy55b3V0dWJlLW5vY29va2llLmNvbS9lbWJlZC9hdWpVbDN5dDZuTVwiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93PVwiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmVcIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+XG4gICAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG5cdDxkaXYgY2xhc3M9XCJidXR0b24taG9sZGVyXCI+XG5cdFx0PENvbXBsZXRlPlNldHVwIENvbXBsZXRlPC9Db21wbGV0ZT5cblx0XHQ8Q29tcGxldGUgc3VjY2Vzcz17ZmFsc2V9PkRvbid0IGNhcmUsIGxldCB0aGVuIHNub29wPC9Db21wbGV0ZT5cblx0PC9kaXY+XG48L3NlY3Rpb24+XG57L2lmfVxuPEJhY2svPlxuPC9UcmFucz5cbjxzdHlsZT5cbiAgIC5idXR0b24taG9sZGVyIHtcblx0d2lkdGg6IDI3dnc7XG5cdGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xuICAgfVxuICAgYnV0dG9uIHtcblx0ICAgcGFkZGluZzogMTBweCAyMHB4O1xuXHQgICBtYXJnaW46IDEwcHg7XG5cdCAgIGJvcmRlcjogYmxhY2sgc29saWQgMHB4O1xuXHQgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICB9XG4gICAuY2FyZXR7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRmbGV4LWZsb3c6IHJvdyBub3dyYXA7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cdH1cbjwvc3R5bGU+IiwiPHNjcmlwdD5cblx0aW1wb3J0IHsgb25Nb3VudCwgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblx0aW1wb3J0IFRyYW5zIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvVHJhbnNIZWxwLnN2ZWx0ZSc7XG5cdGltcG9ydCBDb21wbGV0ZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NvbXBsZXRlLnN2ZWx0ZScgLy9zZXQgc3VjY2Vzcz17ZmFsc2V9IGZvciBmYWlsdXJlXG5cdGltcG9ydCBCdG4gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CdG4uc3ZlbHRlJyAvL3NldCA8TmV4dCBxPXsyfT4gdG8gc2tpcCBtdWx0aXBsZSBzdGVwc1xuXHRpbXBvcnQgeyBjb3VudCwgc3RlcCwgcXVpelN0ZXBzIH0gZnJvbSAnLi4vLi4vc3RvcmUuanMnXG5cdGltcG9ydCBCYWNrIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQmFjay5zdmVsdGUnXG5cblxuXHQvL3NldHMgYXNpZGUgaWNvbiB0byBpbiBwcm9ncmVzcyB2aWEgc3RvcmVcbiAgICBvbk1vdW50KGFzeW5jKCkgPT4geyRxdWl6U3RlcHNbJGNvdW50XS5zdGF0dXMgPSAxfSk7XG5cblx0bGV0IGN1cnJlbnQgPSAnaW5pdGlhbCc7XG48L3NjcmlwdD5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPkludGVybmV0IG9mIHRoaW5ncyggQWxleGEsIEhvbWUgZGV2aWNlcyk8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxUcmFucz5cbnsjaWYgJHN0ZXA9PTB9XG48c2VjdGlvbj5cblx0PGgyPkludGVybmV0IG9mIHRoaW5ncyggQWxleGEsIEhvbWUgZGV2aWNlcyk8L2gyPiBcblx0PHA+SXQgc2hvdWxkIGJlIGNsZWFyIGJ5IG5vdyB0aGF0IHlvdXIgZGFpbHkgaW50ZXJhY3Rpb25zIHRlY2hub2xvZ3ksIGxldCBhbG9uZSB5b3VyIHNtYXJ0IHNwZWFrZXIgYXJlIGFueXRoaW5nIGJ1dCBwcml2YXRlLiBBIHNlcmllcyBvZiBpbnZlc3RpZ2F0aXZlIHJlcG9ydHMgaGF2ZSBzaG93biB0aGF0IG90aGVyIHBlb3BsZSBhcmUgcmV2aWV3aW5nIHJlY29yZGluZ3Mgb3IgdHJhbnNjcmlwdHMgb2YgeW91ciBjb252ZXJzYXRpb25zLiBcblx0PC9wPlxuXHQ8cD5UaGUgdGhyZWUgYmlnIG1ha2VycyBvZiBzbWFydCBzcGVha2Vyc+KAlEFtYXpvbiwgQXBwbGUsIGFuZCBHb29nbGXigJRzYXkgdGhleSBkbyB0aGlzIHRvIGltcHJvdmUgdGhlIGRldmljZeKAmXMgcGVyZm9ybWFuY2UsIG5vdCBmb3IgdGFyZ2V0aW5nIGFkcy4gQnV0IHByaXZhY3kgYWR2b2NhdGVzIGFyZ3VlIHRoYXQsIHdpdGhvdXQgcHJpb3Igbm90aWNlLCBhbnkgbGlzdGVuaW5nIGZyb20gZW1wbG95ZWVzIGFuZCBjb250cmFjdG9ycyBpcyB1bmZhaXIgdG8gY29uc3VtZXJzLjwvcD5cblx0PGRpdiBjbGFzcz1cImJ1dHRvbi1ob2xkZXJcIj5cblx0XHQ8QnRuPkkgb3duIGEgc21hcnQgc3BlYWtlcjwvQnRuPlxuXHRcdDxCdG4gcT17Mn0+SSBkb24ndCBvd24gYSBzbWFydCBzcGVha2VyPC9CdG4+XG5cdDwvZGl2PlxuPC9zZWN0aW9uPlxuezplbHNlIGlmICRzdGVwPT0xfVxuPHNlY3Rpb24+XG5cdDxkaXYgY2xhc3M6YWN0aXZlPVwie2N1cnJlbnQgPT09ICdhbWF6b24nfVwiXG5cdG9uOmNsaWNrPVwieygpID0+IGN1cnJlbnQgPSAnYW1hem9uJ31cIj5cblx0XHQ8cD5BbWF6b24gQWxleGE8L3A+XG5cdFx0eyNpZiBjdXJyZW50PT09J2FtYXpvbid9XG5cdFx0PHVsPlxuXHRcdFx0PGxpPlN0ZXAgMTogT3BlbiB0aGUgQWxleGEgYXBwIG9uIHlvdXIgc21hcnRwaG9uZSBhbmQgdGFwIHRoZSBtZW51IGJ1dHRvbiBvbiB0aGUgdG9wLWxlZnQgb2YgdGhlIHNjcmVlbi48L2xpPlxuXHRcdFx0PGxpPlN0ZXAgMjogU2VsZWN0IFNldHRpbmdzID4gQWxleGEgUHJpdmFjeSA+IE1hbmFnZSBIb3cgWW91ciBEYXRhIEltcHJvdmVzIEFsZXhhLjwvbGk+XG5cdFx0XHQ8bGk+U3RlcCAzOiBTd2l0Y2ggb2ZmIHRoZSB0b2dnbGUgbmV4dCB0byBIZWxwIEltcHJvdmUgQW1hem9uIFNlcnZpY2VzIGFuZCBEZXZlbG9wIE5ldyBGZWF0dXJlcy48L2xpPlxuXHRcdFx0PGxpPlN0ZXAgNDogVGhlbiBzd2l0Y2ggb2ZmIHRoZSB0b2dnbGUgbmV4dCB0byB5b3VyIG5hbWUgdW5kZXIgVXNlIE1lc3NhZ2VzIHRvIEltcHJvdmUgVHJhbnNjcmlwdGlvbnMuPC9saT5cblx0XHQ8L3VsPlxuXHRcdHsvaWZ9XG5cdDwvZGl2PlxuXHRcblx0PGhyPlxuXHQ8ZGl2IGNsYXNzOmFjdGl2ZT1cIntjdXJyZW50ID09PSAnZ29vZ2xlJ31cIlxuXHRvbjpjbGljaz1cInsoKSA9PiBjdXJyZW50ID0gJ2dvb2dsZSd9XCI+XG5cdFx0PHA+R29vZ2xlIEFzc2lzdGFudDwvcD5cblx0XHR7I2lmIGN1cnJlbnQ9PT0nZ29vZ2xlJ31cblx0XHQ8dWw+XG5cdFx0XHQ8bGk+U3RlcCAxOiBPcGVuIHRoZSBBbGV4YSBhcHAgb24geW91ciBzbWFydHBob25lIGFuZCB0YXAgdGhlIG1lbnUgYnV0dG9uIG9uIHRoZSB0b3AtbGVmdCBvZiB0aGUgc2NyZWVuLjwvbGk+XG5cdFx0XHQ8bGk+U3RlcCAyOiBTZWxlY3QgU2V0dGluZ3MgPiBBbGV4YSBQcml2YWN5ID4gTWFuYWdlIEhvdyBZb3VyIERhdGEgSW1wcm92ZXMgQWxleGEuPC9saT5cblx0XHRcdDxsaT5TdGVwIDM6IFN3aXRjaCBvZmYgdGhlIHRvZ2dsZSBuZXh0IHRvIEhlbHAgSW1wcm92ZSBBbWF6b24gU2VydmljZXMgYW5kIERldmVsb3AgTmV3IEZlYXR1cmVzLjwvbGk+XG5cdFx0XHQ8bGk+U3RlcCA0OiBUaGVuIHN3aXRjaCBvZmYgdGhlIHRvZ2dsZSBuZXh0IHRvIHlvdXIgbmFtZSB1bmRlciBVc2UgTWVzc2FnZXMgdG8gSW1wcm92ZSBUcmFuc2NyaXB0aW9ucy48L2xpPlxuXHRcdDwvdWw+XG5cdFx0ey9pZn1cblx0PC9kaXY+XG5cdFxuXHQ8aHI+XG5cdDxkaXYgY2xhc3M6YWN0aXZlPVwie2N1cnJlbnQgPT09ICdhcHBsZSd9XCJcblx0b246Y2xpY2s9XCJ7KCkgPT4gY3VycmVudCA9ICdhcHBsZSd9XCI+XG5cdFx0PHA+QXBwbGUgU2lyaTwvcD5cblx0XHR7I2lmIGN1cnJlbnQ9PT0nYXBwbGUnfVxuXHRcdDx1bD5cblx0XHRcdDxsaT5TdGVwIDE6IE9wZW4gdGhlIEFsZXhhIGFwcCBvbiB5b3VyIHNtYXJ0cGhvbmUgYW5kIHRhcCB0aGUgbWVudSBidXR0b24gb24gdGhlIHRvcC1sZWZ0IG9mIHRoZSBzY3JlZW4uPC9saT5cblx0XHRcdDxsaT5TdGVwIDI6IFNlbGVjdCBTZXR0aW5ncyA+IEFsZXhhIFByaXZhY3kgPiBNYW5hZ2UgSG93IFlvdXIgRGF0YSBJbXByb3ZlcyBBbGV4YS48L2xpPlxuXHRcdFx0PGxpPlN0ZXAgMzogU3dpdGNoIG9mZiB0aGUgdG9nZ2xlIG5leHQgdG8gSGVscCBJbXByb3ZlIEFtYXpvbiBTZXJ2aWNlcyBhbmQgRGV2ZWxvcCBOZXcgRmVhdHVyZXMuPC9saT5cblx0XHRcdDxsaT5TdGVwIDQ6IFRoZW4gc3dpdGNoIG9mZiB0aGUgdG9nZ2xlIG5leHQgdG8geW91ciBuYW1lIHVuZGVyIFVzZSBNZXNzYWdlcyB0byBJbXByb3ZlIFRyYW5zY3JpcHRpb25zLjwvbGk+XG5cdFx0PC91bD5cblx0XHR7L2lmfVxuXHQ8L2Rpdj5cblx0XG5cdDxocj5cblx0PGRpdiBjbGFzcz1cImJ1dHRvbi1ob2xkZXJcIj5cblx0XHQ8aDM+RGlkIHlvdSBzZXR1cCBwcml2YWN5IG1vZGU8L2gzPlxuXHRcdDxDb21wbGV0ZT5ZZXMsIEkgRGlkPC9Db21wbGV0ZT5cblx0XHQ8Q29tcGxldGUgc3VjY2Vzcz17ZmFsc2V9Pk5vIEkgZG9uJ3Qgd2FudCB0bzwvQ29tcGxldGU+XG5cdDwvZGl2PlxuPC9zZWN0aW9uPlxuezplbHNlfVxuXHQ8c2VjdGlvbj5cblx0XHQ8aDI+SG9vb3JheSE8L2gyPlxuXHRcdDxwPk9uZSBsZXNzIHdheSBwZW9wbGUgY2FuIHNub29wIG9uIHlvdXIgcHJpdmFjeS48L3A+XG5cdFx0PENvbXBsZXRlPk5leHQgQ2hhbGxlbmdlPC9Db21wbGV0ZT5cblx0PC9zZWN0aW9uPlxuey9pZn1cbjxCYWNrLz5cbjwvVHJhbnM+XG48c3R5bGU+XG4gICAuYnV0dG9uLWhvbGRlciB7XG5cdHdpZHRoOiAyN3Z3O1xuXHRkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgIH1cbjwvc3R5bGU+IiwiPHNjcmlwdD5cblx0aW1wb3J0IHsgb25Nb3VudCwgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblx0aW1wb3J0IFRyYW5zIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvVHJhbnNIZWxwLnN2ZWx0ZSc7XG5cdGltcG9ydCBDb21wbGV0ZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NvbXBsZXRlLnN2ZWx0ZScgLy9zZXQgc3VjY2Vzcz17ZmFsc2V9IGZvciBmYWlsdXJlXG5cdGltcG9ydCBCdG4gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CdG4uc3ZlbHRlJyAvL3NldCA8TmV4dCBxPXsyfT4gdG8gc2tpcCBtdWx0aXBsZSBzdGVwc1xuXHRpbXBvcnQgeyBjb3VudCwgc3RlcCwgcXVpelN0ZXBzIH0gZnJvbSAnLi4vLi4vc3RvcmUuanMnXG5cdGltcG9ydCBCYWNrIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQmFjay5zdmVsdGUnXG5cblx0Ly9zZXRzIGFzaWRlIGljb24gdG8gaW4gcHJvZ3Jlc3MgdmlhIHN0b3JlXG5cdG9uTW91bnQoYXN5bmMoKSA9PiB7JHF1aXpTdGVwc1skY291bnRdLnN0YXR1cyA9IDE7XG5cdFx0fSk7XG5cbjwvc2NyaXB0PlxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+TG9jYXRpb24gVHJhY2tpbmc8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxUcmFucz5cbnsjaWYgJHN0ZXA9PTB9XG48c2VjdGlvbj5cblx0PGgxPklzIHlvdXIgcGhvbmUgdHJhY2tpbmcgeW91ciBldmVyeSBtb3ZlPyBQcm9iYWJseS48L2gxPiBcblx0XHQ8cD5QZXJ2YXNpdmUgdHJhY2tpbmcgb2YgbG9jYXRpb24gYXQgdGhlIHZlcnkgbGVhc3Qgcmlza3MgcHV0dGluZyB5b3UgYXQgYSBkaXNhZHZhbnRhZ2UgYXMgYSBjb25zdW1lci4gQ2VydGFpbmx5IGlmIHlvdSBsaXZlIHNvbWV3aGVyZSB3aXRob3V0IGEgcHJvcGVyIHJlZ3VsYXRvcnkgZnJhbWV3b3JrIGZvciBwcml2YWN5LiBJdOKAmXMgYWxzbyB3b3J0aCBiZWFyaW5nIGluIG1pbmQgaG93IGxheCB0ZWNoIGdpYW50cyBjYW4gYmUgd2hlcmUgbG9jYXRpb24gcHJpdmFjeSBpcyBjb25jZXJuZWQg4oCUIHdoZXRoZXIgaXTigJlzIFViZXLigJlzIGluZmFtb3VzIOKAmGdvZCB2aWV34oCZIHRvb2wgb3IgU25hcGNoYXQgbGVha2luZyBzY2hvb2xraWRz4oCZIGxvY2F0aW9uIG9yIFN0cmF2YSBhY2NpZGVudGFsbHkgcmV2ZWFsaW5nIHRoZSBsb2NhdGlvbnMgb2YgbWlsaXRhcnkgYmFzZXMuIFRoZWlyIHJlY29yZCBpcyBwcmV0dHkgdGVycmlibGUuIDwvcD5cdFxuXHQ8aDM+V2hhdCBtb2JpbGUgZGV2aWNlIGRvIHlvdSB1c2U/PC9oMz5cblx0XHQ8ZGl2IGNsYXNzPVwiYnV0dG9uLWhvbGRlclwiPlxuXHRcdFx0PEJ0bj5pT1M8L0J0bj5cblx0XHRcdDxCdG4+QW5kcm9pZDwvQnRuPlxuXHRcdDwvZGl2PlxuPC9zZWN0aW9uPlxuezplbHNlIGlmICRzdGVwPT0xfVxuPHNlY3Rpb24+XG5cdDxoMj5UdXJuIGxvY2FpdG9uIG9mZiBvbiBJT1MgZGV2aWNlPC9oMj5cblx0PHA+U3RlcCAxLiBHbyB0byBTZXR0aW5ncyA+IFByaXZhY3kgPiBMb2NhdGlvbiBTZXJ2aWNlcy48L3A+XG5cdDxwPlN0ZXAgMi4gTWFrZSBzdXJlIHRoYXQgTG9jYXRpb24gU2VydmljZXMgaXMgb24uPC9wPlxuXHQ8cD5TdGVwIDMuIFNjcm9sbCBkb3duIHRvIGZpbmQgdGhlIGFwcC48L3A+XG5cdDxwPlN0ZXAgNC4gVGFwIHRoZSBhcHAgYW5kIHNlbGVjdCBhbiBvcHRpb246PC9wPlxuXHQ8dWw+XG5cdFx0PGxpPk5ldmVyOiBQcmV2ZW50cyBhY2Nlc3MgdG8gTG9jYXRpb24gU2VydmljZXMgaW5mb3JtYXRpb24uPC9saT5cblx0XHQ8bGk+QXNrIE5leHQgVGltZTogVGhpcyBhbGxvd3MgeW91IHRvIGNob29zZSBBbHdheXMgV2hpbGUgVXNpbmcgQXBwLCBBbGxvdyBPbmNlLCBvciBEb24ndCBBbGxvdy48L2xpPlxuXHRcdDxsaT5XaGlsZSBVc2luZyB0aGUgQXBwOiBBbGxvd3MgYWNjZXNzIHRvIExvY2F0aW9uIFNlcnZpY2VzIG9ubHkgd2hlbiB0aGUgYXBwIG9yIG9uZSBvZiBpdHMgZmVhdHVyZXMgaXMgdmlzaWJsZSBvbiBzY3JlZW4uIElmIGFuIGFwcCBpcyBzZXQgdG8gV2hpbGUgVXNpbmcgdGhlIEFwcCwgeW91IG1pZ2h0IHNlZSB5b3VyIHN0YXR1cyBiYXIgdHVybiBibHVlIHdpdGggYSBtZXNzYWdlIHRoYXQgYW4gYXBwIGlzIGFjdGl2ZWx5IHVzaW5nIHlvdXIgbG9jYXRpb24uPC9saT5cblx0XHQ8bGk+QWx3YXlzOiBBbGxvd3MgYWNjZXNzIHRvIHlvdXIgbG9jYXRpb24gZXZlbiB3aGVuIHRoZSBhcHAgaXMgaW4gdGhlIGJhY2tncm91bmQuPC9saT5cblx0PC91bD5cblx0PGgzPkRpZCB5b3UgdHVybiBvZmYgbG9jYXRpb24gb24geW91ciBkZXZpY2U8L2gzPlxuXHQ8ZGl2IGNsYXNzPVwiYnV0dG9uLWhvbGRlclwiPlxuXHRcdDxDb21wbGV0ZT5ZZXMsIEkgZGlkPC9Db21wbGV0ZT5cblx0XHQ8Q29tcGxldGUgc3VjY2Vzcz17ZmFsc2V9Pk5vLCBJIGRpZG4ndDwvQ29tcGxldGU+XG5cdDwvZGl2PlxuPC9zZWN0aW9uPlxuezplbHNlfVxuPHNlY3Rpb24+XG5cdDxoMj5UdXJuIGxvY2FpdG9uIG9mZiBvbiBhbmQgQW5kcm9pZCBEZXZpY2U8L2gyPlxuXHQ8cD5TdGVwIDEuIEdvIHRvIFNldHRpbmdzID4gUHJpdmFjeSA+IExvY2F0aW9uIFNlcnZpY2VzLjwvcD5cblx0PHA+U3RlcCAyLiBNYWtlIHN1cmUgdGhhdCBMb2NhdGlvbiBTZXJ2aWNlcyBpcyBvbi48L3A+XG5cdDxwPlN0ZXAgMy4gU2Nyb2xsIGRvd24gdG8gZmluZCB0aGUgYXBwLjwvcD5cblx0PHA+U3RlcCA0LiBUYXAgdGhlIGFwcCBhbmQgc2VsZWN0IGFuIG9wdGlvbjo8L3A+XG5cdDx1bD5cblx0XHQ8bGk+TmV2ZXI6IFByZXZlbnRzIGFjY2VzcyB0byBMb2NhdGlvbiBTZXJ2aWNlcyBpbmZvcm1hdGlvbi48L2xpPlxuXHRcdDxsaT5Bc2sgTmV4dCBUaW1lOiBUaGlzIGFsbG93cyB5b3UgdG8gY2hvb3NlIEFsd2F5cyBXaGlsZSBVc2luZyBBcHAsIEFsbG93IE9uY2UsIG9yIERvbid0IEFsbG93LjwvbGk+XG5cdFx0PGxpPldoaWxlIFVzaW5nIHRoZSBBcHA6IEFsbG93cyBhY2Nlc3MgdG8gTG9jYXRpb24gU2VydmljZXMgb25seSB3aGVuIHRoZSBhcHAgb3Igb25lIG9mIGl0cyBmZWF0dXJlcyBpcyB2aXNpYmxlIG9uIHNjcmVlbi4gSWYgYW4gYXBwIGlzIHNldCB0byBXaGlsZSBVc2luZyB0aGUgQXBwLCB5b3UgbWlnaHQgc2VlIHlvdXIgc3RhdHVzIGJhciB0dXJuIGJsdWUgd2l0aCBhIG1lc3NhZ2UgdGhhdCBhbiBhcHAgaXMgYWN0aXZlbHkgdXNpbmcgeW91ciBsb2NhdGlvbi48L2xpPlxuXHRcdDxsaT5BbHdheXM6IEFsbG93cyBhY2Nlc3MgdG8geW91ciBsb2NhdGlvbiBldmVuIHdoZW4gdGhlIGFwcCBpcyBpbiB0aGUgYmFja2dyb3VuZC48L2xpPlxuXHQ8L3VsPlxuXHQ8aDM+RGlkIHlvdSB0dXJuIG9mZiBsb2NhdGlvbiBvbiB5b3VyIGRldmljZTwvaDM+XG5cdDxkaXYgY2xhc3M9XCJidXR0b24taG9sZGVyXCI+XG5cdFx0PENvbXBsZXRlPlllcywgSSBkaWQ8L0NvbXBsZXRlPlxuXHRcdDxDb21wbGV0ZSBzdWNjZXNzPXtmYWxzZX0+Tm8sIEkgZGlkbid0PC9Db21wbGV0ZT5cblx0PC9kaXY+XG48L3NlY3Rpb24+XG57L2lmfVxuPEJhY2svPlxuPC9UcmFucz5cbjxzdHlsZT5cblx0c2VjdGlvbiB7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdH1cbiAgIC5idXR0b24taG9sZGVyIHtcblx0d2lkdGg6IDI3dnc7XG5cdGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xuICAgfVxuPC9zdHlsZT4iLCI8c2NyaXB0PlxuXHRleHBvcnQgbGV0IHNlZ21lbnQ7XG48L3NjcmlwdD5cblxuXG48c3R5bGU+XG5cdG5hdiB7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRmbGV4LWZsb3c6IHJvdyBub3dyYXA7XG5cdFx0aGVpZ2h0OiA1MHB4O1xuXHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICMzMDM1Mzg7XG5cdFx0Lypib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgyNTUsNjIsMCwwLjEpOyovXG5cdFx0Zm9udC13ZWlnaHQ6IDMwMDtcblx0XHRwYWRkaW5nOiAwIDFlbTtcblx0XHRwb3NpdGlvbjogc3RpY2t5O1xuICAgIFx0dG9wOiAwcHg7XG5cdFx0bGVmdDogMHB4O1xuXHRcdHotaW5kZXg6IDE7XG5cdH1cblx0dWwge1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0bGlzdC1zdHlsZTogbm9uZTtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuXHRcdG1hcmdpbjogMDtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdGNvbG9yOiAjYzdjN2M3O1xuXHR9XG5cdGltZyB7XG5cdFx0LypkaXNwbGF5OiBibG9jaztcblx0XHRmbG9hdDogbGVmdDsqL1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0anVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuXHRcdGhlaWdodDogMzBweDtcblx0XHRtYXJnaW4tbGVmdDogMjVweDtcblx0fVxuXHRsaXtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdG1hcmdpbjogMHB4IDIwcHggMHB4IDIwcHg7XG5cdFx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcblx0fVxuXG5cdFthcmlhLWN1cnJlbnRdIHtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHR9XG5cblx0W2FyaWEtY3VycmVudF06OmFmdGVyIHtcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0Y29udGVudDogJyc7XG5cdFx0d2lkdGg6IGNhbGMoMTAwJSAtIDFlbSk7XG5cdFx0aGVpZ2h0OiAycHg7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjojZTc0ZTQ1O1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdC8qYm90dG9tOiAtMXB4OyovXG5cdH1cblx0YSB7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRwYWRkaW5nOiAxZW0gMC41ZW07XG5cdFx0dGV4dC1kZWNvcmF0aW9uOiBub25lO1xuXHRcdG1hcmdpbjogMmVtLCAwZW07XG5cblx0fVxuPC9zdHlsZT5cblxuPG5hdj5cblx0PGEgaHJlZj0nL2hvbWUnPjxpbWcgIHNyYz0nLi9NWURsb2dvX25hdi5wbmcnIGFsdD1cIk1pbmQgeW91ciBEYXRhIGxvZ29cIj48L2E+XG5cdDx1bCBpZD1cIm5hdmlnYXRpb25cIj5cblx0XHQ8bGk+PGEgYXJpYS1jdXJyZW50PVwie3NlZ21lbnQgPT09IHVuZGVmaW5lZCA/ICdwYWdlJyA6IHVuZGVmaW5lZH1cIiBocmVmPVwiLlwiPmhvbWU8L2E+PC9saT5cblx0XHQ8bGk+PGEgYXJpYS1jdXJyZW50PVwie3NlZ21lbnQgPT09ICdxdWl6JyA/ICdwYWdlJyA6IHVuZGVmaW5lZH1cIiBocmVmPVwicXVpelwiPnF1aXo8L2E+PC9saT5cblx0XHQ8bGk+PGEgYXJpYS1jdXJyZW50PVwie3NlZ21lbnQgPT09ICdhYm91dCcgPyAncGFnZScgOiB1bmRlZmluZWR9XCIgaHJlZj1cImFib3V0XCI+YWJvdXQ8L2E+PC9saT5cblxuXHRcdDwhLS0gZm9yIHRoZSBibG9nIGxpbmssIHdlJ3JlIHVzaW5nIHJlbD1wcmVmZXRjaCBzbyB0aGF0IFNhcHBlciBwcmVmZXRjaGVzXG5cdFx0ICAgICB0aGUgYmxvZyBkYXRhIHdoZW4gd2UgaG92ZXIgb3ZlciB0aGUgbGluayBvciB0YXAgaXQgb24gYSB0b3VjaHNjcmVlbiAtLT5cblx0PCEtLVx0PGxpPjxhIHJlbD1wcmVmZXRjaCBhcmlhLWN1cnJlbnQ9XCJ7c2VnbWVudCA9PT0gJ2Jsb2cnID8gJ3BhZ2UnIDogdW5kZWZpbmVkfVwiIGhyZWY9XCJibG9nXCI+YmxvZzwvYT48L2xpPiAtLT5cblx0PC91bD5cbjwvbmF2PlxuIiwiPHNjcmlwdD5cbiAgICAvL3RvdGFsIHRpbWUgZm9yIGNvdW50ZG93blxuaW1wb3J0IHsgdHdlZW5lZCB9IGZyb20gJ3N2ZWx0ZS9tb3Rpb24nO1xuaW1wb3J0IHsgY3ViaWNPdXQgfSBmcm9tICdzdmVsdGUvZWFzaW5nJztcbmltcG9ydCBDaGVjayBmcm9tICcuL0NoZWNrLnN2ZWx0ZSc7XG5pbXBvcnQgeyBxdWl6U3RlcHMsIHRpbWVyQWN0aXZlLCBwcm9ncmVzcywgY291bnQgfSBmcm9tICcuLi9zdG9yZS5qcyc7XG5pbXBvcnQgeyBhZnRlclVwZGF0ZSB9IGZyb20gJ3N2ZWx0ZSc7XG4vL2NvbnNvbGUubG9nKCRxdWl6U3RlcHMpO1xubGV0IHN0YXJ0PSAzMCAqIDYwO1xubGV0IHRpbWVyID0gdHdlZW5lZChzdGFydCk7XG4gIHNldEludGVydmFsKCgpID0+IHtcbiAgICBpZiAoJHRpbWVyID4gMCAmJiAkdGltZXJBY3RpdmUpICR0aW1lci0tO1xuICB9LCAxMDAwKTtcblxuICAkOiBtaW51dGVzID0gTWF0aC5mbG9vcigkdGltZXIgLyA2MCk7XG4gICQ6IG1pbm5hbWUgPSBtaW51dGVzID4gMSA/IFwibWluc1wiIDogXCJtaW5cIjtcbiAgJDogc2Vjb25kcyA9IE1hdGguZmxvb3IoJHRpbWVyIC0gbWludXRlcyAqIDYwKS50b0xvY2FsZVN0cmluZygnZW4nLCB7bWluaW11bUludGVnZXJEaWdpdHM6Mix1c2VHcm91cGluZzpmYWxzZX0pXG5cbmxldCBiZzEgPSB0cnVlO1xubGV0IGJnMiA9IGZhbHNlO1xubGV0IGJnMyA9IGZhbHNlO1xuXG5hZnRlclVwZGF0ZSgoKSA9PntcbiAgICBpZigkY291bnQgPiAzKXtiZzEgPSBmYWxzZTsgYmcyID0gdHJ1ZTt9XG57aWYoICRjb3VudCAgPiA3KXtiZzI9IGZhbHNlOyBiZzM9IHRydWU7fVxufX0pXG48L3NjcmlwdD5cbjxhc2lkZSBjbGFzczpiZzEgY2xhc3M6YmcyIGNsYXNzOmJnMz5cbiAgICA8c2VjdGlvbiBpZD1cInRpbWVyXCI+XG4gICAgICAgPGRpdj5UaW1lIFJlbWFpbmluZzo8L2Rpdj4gPGRpdiBpZD0nbWludXRlcycgc3R5bGU9J3doaXRlLXNwYWNlOm5vd3JhcDsnPnttaW51dGVzfTp7c2Vjb25kc308L2Rpdj4gXG4gICAgICAgPGRpdiBpZD0nY2hhbGxlbmdlLW5hbWUnPlxuICAgICAgICA8c2xvdD5cblxuICAgICAgICA8L3Nsb3Q+XG4gICAgPC9kaXY+XG4gICAgPC9zZWN0aW9uPlxuICAgIDxkaXYgaWQ9XCJwcm9ncmVzcy1ob2xkZXJcIj5cbiAgICA8c2VjdGlvbiBjbGFzcz0nZG9uZSc+XG4gICAgICAgIHsjZWFjaCAkcXVpelN0ZXBzIGFzIGNoYWxsZW5nZX1cbiAgICAgICAgICAgIHsjaWYgY2hhbGxlbmdlLnR5cGUgIT0gJ2NoZWNrcG9pbnQnfVxuICAgICAgICA8Q2hlY2sgYWN0aXZlPXtjaGFsbGVuZ2Uuc3RhdHVzfS8+IFxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgey9lYWNofSAgICBcbiAgICA8L3NlY3Rpb24+XG4gICAgPHByb2dyZXNzIHZhbHVlPXskcHJvZ3Jlc3N9IG1heD1cIjEwMFwiIGNsYXNzOmJnMSBjbGFzczpiZzIgY2xhc3M6YmczPjwvcHJvZ3Jlc3M+XG4gICAgPC9kaXY+XG48L2FzaWRlPlxuPHN0eWxlPlxuICAgIGFzaWRlIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB3aWR0aDogMzMuNzV2dzsgXG4gICAgICAgIGhlaWdodDogODZ2aDsgXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzODQyNEQ7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gICAgICAgIGJvcmRlcjogMHB4O1xuICAgICAgICBtYXJnaW46IDEycHggMHB4IDQwcHggMjBweDtcbiAgICAgICAgbWluLXdpZHRoOiAzM3Z3O1xuICAgICAgICBwb3NpdGlvbjogc3RpY2t5O1xuICAgICAgICB0b3A6IDUwcHg7XG4gICAgfVxuICAgICN0aW1lciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogcm93IHdyYXA7IFxuICAgICAgICBtYXJnaW4tYmxvY2stc3RhcnQ6IDMwcHg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgICAjcmVtYWluaW5nIHtcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgICBwYWRkaW5nOiAyMHB4IDBweCAyMHB4IDBweDtcblxuICAgIH1cbiAgICAjbWludXRlcyB7XG4gICAgICAgIGNvbG9yOndoaXRlO1xuICAgICAgICBiYWNrZ3JvdW5kOiAjMEYyMDMzO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgIG1heC13aWR0aDogMTUwcHg7XG4gICAgICAgIGhlaWdodDogNjBweDtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBmb250LXNpemU6IDI0cHg7XG4gICAgICAgIG1hcmdpbjogOHB4IDIwcHg7IFxuICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIHBhZGRpbmc6IDJweCAzMHB4OyBcblxuICAgIH1cbiAgICAuZG9uZSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgd2lkdGg6IDk1JTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweFxuICAgIH1cbiAgICAubG9jayB7XG4gICAgICAgIFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoLi4vY2hlY2tlZC5zdmcpIG5vLXJlcGVhdDtcbiAgICAgICAgd2lkdGg6IDIwcHg7XG4gICAgICAgIG1hcmdpbjogNXB4O1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG5cbiAgICB9XG4gICAgLmVsbGlwc2Uge1xuICAgICAgICB3aWR0aDozcHg7XG4gICAgICAgIGhlaWdodDozcHg7XG4gICAgICAgIG1hcmdpbjogM3B4O1xuICAgIH1cbiAgICBwcm9ncmVzc3tcbiAgICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuXHQgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgd2lkdGg6IDg2JTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBib3R0b206IDQuN3ZoO1xuICAgICAgICBoZWlnaHQ6IDZweDtcbiAgICAgICAgei1pbmRleDogLTE7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAzMXB4O1xuICAgIH1cbiAgICBwcm9ncmVzczo6LXdlYmtpdC1wcm9ncmVzcy1iYXIge1xuXHQgICAgYmFja2dyb3VuZDogIzMwMzUzODtcblx0fVxuICAgIHByb2dyZXNzLmJnMTo6LXdlYmtpdC1wcm9ncmVzcy12YWx1ZSB7XG4gICAgICAgIGJhY2tncm91bmQ6ICM3NGVmN2I7XG4gICAgfVxuICAgIHByb2dyZXNzLmJnMjo6LXdlYmtpdC1wcm9ncmVzcy12YWx1ZSB7XG4gICAgICAgIGJhY2tncm91bmQ6ICNGMUMzMzA7XG4gICAgfVxuICAgIHByb2dyZXNzLmJnMzo6LXdlYmtpdC1wcm9ncmVzcy12YWx1ZSB7XG4gICAgICAgIGJhY2tncm91bmQ6ICNFOTQwNDA7XG4gICAgfVxuICAgIC5iZzEge1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4uL2JnLWdyb3VwMS5wbmcnKTtcbiAgICAgICAgYmFja2dyb3VuZC1ibGVuZC1tb2RlOiBub3JtYWw7XG4gICAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcDtcbiAgICAgICAgY29sb3I6ICM3NGVmN2I7XG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICB9XG4gICAgLmJnMiB7XG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vYmctZ3JvdXAyLnBuZycpO1xuICAgICAgICBiYWNrZ3JvdW5kLWJsZW5kLW1vZGU6IG5vcm1hbDtcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogdG9wO1xuICAgICAgICBjb2xvcjogI0YxQzMzMDtcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgIH1cbiAgICAuYmczIHtcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuLi9iZy1ncm91cDMucG5nJyk7XG4gICAgICAgIGJhY2tncm91bmQtYmxlbmQtbW9kZTogbm9ybWFsO1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiB0b3A7XG4gICAgICAgIGNvbG9yOiAjRTk0MDQwO1xuICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgfVxuICAgICNwcm9ncmVzcy1ob2xkZXIge1xuICAgICAgICB3aWR0aDogODAlO1xuICAgIH1cbiAgICAjY2hhbGxlbmdlLW5hbWUge1xuICAgICAgICBmb250LXNpemU6IDQwcHg7XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICB9XG4gICAgXG48L3N0eWxlPlxuPCEtLVxuXG4gICAgICAgIFxuPGRpdiBjbGFzcz0nZG9uZSc+XG4gICAge2lmIGFjdGl2ZX1cbiAgICA8aW1nIHNyYz0nLi9sb2NrLWFjdGl2ZS5zdmcnIGFsdD1cImNvbXBsZXRlZFwiIGNsYXNzPSdhY3RpdmUgbG9jaycgLz5cbiAgICBcbiAgICAgICAgPGltZyBzcmM9Jy4vRWxsaXBzZS1hY3RpdmUucG5nJyBhbHQ9XCJjb21wbGV0ZWRcIiBjbGFzcz0nZWxsaXBzZSBhY3RpdmUnIC8+XG4gICAgICAgIDxpbWcgc3JjPScuL0VsbGlwc2UtaW5hY3RpdmUucG5nJyBhbHQ9XCJjb21wbGV0ZWRcIiBjbGFzcz0nZWxsaXBzZSBpbmFjdGl2ZScgLz5cbjwvZGl2PlxuPC9kaXY+LS0+IiwiPHNjcmlwdD5cbmltcG9ydCB7IGNvdW50LCBzdGVwLCBxdWl6U3RlcHMsIHByb2dyZXNzIH0gZnJvbSAnLi4vc3RvcmUuanMnXG5leHBvcnQgbGV0IHN1Y2Nlc3MgPSB0cnVlO1xuZXhwb3J0IGxldCBwID0gNy42O1xuZXhwb3J0IGxldCBncmVlbiA9IGZhbHNlO1xuZXhwb3J0IGxldCB5ZWxsb3cgPSBmYWxzZTtcbmV4cG9ydCBsZXQgcmVkID0gZmFsc2U7XG4vL3NldHMgY3VycmVudCBpY29uIGZvciBzaWRlYmFyXG5mdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gICAgICAgICRxdWl6U3RlcHNbJGNvdW50XS5jb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICRxdWl6U3RlcHNbJGNvdW50XS5zdGF0dXMgPSAyO1xuICAgICAgICBjb3VudC51cGRhdGUobiA9PiBuICsgMSlcbiAgICAgICAgcHJvZ3Jlc3MudXBkYXRlKG4gPT4gbis9cClcbiAgICAgICAgc3RlcC5zZXQoMCk7XG59XG5mdW5jdGlvbiBpbmNvbXBsZXRlKCkge1xuICAgICAgICAkcXVpelN0ZXBzWyRjb3VudF0uY29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgJHF1aXpTdGVwc1skY291bnRdLnN0YXR1cyA9IDA7XG4gICAgICAgIGNvdW50LnVwZGF0ZShuID0+IG4gKyAxKVxuICAgICAgICBwcm9ncmVzcy51cGRhdGUobiA9PiBuKz1wKVxuICAgICAgICBzdGVwLnNldCgwKTtcbn1cbjwvc2NyaXB0PlxueyNpZiBzdWNjZXNzfVxuICAgIDxidXR0b24gb246Y2xpY2s9e2luY3JlbWVudH0gY2xhc3M6Z3JlZW4gY2xhc3M6eWVsbG93IGNsYXNzOnJlZD5cbiAgICAgICAgPHNsb3Q+XG5cbiAgICAgICAgPC9zbG90PlxuICAgIDwvYnV0dG9uPlxuezplbHNlfVxuICAgIDxidXR0b24gb246Y2xpY2s9e2luY29tcGxldGV9IGNsYXNzOmdyZWVuIGNsYXNzOnllbGxvdyBjbGFzczpyZWQ+XG4gICAgICAgIDxzbG90PlxuXG4gICAgICAgIDwvc2xvdD5cbiAgICA8L2J1dHRvbj5cbnsvaWZ9XG4gICAgICAgXG48c3R5bGU+XG4gICAgYnV0dG9uIHtcbiAgICAgICAgcGFkZGluZzogMTBweCAyMHB4O1xuXHRcdFx0bWFyZ2luOiAxMHB4O1xuXHRcdFx0Ym9yZGVyOiBibGFjayBzb2xpZCAwcHg7XG5cdFx0XHRib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgfVxuICAgIC5ncmVlbiB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM3M2VmN2I7XG4gICAgICAgIGNvbG9yOiAjMkMzQzRFO1xuICAgIH1cbiAgICAueWVsbG93IHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0YxQzMzMDtcbiAgICAgICAgY29sb3I6ICMyQzNDNEU7XG4gICAgfVxuICAgIC5yZWQge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTc0RTQ1O1xuICAgICAgICBjb2xvcjogI0ZGRkZGRjtcbiAgICB9XG48L3N0eWxlPlxuXG4iLCI8c2NyaXB0PlxuICAgIGltcG9ydCB7IHN0ZXAsIHByb2dyZXNzIH0gZnJvbSAnLi4vc3RvcmUuanMnXG4gICAgZXhwb3J0IGxldCBxID0xO1xuICAgIGV4cG9ydCBsZXQgcCA9IDcuNjtcbiAgICBleHBvcnQgbGV0IGdyZWVuID0gZmFsc2U7XG4gICAgZXhwb3J0IGxldCB5ZWxsb3cgPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IHJlZCA9IGZhbHNlO1xuICAgY29uc3QgaW5jcmVhc2UgPSAoKSA9PiB7XG4gICAgICAgc3RlcC51cGRhdGUobiA9PiBuKz0gcSk7XG4gICAgICBwcm9ncmVzcy51cGRhdGUobiA9PiBuICs9IHApfTtcbjwvc2NyaXB0PlxuPGJ1dHRvbiBvbjpjbGljaz17aW5jcmVhc2V9IGNsYXNzOmdyZWVuIGNsYXNzOnllbGxvdyBjbGFzczpyZWQ+XG4gICAgPHNsb3Q+XG5cbiAgICA8L3Nsb3Q+XG48L2J1dHRvbj5cblxuPHN0eWxlPlxuICAgIGJ1dHRvbiB7XG4gICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XG5cdFx0XHRtYXJnaW46IDEwcHg7XG5cdFx0XHRib3JkZXI6IGJsYWNrIHNvbGlkIDBweDtcblx0XHRcdGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICB9XG4gICAgLmdyZWVuIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzczZWY3YjtcbiAgICAgICAgY29sb3I6ICMyQzNDNEU7XG4gICAgfVxuICAgIC55ZWxsb3cge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjFDMzMwO1xuICAgICAgICBjb2xvcjogIzJDM0M0RTtcbiAgICB9XG4gICAgLnJlZCB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNFNzRFNDU7XG4gICAgICAgIGNvbG9yOiAjRkZGRkZGO1xuICAgIH1cbjwvc3R5bGU+XG4iLCI8c2NyaXB0PlxuaW1wb3J0IHsgY291bnQsIHN0ZXAsIHF1aXpTdGVwcywgcHJvZ3Jlc3MgfSBmcm9tICcuLi9zdG9yZS5qcydcbmxldCBwID0gNy42O1xuZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGlmKCRjb3VudCA+PSAxICYmICRzdGVwID09IDApIHtcbiAgICAgICAgYWxlcnQoJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBnbyBiYWNrPycpXG4gICAgICAgIC8vJHF1aXpTdGVwc1skY291bnRdLmNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgY291bnQudXBkYXRlKG4gPT4gbiAtIDEpXG4gICAgICAgICRxdWl6U3RlcHNbJGNvdW50KzFdLnN0YXR1cyA9IDA7XG4gICAgICAgIGlmICgkcXVpelN0ZXBzWyRjb3VudF0uc3RhdHVzICE9IDIpIHtcbiAgICAgICAgICAgICRxdWl6U3RlcHNbJGNvdW50XS5zdGF0dXMgPSAxO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAuc2V0KCRxdWl6U3RlcHNbJGNvdW50XS5zdGVwcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcC51cGRhdGUobiA9PiBuIC0gMSlcbiAgICB9XG59XG48L3NjcmlwdD5cbnsjaWYgJGNvdW50ID49IDF9XG48ZGl2IGlkPVwiYmFja1wiIG9uOmNsaWNrPXsoKSA9PiB7Z29CYWNrKClcbiAgICBwcm9ncmVzcy51cGRhdGUobiA9PiBuLT1wKVxufX0+XG48c3ZnIHdpZHRoPVwiMTFcIiBoZWlnaHQ9XCIxOFwiIHZpZXdCb3g9XCIwIDAgMTEgMThcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICA8cGF0aCBkPVwiTTExIDE1Ljg4NUw0LjIwMTA4IDlMMTEgMi4xMTVMOC45MDY4OCAwTDAgOUw4LjkwNjg4IDE4TDExIDE1Ljg4NVpcIiBmaWxsPVwiIzc1NzU3NVwiLz5cbiAgICA8L3N2Zz4gQmFja1xuPC9kaXY+XG57L2lmfVxuPHN0eWxlPlxuICAgICNiYWNrIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgcG9zaXRpb246IGluaGVyaXQ7XG4gICAgICAgIGJvdHRvbTogNzJweDtcbiAgICAgICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBjb2xvcjogIzc1NzU3NTtcbiAgICAgICAgbWFyZ2luOiAyMHB4IDBweDtcblxuICAgIH1cbiAgICBzdmcge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG4gICAgICAgIGZpbGw6ICM3NTc1NzU7XG4gICAgfVxuPC9zdHlsZT4iLCI8c2NyaXB0PlxuLy8gT3BlcmEgOC4wK1xudmFyIGlzT3BlcmEgPSAoISF3aW5kb3cub3ByICYmICEhb3ByLmFkZG9ucykgfHwgISF3aW5kb3cub3BlcmEgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCcgT1BSLycpID49IDAgPyB0cnVlIDogZmFsc2U7XG5cbi8vIEZpcmVmb3ggMS4wK1xudmFyIGlzRmlyZWZveCA9IHR5cGVvZiBJbnN0YWxsVHJpZ2dlciAhPT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogZmFsc2U7XG5cbi8vIFNhZmFyaSAzLjArIFwiW29iamVjdCBIVE1MRWxlbWVudENvbnN0cnVjdG9yXVwiIFxudmFyIGlzU2FmYXJpID0gL2NvbnN0cnVjdG9yL2kudGVzdCh3aW5kb3cuSFRNTEVsZW1lbnQpIHx8IChmdW5jdGlvbiAocCkgeyByZXR1cm4gcC50b1N0cmluZygpID09PSBcIltvYmplY3QgU2FmYXJpUmVtb3RlTm90aWZpY2F0aW9uXVwiOyB9KSghd2luZG93WydzYWZhcmknXSB8fCAodHlwZW9mIHNhZmFyaSAhPT0gJ3VuZGVmaW5lZCcgJiYgc2FmYXJpLnB1c2hOb3RpZmljYXRpb24pKSA/IHRydWUgOiBmYWxzZTtcblxuLy8gSW50ZXJuZXQgRXhwbG9yZXIgNi0xMVxudmFyIGlzSUUgPSAvKkBjY19vbiFAKi9mYWxzZSB8fCAhIWRvY3VtZW50LmRvY3VtZW50TW9kZSA/IHRydWUgOiBmYWxzZTtcblxuLy8gRWRnZSAyMCtcbnZhciBpc0VkZ2UgPSAhaXNJRSAmJiAhIXdpbmRvdy5TdHlsZU1lZGlhID8gdHJ1ZSA6IGZhbHNlO1xuXG4vLyBDaHJvbWUgMSAtIDc5XG52YXIgaXNDaHJvbWUgPSAhIXdpbmRvdy5jaHJvbWUgJiYgKCEhd2luZG93LmNocm9tZS53ZWJzdG9yZSB8fCAhIXdpbmRvdy5jaHJvbWUucnVudGltZSkgPyB0cnVlIDogZmFsc2U7XG5cbi8vIEVkZ2UgKGJhc2VkIG9uIGNocm9taXVtKSBkZXRlY3Rpb25cbnZhciBpc0VkZ2VDaHJvbWl1bSA9IGlzQ2hyb21lICYmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJFZGdcIikgIT0gLTEpID8gdHJ1ZSA6IGZhbHNlO1xuXG4vLyBCbGluayBlbmdpbmUgZGV0ZWN0aW9uXG52YXIgaXNCbGluayA9IChpc0Nocm9tZSB8fCBpc09wZXJhKSAmJiAhIXdpbmRvdy5DU1MgPyB0cnVlIDogZmFsc2U7XG5cblxubGV0IGJyb3dzZXIgPSAnWW91ciBicm93c2VyIGlzOic7XG5pZiAoaXNPcGVyYSl7XG4gICAgYnJvd3Nlcis9IFwiIE9wZXJhXCJcbn0gZWxzZSBpZiAoaXNGaXJlZm94KSB7XG4gICAgYnJvd3Nlcis9IFwiIEZpcmVmb3hcIlxufWVsc2UgaWYgKGlzU2FmYXJpKSB7XG4gICAgYnJvd3Nlcis9IFwiIFNhZmFyaVwiXG59ZWxzZSBpZiAoaXNJRSkge1xuICAgIGJyb3dzZXIrPSBcIiBJbnRlcm5ldCBFeHBsb3JlclwiXG59ZWxzZSBpZiAoaXNFZGdlKSB7XG4gICAgYnJvd3Nlcis9IFwiIEVkZ2VcIlxufWVsc2UgaWYgKGlzQ2hyb21lKSB7XG4gICAgYnJvd3Nlcis9IFwiIENocm9tZVwiXG59ZWxzZSBpZiAoaXNFZGdlQ2hyb21pdW0pIHtcbiAgICBicm93c2VyKz0gXCIgRWRnZSBDaHJvbWl1bVwiXG59IGVsc2Uge1xuICAgIC8vYnJvd3Nlcis9IFwiIEJsaW5rXCJcbn1cbjwvc2NyaXB0PlxuPHA+PHN0cm9uZz57YnJvd3Nlcn08L3N0cm9uZz48L3A+XG48cD48L3A+XG57I2lmIGlzT3BlcmF9IFxuXHRPcGVyYSBpbnN0cnVjdGlvbnNcbns6ZWxzZSBpZiBpc0ZpcmVmb3h9IFxuXHQ8b2w+XG4gICAgICAgIDxsaT5JbiBGaXJlZm94LCBjbGljayBUb29scyA+IE9wdGlvbnMgPiBQcml2YWN5PC9saT5cbiAgICAgICAgPGxpPlNlbGVjdCBcIlVzZSBjdXN0b20gc2V0dGluZ3MgZm9yIGhpc3RvcnlcIiBpbiB0aGUgZHJvcC1kb3duIG1lbnUgYXQgdGhlIHRvcCBvZiB0aGUgZGlhbG9nIGJveDwvbGk+IFxuICAgICAgICA8bGk+Q2hlY2sgXCJDbGVhciBoaXN0b3J5IHdoZW4gRmlyZWZveCBjbG9zZXNcIiA8L2xpPlxuICAgICAgICA8bGk+Q2xpY2sgdGhlIFNldHRpbmdzIGJ1dHRvbiA8L2xpPlxuICAgICAgICA8bGk+SW4gdGhlIFNldHRpbmdzIGZvciBDbGVhcmluZyBIaXN0b3J5IGRpYWxvZywgY2hlY2sgdGhlIG9wdGlvbnMgeW91IHdhbnQgdG8gZXJhc2Ugb24gZXhpdCBhbmQgY2xpY2sgT0s8L2xpPlxuICAgIDwvb2w+XG57OmVsc2UgaWYgaXNTYWZhcmkgfVxuICAgIDxvbD5cbiAgICAgICAgPGxpPkNsaWNrIHRoZSB3cmVuY2ggaWNvbiBpbiB0aGUgdG9wLXJpZ2h0IGNvcm5lciBvZiB0aGUgYnJvd3NlciB3aW5kb3cgYW5kIFxuICAgICAgICA8bGk+Q2hvb3NlIE9wdGlvbnMgPiBVbmRlciB0aGUgSG9vZCA+IENvbnRlbnQgU2V0dGluZ3MgPiBDb29raWVzLjwvbGk+IFxuICAgICAgICA8bGk+QmxvY2sgYWxsIHRoaXJkLXBhcnR5IGNvb2tpZXMgb3IgYWxsIHRyYWNraW5nIGNvb2tpZXM8L2xpPlxuICAgICAgICA8bGk+QW5vdGhlciBvcHRpb24gaW4gdGhpcyBkaWFsb2cgbGV0cyB5b3UgZGVsZXRlIGFsbCBjb29raWVzIGFuZCBvdGhlciBzaXRlIGRhdGEgYXV0b21hdGljYWxseSB3aGVuIHlvdSBjbG9zZSB0aGUgYnJvd3Nlci48L2xpPlxuICAgIDwvb2w+XG57OmVsc2UgaWYgaXNJRX0gXG5cdElFIGluc3RydWN0aW9uc1xuezplbHNlIGlmIGlzRWRnZSB9XG5cdEVkZ2UgaW5zcnVjdGlvbnNcbns6ZWxzZSBpZiBpc0Nocm9tZSB9XG5cdDxvbD5cbiAgICAgICAgPGxpPkNsaWNrIHRoZSB3cmVuY2ggaWNvbiBpbiB0aGUgdG9wLXJpZ2h0IGNvcm5lciBvZiB0aGUgYnJvd3NlciB3aW5kb3cgYW5kIFxuICAgICAgICA8bGk+Q2hvb3NlIE9wdGlvbnMgPiBVbmRlciB0aGUgSG9vZCA+IENvbnRlbnQgU2V0dGluZ3MgPiBDb29raWVzLjwvbGk+IFxuICAgICAgICA8bGk+QmxvY2sgYWxsIHRoaXJkLXBhcnR5IGNvb2tpZXMgb3IgYWxsIHRyYWNraW5nIGNvb2tpZXM8L2xpPlxuICAgICAgICA8bGk+QW5vdGhlciBvcHRpb24gaW4gdGhpcyBkaWFsb2cgbGV0cyB5b3UgZGVsZXRlIGFsbCBjb29raWVzIGFuZCBvdGhlciBzaXRlIGRhdGEgYXV0b21hdGljYWxseSB3aGVuIHlvdSBjbG9zZSB0aGUgYnJvd3Nlci48L2xpPlxuICAgIDwvb2w+XG57OmVsc2UgaWYgaXNFZGdlQ2hyb21pdW19XG5cdEVkZ2UgQ2hyb21pdW0gaW5zdHJ1Y3Rpb25zXG57OmVsc2V9IFxuXHRTb21lIG90aGVyIGluc3RydWN0aW9uc1xuey9pZn1cbjxwPjwvcD5cbjxzdHlsZT5cbiAgICBzdHJvbmd7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgICAgIGZvbnQtc2l6ZTogMjJweDtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgfVxuICAgIFxuPC9zdHlsZT4iLCI8c2NyaXB0PlxuXG4gICAgZXhwb3J0IGxldCBhY3RpdmU7XG4gICAgYWN0aXZlID0wO1xuXG48L3NjcmlwdD5cbnsjaWYgYWN0aXZlIDwgMSB9XG4gICAgPGltZyBzcmM9Jy4vYmxhbmtfY2lyY2xlLnN2ZycgYWx0PVwiY29tcGxldGVkXCIgY2xhc3M9J2FjdGl2ZSBsb2NrJyAvPlxuICAgIFxuezplbHNlIGlmIGFjdGl2ZSA+IDEgfVxuICAgIDxpbWcgc3JjPScuL2NoZWNrZWQuc3ZnJyBhbHQ9XCJjb21wbGV0ZWRcIiBjbGFzcz0nYWN0aXZlIGxvY2snIC8+XG4gIFxuezplbHNlfVxuICAgIDxpbWcgc3JjPScuL3VuX2NoZWNrZWQuc3ZnJyBhbHQ9XCJjb21wbGV0ZWRcIiBjbGFzcz0nYWN0aXZlIGxvY2snIC8+XG4gICAgXG57L2lmfVxuIDxzdHlsZT5cbiAgICAgLmxvY2sge1xuICAgICAgICAgbWFyZ2luOiBhdXRvO1xuICAgICB9XG4gPC9zdHlsZT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUMsSUFBSSxlQUFDLENBQUMsQUFDTCxnQkFBZ0IsQ0FBRSxLQUFLLENBQ3ZCLFVBQVUsQ0FBRSxVQUFVLEFBQ3ZCLENBQUM7QUNERCxnQkFBRSxDQUFFLENBQUMsY0FBQyxDQUFDLEFBQ04sTUFBTSxDQUFFLENBQUMsQ0FBQyxJQUFJLEFBQ2YsQ0FBQyxBQUVELEVBQUUsY0FBQyxDQUFDLEFBQ0gsU0FBUyxDQUFFLEtBQUssQ0FDaEIsV0FBVyxDQUFFLEdBQUcsQ0FDaEIsTUFBTSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQUFDcEIsQ0FBQyxBQUVELENBQUMsY0FBQyxDQUFDLEFBQ0YsTUFBTSxDQUFFLEdBQUcsQ0FBQyxJQUFJLEFBQ2pCLENBQUMsQUFFRCxNQUFNLEFBQUMsWUFBWSxLQUFLLENBQUMsQUFBQyxDQUFDLEFBQzFCLEVBQUUsY0FBQyxDQUFDLEFBQ0gsU0FBUyxDQUFFLEdBQUcsQUFDZixDQUFDLEFBQ0YsQ0FBQztBQ3RCRCxnQ0FBRSxDQUFVLENBQUMsOEJBQUMsQ0FBQyxBQUNkLFVBQVUsQ0FBRSxNQUFNLENBQ2xCLE1BQU0sQ0FBRSxDQUFDLENBQUMsSUFBSSxBQUNmLENBQUMsQUFFRCxLQUFLLDhCQUFDLENBQUMsQUFDTixnQkFBZ0IsQ0FBRSxPQUFPLENBQ3pCLFlBQVksQ0FBRSxJQUFJLENBQ2xCLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLEtBQUssQ0FBRSxJQUFJLENB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 */