main.svelte-19axu57{background-color:white;box-sizing:border-box}
h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}
h1.svelte-1acdip2.svelte-1acdip2,p.svelte-1acdip2.svelte-1acdip2{text-align:center;margin:0 auto}.hero.svelte-1acdip2.svelte-1acdip2{background-color:#3e4b59;padding-left:80px;padding-top:30vh;width:100%;height:60vh}.hero.svelte-1acdip2 p.svelte-1acdip2{margin:1em auto;color:white}h1.svelte-1acdip2.svelte-1acdip2{font-size:2.8em;text-align:left;text-transform:uppercase;font-weight:700;margin:0 0 0.5em 0;color:white;letter-spacing:25%}h2.svelte-1acdip2.svelte-1acdip2{text-align:left;margin:auto;text-transform:uppercase}h3.svelte-1acdip2.svelte-1acdip2{text-align:center;margin:auto}.bigImg.svelte-1acdip2.svelte-1acdip2{max-width:1400px;background-color:grey}button.svelte-1acdip2.svelte-1acdip2{background:#7AAF54;text-transform:uppercase;padding:10px 20px 10px 20px;font-size:30px;line-height:38px;border:none;border-radius:10px;color:white;box-shadow:0px 4px 4px rgba(0, 0, 0, 0.25)}img.svelte-1acdip2.svelte-1acdip2{width:100%;max-width:400px;margin:0 0 1em 0}.about.svelte-1acdip2.svelte-1acdip2{padding:1.5em}p.svelte-1acdip2.svelte-1acdip2{color:black;text-align:left}ul.svelte-1acdip2.svelte-1acdip2{display:flex;flex-direction:row;list-style:none;margin-block-start:0px;margin-block-end:0px;padding-inline-start:0px}li.svelte-1acdip2.svelte-1acdip2{justify-content:space-around;margin:auto}.why.svelte-1acdip2.svelte-1acdip2{padding-left:80px;margin:1em auto}a.svelte-1acdip2.svelte-1acdip2{text-decoration:none;padding:4px 30px}@media(min-width: 480px){h1.svelte-1acdip2.svelte-1acdip2{font-size:4em}}
main.svelte-8ub2z1{display:flex;flex-flow:row}#main-content.svelte-8ub2z1{background:#38424D;border-radius:15px;border:0px;margin:12px 22px 40px 20px;padding:9.3vh 5vw 0vh 9.3vh;color:#FFFFFF}
main.svelte-jkugtb{display:flex;flex-flow:row;justify-content:center;margin-top:15px}section.svelte-jkugtb{background:#38424D;width:65vw;min-height:75vh;border-radius:15px;border:0px;margin:0px;padding:9.3vh 5vw 0vh 9.3vh;color:#FFFFFF;text-align:center}#chapter1.svelte-jkugtb{width:85vw;background-image:url('../bg-vector.png');background-blend-mode:darken}p.svelte-jkugtb{text-align:left}#headline.svelte-jkugtb{font-weight:600;margin-bottom:25px}#chapter.svelte-jkugtb{color:#73ef7b}button.svelte-jkugtb{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px;text-decoration:none}#start.svelte-jkugtb{background-color:#73ef7b}a.svelte-jkugtb{text-decoration:none}.active.svelte-jkugtb{background-color:pink}#permission.svelte-jkugtb{width:70%;margin:auto}
ul.svelte-1frg2tf{margin:0 0 1em 0;line-height:1.5}
.quiz-holder.svelte-dkh3bo{display:block;width:65vw;left:20vw;height:100vh;padding:20px 50px}.step.svelte-dkh3bo{margin-bottom:55px}#progress.svelte-dkh3bo{margin-top:50px}ul.svelte-dkh3bo{padding-inline-start:15px}li.svelte-dkh3bo{margin:30px 0px}.incomplete.svelte-dkh3bo{color:#a0a0a0;list-style-type:circle}.complete.svelte-dkh3bo{list-style-type:disc}.Side-headline.svelte-dkh3bo{font-size:24px;font-weight:700}#videoElement.svelte-dkh3bo{}.btn-dark.svelte-dkh3bo{color:white;background:#0F2033;border-radius:6px;width:30%;text-align:center;padding:5px 10px}button.svelte-dkh3bo{border:none;padding:5px 10px}
aside.svelte-n0ypaq{display:block;top:50px;left:0;width:27.77vw;height:100vh;padding-left:50px}section.svelte-n0ypaq{padding:10px 10px 20px 10px}
.button-holder.svelte-9jf7df{width:27vw;display:flex;flex-flow:column nowrap}
.button-holder.svelte-9jf7df{width:27vw;display:flex;flex-flow:column nowrap}
.content.svelte-gnxal1 h2{font-size:1.4em;font-weight:500}.content.svelte-gnxal1 pre{background-color:#f9f9f9;box-shadow:inset 1px 1px 5px rgba(0,0,0,0.05);padding:0.5em;border-radius:2px;overflow-x:auto}.content.svelte-gnxal1 pre code{background-color:transparent;padding:0}.content.svelte-gnxal1 ul{line-height:1.5}.content.svelte-gnxal1 li{margin:0 0 0.5em 0}
.button-holder.svelte-9jf7df{width:27vw;display:flex;flex-flow:column nowrap}button.svelte-9jf7df{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}
.button-holder.svelte-1sss75x{width:27vw;display:flex;flex-flow:column nowrap}.video-holder.svelte-1sss75x{width:100%}button.svelte-1sss75x{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}#alert.svelte-1sss75x{color:red;font-weight:700;font-size:24px}#not-covered.svelte-1sss75x{color:red;background:#FFEEEE;border-radius:6px;border:none}
.num.svelte-m0bqhn{padding-right:100px}div.svelte-m0bqhn{color:black}.active.svelte-m0bqhn{display:block}
.button-holder.svelte-1ei4p{width:27vw;display:flex;flex-flow:column nowrap}.video-holder.svelte-1ei4p{width:100%}#alert.svelte-1ei4p{color:red;font-weight:700;font-size:24px}#not-covered.svelte-1ei4p{color:red;background:#FFEEEE;border-radius:6px;border:none}
.button-holder.svelte-9jf7df{width:27vw;display:flex;flex-flow:column nowrap}
#warning.svelte-gs0uzf{color:red;font-size:24px}ul.svelte-gs0uzf{padding-inline-start:15px}li.svelte-gs0uzf{margin:30px 0px}form.svelte-gs0uzf{display:flex;flex-flow:column}label.svelte-gs0uzf{padding:10px}.button-holder.svelte-gs0uzf{width:27vw;display:flex;flex-flow:column nowrap}
.button-holder.svelte-338bov{width:27vw;display:flex;flex-flow:column nowrap}
.button-holder.svelte-9jf7df{width:27vw;display:flex;flex-flow:column nowrap}
.button-holder.svelte-9jf7df{width:27vw;display:flex;flex-flow:column nowrap}
section.svelte-1y4us4j{width:100%}.button-holder.svelte-1y4us4j{width:27vw;display:flex;flex-flow:column nowrap}
.button-holder.svelte-338bov{width:27vw;display:flex;flex-flow:column nowrap}
nav.svelte-7v6ao1{display:flex;flex-flow:row nowrap;height:50px;justify-content:space-between;align-items:center;background-color:#3e4b59;font-weight:300;padding:0 1em;position:sticky;top:0px;left:0px;z-index:1}ul.svelte-7v6ao1{display:flex;list-style:none;justify-content:flex-end;margin:0;padding:0;color:#c7c7c7}img.svelte-7v6ao1{display:flex;justify-content:flex-start;height:30px}li.svelte-7v6ao1{display:flex;margin:0px 20px 0px 20px;text-transform:uppercase}[aria-current].svelte-7v6ao1{position:relative;display:inline-block}[aria-current].svelte-7v6ao1::after{position:absolute;content:'';width:calc(100% - 1em);height:2px;background-color:#e74e45;display:block}a.svelte-7v6ao1{display:flex;padding:1em 0.5em;text-decoration:none;margin:2em, 0em}
aside.svelte-d0rvxh{display:flex;flex-direction:column;justify-content:space-between;align-items:center;width:33.75vw;height:86vh;background-color:#38424D;border-radius:15px;border:0px;margin:12px 0px 40px 20px;min-width:33vw;position:sticky;top:50px}#timer.svelte-d0rvxh{display:flex;flex-direction:column}#remaining.svelte-d0rvxh{font-size:20px;padding:20px 0px 20px 0px}#minutes.svelte-d0rvxh{color:white;background:#0F2033;border-radius:6px;max-width:150px;height:6.7vh;text-align:center;font-size:30px;margin:55vh 0vh 0vh 0vh}.done.svelte-d0rvxh{display:flex;flex-flow:row nowrap;align-items:center;width:95%;margin-bottom:20px
    }progress.svelte-d0rvxh{-webkit-appearance:none;border:none;display:block;width:86%;position:relative;bottom:59px;height:6px;z-index:-1}progress.svelte-d0rvxh::-webkit-progress-bar{background:#303538}progress.bg1.svelte-d0rvxh::-webkit-progress-value{background:#74ef7b}progress.bg2.svelte-d0rvxh::-webkit-progress-value{background:#F1C330}progress.bg3.svelte-d0rvxh::-webkit-progress-value{background:#E94040}.bg1.svelte-d0rvxh{background-image:url('../bg-group1.png');background-blend-mode:normal;background-size:cover;background-position:bottom;color:#74ef7b}.bg2.svelte-d0rvxh{background-image:url('../bg-group2.png');background-blend-mode:normal;background-size:cover;background-position:bottom;color:#F1C330}.bg3.svelte-d0rvxh{background-image:url('../bg-group3.png');background-blend-mode:normal;background-size:cover;background-position:bottom;color:#E94040}
button.svelte-17baps{padding:10px 20px;margin:80px 10px 10px 10px;border:black solid 0px;border-radius:8px}
button.svelte-1tjbwri{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}
button.svelte-7cbo9q{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}
.lock.svelte-n4s916{margin:auto}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */