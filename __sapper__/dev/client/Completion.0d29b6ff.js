import { E as writable, F as identity, G as assign, H as now, I as loop, S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, J as validate_store, K as component_subscribe, L as set_store_value, v as validate_slots, e as element, t as text, a as space, f as claim_element, g as children, h as claim_text, b as detach_dev, c as claim_space, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, M as set_data_dev, n as noop } from './client.7f5fe574.js';

function is_date(obj) {
    return Object.prototype.toString.call(obj) === '[object Date]';
}

function get_interpolator(a, b) {
    if (a === b || a !== a)
        return () => a;
    const type = typeof a;
    if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
        throw new Error('Cannot interpolate values of different type');
    }
    if (Array.isArray(a)) {
        const arr = b.map((bi, i) => {
            return get_interpolator(a[i], bi);
        });
        return t => arr.map(fn => fn(t));
    }
    if (type === 'object') {
        if (!a || !b)
            throw new Error('Object cannot be null');
        if (is_date(a) && is_date(b)) {
            a = a.getTime();
            b = b.getTime();
            const delta = b - a;
            return t => new Date(a + t * delta);
        }
        const keys = Object.keys(b);
        const interpolators = {};
        keys.forEach(key => {
            interpolators[key] = get_interpolator(a[key], b[key]);
        });
        return t => {
            const result = {};
            keys.forEach(key => {
                result[key] = interpolators[key](t);
            });
            return result;
        };
    }
    if (type === 'number') {
        const delta = b - a;
        return t => a + t * delta;
    }
    throw new Error(`Cannot interpolate ${type} values`);
}
function tweened(value, defaults = {}) {
    const store = writable(value);
    let task;
    let target_value = value;
    function set(new_value, opts) {
        if (value == null) {
            store.set(value = new_value);
            return Promise.resolve();
        }
        target_value = new_value;
        let previous_task = task;
        let started = false;
        let { delay = 0, duration = 400, easing = identity, interpolate = get_interpolator } = assign(assign({}, defaults), opts);
        if (duration === 0) {
            if (previous_task) {
                previous_task.abort();
                previous_task = null;
            }
            store.set(value = target_value);
            return Promise.resolve();
        }
        const start = now() + delay;
        let fn;
        task = loop(now => {
            if (now < start)
                return true;
            if (!started) {
                fn = interpolate(value, new_value);
                if (typeof duration === 'function')
                    duration = duration(value, new_value);
                started = true;
            }
            if (previous_task) {
                previous_task.abort();
                previous_task = null;
            }
            const elapsed = now - start;
            if (elapsed > duration) {
                store.set(value = new_value);
                return false;
            }
            // @ts-ignore
            store.set(value = fn(easing(elapsed / duration)));
            return true;
        });
        return task.promise;
    }
    return {
        set,
        update: (fn, opts) => set(fn(target_value, value), opts),
        subscribe: store.subscribe
    };
}

/* src/components/Completion.svelte generated by Svelte v3.23.2 */
const file = "src/components/Completion.svelte";

function create_fragment(ctx) {
	let aside;
	let section0;
	let span0;
	let t0;
	let t1;
	let span1;
	let t2;
	let t3;
	let t4;
	let t5;
	let section1;
	let img0;
	let img0_src_value;
	let t6;
	let img1;
	let img1_src_value;
	let t7;
	let img2;
	let img2_src_value;
	let t8;
	let img3;
	let img3_src_value;
	let t9;
	let img4;
	let img4_src_value;
	let t10;
	let img5;
	let img5_src_value;
	let t11;
	let img6;
	let img6_src_value;
	let t12;
	let img7;
	let img7_src_value;
	let t13;
	let img8;
	let img8_src_value;
	let t14;
	let img9;
	let img9_src_value;
	let t15;
	let img10;
	let img10_src_value;
	let t16;
	let img11;
	let img11_src_value;
	let t17;
	let img12;
	let img12_src_value;
	let t18;
	let img13;
	let img13_src_value;
	let t19;
	let img14;
	let img14_src_value;
	let t20;
	let img15;
	let img15_src_value;
	let t21;
	let img16;
	let img16_src_value;
	let t22;
	let img17;
	let img17_src_value;
	let t23;
	let img18;
	let img18_src_value;
	let t24;
	let img19;
	let img19_src_value;
	let t25;
	let img20;
	let img20_src_value;
	let t26;
	let img21;
	let img21_src_value;

	const block = {
		c: function create() {
			aside = element("aside");
			section0 = element("section");
			span0 = element("span");
			t0 = text("Question: # Title");
			t1 = space();
			span1 = element("span");
			t2 = text(/*minutes*/ ctx[0]);
			t3 = text(":");
			t4 = text(/*seconds*/ ctx[1]);
			t5 = space();
			section1 = element("section");
			img0 = element("img");
			t6 = space();
			img1 = element("img");
			t7 = space();
			img2 = element("img");
			t8 = space();
			img3 = element("img");
			t9 = space();
			img4 = element("img");
			t10 = space();
			img5 = element("img");
			t11 = space();
			img6 = element("img");
			t12 = space();
			img7 = element("img");
			t13 = space();
			img8 = element("img");
			t14 = space();
			img9 = element("img");
			t15 = space();
			img10 = element("img");
			t16 = space();
			img11 = element("img");
			t17 = space();
			img12 = element("img");
			t18 = space();
			img13 = element("img");
			t19 = space();
			img14 = element("img");
			t20 = space();
			img15 = element("img");
			t21 = space();
			img16 = element("img");
			t22 = space();
			img17 = element("img");
			t23 = space();
			img18 = element("img");
			t24 = space();
			img19 = element("img");
			t25 = space();
			img20 = element("img");
			t26 = space();
			img21 = element("img");
			this.h();
		},
		l: function claim(nodes) {
			aside = claim_element(nodes, "ASIDE", { class: true });
			var aside_nodes = children(aside);
			section0 = claim_element(aside_nodes, "SECTION", { id: true, class: true });
			var section0_nodes = children(section0);
			span0 = claim_element(section0_nodes, "SPAN", { id: true, class: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, "Question: # Title");
			span0_nodes.forEach(detach_dev);
			t1 = claim_space(section0_nodes);
			span1 = claim_element(section0_nodes, "SPAN", { id: true, class: true });
			var span1_nodes = children(span1);
			t2 = claim_text(span1_nodes, /*minutes*/ ctx[0]);
			t3 = claim_text(span1_nodes, ":");
			t4 = claim_text(span1_nodes, /*seconds*/ ctx[1]);
			span1_nodes.forEach(detach_dev);
			section0_nodes.forEach(detach_dev);
			t5 = claim_space(aside_nodes);
			section1 = claim_element(aside_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			img0 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t6 = claim_space(section1_nodes);
			img1 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t7 = claim_space(section1_nodes);
			img2 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t8 = claim_space(section1_nodes);
			img3 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t9 = claim_space(section1_nodes);
			img4 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t10 = claim_space(section1_nodes);
			img5 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t11 = claim_space(section1_nodes);
			img6 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t12 = claim_space(section1_nodes);
			img7 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t13 = claim_space(section1_nodes);
			img8 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t14 = claim_space(section1_nodes);
			img9 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t15 = claim_space(section1_nodes);
			img10 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t16 = claim_space(section1_nodes);
			img11 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t17 = claim_space(section1_nodes);
			img12 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t18 = claim_space(section1_nodes);
			img13 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t19 = claim_space(section1_nodes);
			img14 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t20 = claim_space(section1_nodes);
			img15 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t21 = claim_space(section1_nodes);
			img16 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t22 = claim_space(section1_nodes);
			img17 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t23 = claim_space(section1_nodes);
			img18 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t24 = claim_space(section1_nodes);
			img19 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t25 = claim_space(section1_nodes);
			img20 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			t26 = claim_space(section1_nodes);
			img21 = claim_element(section1_nodes, "IMG", { src: true, alt: true, class: true });
			section1_nodes.forEach(detach_dev);
			aside_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "id", "remaining");
			attr_dev(span0, "class", "svelte-17dwu6d");
			add_location(span0, file, 16, 8, 380);
			attr_dev(span1, "id", "minutes");
			attr_dev(span1, "class", "svelte-17dwu6d");
			add_location(span1, file, 17, 8, 435);
			attr_dev(section0, "id", "timer");
			attr_dev(section0, "class", "svelte-17dwu6d");
			add_location(section0, file, 15, 4, 351);
			if (img0.src !== (img0_src_value = "./lock-active.svg")) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", "completed");
			attr_dev(img0, "class", "active lock svelte-17dwu6d");
			add_location(img0, file, 20, 8, 531);
			if (img1.src !== (img1_src_value = "./Ellipse-active.png")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", "completed");
			attr_dev(img1, "class", "ellipse active svelte-17dwu6d");
			add_location(img1, file, 21, 12, 611);
			if (img2.src !== (img2_src_value = "./Ellipse-active.png")) attr_dev(img2, "src", img2_src_value);
			attr_dev(img2, "alt", "completed");
			attr_dev(img2, "class", "ellipse inactive svelte-17dwu6d");
			add_location(img2, file, 22, 12, 697);
			if (img3.src !== (img3_src_value = "./lock-active.svg")) attr_dev(img3, "src", img3_src_value);
			attr_dev(img3, "alt", "completed");
			attr_dev(img3, "class", "inactive lock svelte-17dwu6d");
			add_location(img3, file, 23, 8, 781);
			if (img4.src !== (img4_src_value = "./Ellipse-active.png")) attr_dev(img4, "src", img4_src_value);
			attr_dev(img4, "alt", "completed");
			attr_dev(img4, "class", "ellipse inactive svelte-17dwu6d");
			add_location(img4, file, 24, 12, 863);
			if (img5.src !== (img5_src_value = "./Ellipse-active.png")) attr_dev(img5, "src", img5_src_value);
			attr_dev(img5, "alt", "completed");
			attr_dev(img5, "class", "ellipse inactive svelte-17dwu6d");
			add_location(img5, file, 24, 95, 946);
			if (img6.src !== (img6_src_value = "./lock-active.svg")) attr_dev(img6, "src", img6_src_value);
			attr_dev(img6, "alt", "completed");
			attr_dev(img6, "class", "inactive lock svelte-17dwu6d");
			add_location(img6, file, 25, 8, 1030);
			if (img7.src !== (img7_src_value = "./Ellipse-active.png")) attr_dev(img7, "src", img7_src_value);
			attr_dev(img7, "alt", "completed");
			attr_dev(img7, "class", "ellipse inactive svelte-17dwu6d");
			add_location(img7, file, 26, 12, 1113);
			if (img8.src !== (img8_src_value = "./Ellipse-active.png")) attr_dev(img8, "src", img8_src_value);
			attr_dev(img8, "alt", "completed");
			attr_dev(img8, "class", "ellipse inactive svelte-17dwu6d");
			add_location(img8, file, 26, 95, 1196);
			if (img9.src !== (img9_src_value = "./lock-active.svg")) attr_dev(img9, "src", img9_src_value);
			attr_dev(img9, "alt", "completed");
			attr_dev(img9, "class", "inactive lock svelte-17dwu6d");
			add_location(img9, file, 27, 8, 1280);
			if (img10.src !== (img10_src_value = "./Ellipse-active.png")) attr_dev(img10, "src", img10_src_value);
			attr_dev(img10, "alt", "completed");
			attr_dev(img10, "class", "ellipse inactive svelte-17dwu6d");
			add_location(img10, file, 28, 12, 1362);
			if (img11.src !== (img11_src_value = "./Ellipse-active.png")) attr_dev(img11, "src", img11_src_value);
			attr_dev(img11, "alt", "completed");
			attr_dev(img11, "class", "ellipse inactive svelte-17dwu6d");
			add_location(img11, file, 28, 95, 1445);
			if (img12.src !== (img12_src_value = "./lock-active.svg")) attr_dev(img12, "src", img12_src_value);
			attr_dev(img12, "alt", "completed");
			attr_dev(img12, "class", "inactive lock svelte-17dwu6d");
			add_location(img12, file, 30, 8, 1530);
			if (img13.src !== (img13_src_value = "./Ellipse-active.png")) attr_dev(img13, "src", img13_src_value);
			attr_dev(img13, "alt", "completed");
			attr_dev(img13, "class", "ellipse inactive svelte-17dwu6d");
			add_location(img13, file, 31, 12, 1612);
			if (img14.src !== (img14_src_value = "./Ellipse-active.png")) attr_dev(img14, "src", img14_src_value);
			attr_dev(img14, "alt", "completed");
			attr_dev(img14, "class", "ellipse inactive svelte-17dwu6d");
			add_location(img14, file, 31, 95, 1695);
			if (img15.src !== (img15_src_value = "./lock-active.svg")) attr_dev(img15, "src", img15_src_value);
			attr_dev(img15, "alt", "completed");
			attr_dev(img15, "class", "inactive lock svelte-17dwu6d");
			add_location(img15, file, 33, 8, 1780);
			if (img16.src !== (img16_src_value = "./Ellipse-active.png")) attr_dev(img16, "src", img16_src_value);
			attr_dev(img16, "alt", "completed");
			attr_dev(img16, "class", "ellipse inactive svelte-17dwu6d");
			add_location(img16, file, 34, 12, 1862);
			if (img17.src !== (img17_src_value = "./Ellipse-active.png")) attr_dev(img17, "src", img17_src_value);
			attr_dev(img17, "alt", "completed");
			attr_dev(img17, "class", "ellipse inactive svelte-17dwu6d");
			add_location(img17, file, 34, 95, 1945);
			if (img18.src !== (img18_src_value = "./lock-active.svg")) attr_dev(img18, "src", img18_src_value);
			attr_dev(img18, "alt", "completed");
			attr_dev(img18, "class", "inactive lock svelte-17dwu6d");
			add_location(img18, file, 36, 8, 2030);
			if (img19.src !== (img19_src_value = "./Ellipse-active.png")) attr_dev(img19, "src", img19_src_value);
			attr_dev(img19, "alt", "completed");
			attr_dev(img19, "class", "ellipse inactive svelte-17dwu6d");
			add_location(img19, file, 37, 12, 2112);
			if (img20.src !== (img20_src_value = "./Ellipse-active.png")) attr_dev(img20, "src", img20_src_value);
			attr_dev(img20, "alt", "completed");
			attr_dev(img20, "class", "ellipse inactive svelte-17dwu6d");
			add_location(img20, file, 37, 95, 2195);
			if (img21.src !== (img21_src_value = "./lock-active.svg")) attr_dev(img21, "src", img21_src_value);
			attr_dev(img21, "alt", "completed");
			attr_dev(img21, "class", "inactive lock svelte-17dwu6d");
			add_location(img21, file, 39, 8, 2280);
			attr_dev(section1, "class", "done svelte-17dwu6d");
			add_location(section1, file, 19, 4, 500);
			attr_dev(aside, "class", "svelte-17dwu6d");
			add_location(aside, file, 14, 0, 339);
		},
		m: function mount(target, anchor) {
			insert_dev(target, aside, anchor);
			append_dev(aside, section0);
			append_dev(section0, span0);
			append_dev(span0, t0);
			append_dev(section0, t1);
			append_dev(section0, span1);
			append_dev(span1, t2);
			append_dev(span1, t3);
			append_dev(span1, t4);
			append_dev(aside, t5);
			append_dev(aside, section1);
			append_dev(section1, img0);
			append_dev(section1, t6);
			append_dev(section1, img1);
			append_dev(section1, t7);
			append_dev(section1, img2);
			append_dev(section1, t8);
			append_dev(section1, img3);
			append_dev(section1, t9);
			append_dev(section1, img4);
			append_dev(section1, t10);
			append_dev(section1, img5);
			append_dev(section1, t11);
			append_dev(section1, img6);
			append_dev(section1, t12);
			append_dev(section1, img7);
			append_dev(section1, t13);
			append_dev(section1, img8);
			append_dev(section1, t14);
			append_dev(section1, img9);
			append_dev(section1, t15);
			append_dev(section1, img10);
			append_dev(section1, t16);
			append_dev(section1, img11);
			append_dev(section1, t17);
			append_dev(section1, img12);
			append_dev(section1, t18);
			append_dev(section1, img13);
			append_dev(section1, t19);
			append_dev(section1, img14);
			append_dev(section1, t20);
			append_dev(section1, img15);
			append_dev(section1, t21);
			append_dev(section1, img16);
			append_dev(section1, t22);
			append_dev(section1, img17);
			append_dev(section1, t23);
			append_dev(section1, img18);
			append_dev(section1, t24);
			append_dev(section1, img19);
			append_dev(section1, t25);
			append_dev(section1, img20);
			append_dev(section1, t26);
			append_dev(section1, img21);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*minutes*/ 1) set_data_dev(t2, /*minutes*/ ctx[0]);
			if (dirty & /*seconds*/ 2) set_data_dev(t4, /*seconds*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(aside);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $timer;
	let start = 30 * 60;
	let timer = tweened(start);
	validate_store(timer, "timer");
	component_subscribe($$self, timer, value => $$invalidate(3, $timer = value));

	setInterval(
		() => {
			if ($timer > 0) set_store_value(timer, $timer--, $timer);
		},
		1000
	);

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Completion> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Completion", $$slots, []);

	$$self.$capture_state = () => ({
		tweened,
		start,
		timer,
		$timer,
		minutes,
		minname,
		seconds
	});

	$$self.$inject_state = $$props => {
		if ("start" in $$props) start = $$props.start;
		if ("timer" in $$props) $$invalidate(2, timer = $$props.timer);
		if ("minutes" in $$props) $$invalidate(0, minutes = $$props.minutes);
		if ("minname" in $$props) minname = $$props.minname;
		if ("seconds" in $$props) $$invalidate(1, seconds = $$props.seconds);
	};

	let minutes;
	let minname;
	let seconds;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$timer*/ 8) {
			 $$invalidate(0, minutes = Math.floor($timer / 60));
		}

		if ($$self.$$.dirty & /*minutes*/ 1) {
			 minname = minutes > 1 ? "mins" : "min";
		}

		if ($$self.$$.dirty & /*$timer, minutes*/ 9) {
			 $$invalidate(1, seconds = Math.floor($timer - minutes * 60));
		}
	};

	return [minutes, seconds, timer];
}

class Completion extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Completion",
			options,
			id: create_fragment.name
		});
	}
}

export { Completion as C };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
