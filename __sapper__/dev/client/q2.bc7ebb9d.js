import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, K as validate_each_argument, o as createEventDispatcher, v as validate_slots, O as onMount, N as afterUpdate, e as element, t as text, f as claim_element, g as children, h as claim_text, b as detach_dev, j as attr_dev, Q as null_to_empty, k as add_location, l as insert_dev, m as append_dev, J as set_data_dev, a as space, c as claim_space, R as listen_dev, T as prop_dev, q as query_selector_all, n as noop, M as destroy_each } from './client.48f9671e.js';
import { C as Completion } from './Completion.e01ce0fe.js';

/* src/routes/quiz/q2.svelte generated by Svelte v3.23.2 */
const file = "src/routes/quiz/q2.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i];
	return child_ctx;
}

// (68:3) {#each q1Steps as step}
function create_each_block_1(ctx) {
	let li;
	let t_value = /*step*/ ctx[16].name + "";
	let t;
	let li_class_value;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", li_class_value = "" + (null_to_empty(/*step*/ ctx[16].classn) + " svelte-1tvhnpi"));
			add_location(li, file, 68, 4, 2114);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*q1Steps*/ 1 && t_value !== (t_value = /*step*/ ctx[16].name + "")) set_data_dev(t, t_value);

			if (dirty & /*q1Steps*/ 1 && li_class_value !== (li_class_value = "" + (null_to_empty(/*step*/ ctx[16].classn) + " svelte-1tvhnpi"))) {
				attr_dev(li, "class", li_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(68:3) {#each q1Steps as step}",
		ctx
	});

	return block;
}

// (77:2) {#each q1Steps[0].browsers as browsers}
function create_each_block(ctx) {
	let label;
	let input;
	let input_value_value;
	let t0;
	let t1_value = /*browsers*/ ctx[13] + "";
	let t1;
	let t2;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			label = element("label");
			input = element("input");
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			label = claim_element(nodes, "LABEL", { class: true });
			var label_nodes = children(label);
			input = claim_element(label_nodes, "INPUT", { type: true, value: true });
			t0 = claim_space(label_nodes);
			t1 = claim_text(label_nodes, t1_value);
			t2 = claim_space(label_nodes);
			label_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "type", "radio");
			input.__value = input_value_value = /*browsers*/ ctx[13];
			input.value = input.__value;
			/*$$binding_groups*/ ctx[7][0].push(input);
			add_location(input, file, 78, 4, 2319);
			attr_dev(label, "class", "svelte-1tvhnpi");
			add_location(label, file, 77, 3, 2307);
		},
		m: function mount(target, anchor) {
			insert_dev(target, label, anchor);
			append_dev(label, input);
			input.checked = input.__value === /*choice*/ ctx[1];
			append_dev(label, t0);
			append_dev(label, t1);
			append_dev(label, t2);

			if (!mounted) {
				dispose = listen_dev(input, "change", /*input_change_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*q1Steps*/ 1 && input_value_value !== (input_value_value = /*browsers*/ ctx[13])) {
				prop_dev(input, "__value", input_value_value);
			}

			input.value = input.__value;

			if (dirty & /*choice*/ 2) {
				input.checked = input.__value === /*choice*/ ctx[1];
			}

			if (dirty & /*q1Steps*/ 1 && t1_value !== (t1_value = /*browsers*/ ctx[13] + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
			/*$$binding_groups*/ ctx[7][0].splice(/*$$binding_groups*/ ctx[7][0].indexOf(input), 1);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(77:2) {#each q1Steps[0].browsers as browsers}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section0;
	let h3;
	let t1;
	let t2;
	let t3;
	let ul;
	let t4;
	let div;
	let h1;
	let t5;
	let t6;
	let p0;
	let t7;
	let t8;
	let form;
	let t9;
	let p1;
	let t10;
	let t11;
	let section1;
	let button;
	let t12;
	let mounted;
	let dispose;
	let each_value_1 = /*q1Steps*/ ctx[0];
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*q1Steps*/ ctx[0][0].browsers;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			section0 = element("section");
			h3 = element("h3");
			t1 = text("Search Engine ");
			t2 = text(/*fraction*/ ctx[4]);
			t3 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t4 = space();
			div = element("div");
			h1 = element("h1");
			t5 = text(/*headline*/ ctx[2]);
			t6 = space();
			p0 = element("p");
			t7 = text(/*body*/ ctx[3]);
			t8 = space();
			form = element("form");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t9 = space();
			p1 = element("p");
			t10 = text(/*choice*/ ctx[1]);
			t11 = space();
			section1 = element("section");
			button = element("button");
			t12 = text("Next");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1ux4qy8\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section0 = claim_element(nodes, "SECTION", { id: true, class: true });
			var section0_nodes = children(section0);
			h3 = claim_element(section0_nodes, "H3", {});
			var h3_nodes = children(h3);
			t1 = claim_text(h3_nodes, "Search Engine ");
			t2 = claim_text(h3_nodes, /*fraction*/ ctx[4]);
			h3_nodes.forEach(detach_dev);
			t3 = claim_space(section0_nodes);
			ul = claim_element(section0_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			section0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", {});
			var h1_nodes = children(h1);
			t5 = claim_text(h1_nodes, /*headline*/ ctx[2]);
			h1_nodes.forEach(detach_dev);
			t6 = claim_space(div_nodes);
			p0 = claim_element(div_nodes, "P", {});
			var p0_nodes = children(p0);
			t7 = claim_text(p0_nodes, /*body*/ ctx[3]);
			p0_nodes.forEach(detach_dev);
			t8 = claim_space(div_nodes);
			form = claim_element(div_nodes, "FORM", { class: true });
			var form_nodes = children(form);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(form_nodes);
			}

			form_nodes.forEach(detach_dev);
			t9 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", {});
			var p1_nodes = children(p1);
			t10 = claim_text(p1_nodes, /*choice*/ ctx[1]);
			p1_nodes.forEach(detach_dev);
			t11 = claim_space(div_nodes);
			section1 = claim_element(div_nodes, "SECTION", { id: true });
			var section1_nodes = children(section1);
			button = claim_element(section1_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t12 = claim_text(button_nodes, "Next");
			button_nodes.forEach(detach_dev);
			section1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Search Engine";
			add_location(h3, file, 65, 2, 2042);
			attr_dev(ul, "class", "svelte-1tvhnpi");
			add_location(ul, file, 66, 2, 2078);
			attr_dev(section0, "id", "progress");
			attr_dev(section0, "class", "svelte-1tvhnpi");
			add_location(section0, file, 64, 1, 2016);
			add_location(h1, file, 73, 2, 2216);
			add_location(p0, file, 74, 2, 2238);
			attr_dev(form, "class", "svelte-1tvhnpi");
			add_location(form, file, 75, 2, 2255);
			add_location(p1, file, 83, 2, 2425);
			attr_dev(button, "class", "btn-dark svelte-1tvhnpi");
			add_location(button, file, 85, 3, 2472);
			attr_dev(section1, "id", "next-skip");
			add_location(section1, file, 84, 2, 2443);
			attr_dev(div, "class", "quiz-holder svelte-1tvhnpi");
			add_location(div, file, 72, 1, 2188);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section0, anchor);
			append_dev(section0, h3);
			append_dev(h3, t1);
			append_dev(h3, t2);
			append_dev(section0, t3);
			append_dev(section0, ul);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(ul, null);
			}

			insert_dev(target, t4, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(h1, t5);
			append_dev(div, t6);
			append_dev(div, p0);
			append_dev(p0, t7);
			append_dev(div, t8);
			append_dev(div, form);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(form, null);
			}

			append_dev(div, t9);
			append_dev(div, p1);
			append_dev(p1, t10);
			append_dev(div, t11);
			append_dev(div, section1);
			append_dev(section1, button);
			append_dev(button, t12);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*stepUp*/ ctx[5], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*fraction*/ 16) set_data_dev(t2, /*fraction*/ ctx[4]);

			if (dirty & /*q1Steps*/ 1) {
				each_value_1 = /*q1Steps*/ ctx[0];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(ul, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*headline*/ 4) set_data_dev(t5, /*headline*/ ctx[2]);
			if (dirty & /*body*/ 8) set_data_dev(t7, /*body*/ ctx[3]);

			if (dirty & /*q1Steps, choice*/ 3) {
				each_value = /*q1Steps*/ ctx[0][0].browsers;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(form, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*choice*/ 2) set_data_dev(t10, /*choice*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section0);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();

	function complete() {
		dispatch("message", { q1: "true" });
	}

	let q1Steps = [
		{
			stepNum: "1",
			h2: "What Search Engine do you use?",
			name: "Introduction",
			classn: "complete",
			d: "1 / 3",
			browsers: ["Google Chrome", "DuckDuckGo", "Bing", "Something", "Something"],
			copy: "Did you know everything time you look up something using search engine, you are giving your information to thousands of 3rd party advertisers? Vast amount of your data has been taken from you without a single consent only to manipulate your purchase habit and long-term behavior. In this exercise, we will walk through with you how to avoid...."
		}
	];

	let browserChoice = [
		{
			name: "Google Chrome",
			safety: "37%",
			body: "Google Chrome collectes X number of individual data per year. Google probably knows more about you than even Facebook does, thanks to the things you tell it when you type queries into its search engine. Though that’s just the tip of how it tracks you. It also has its tracking infrastructure embedded on three-quarters of the top million websites. So chances are it’s following what you’re browsing online."
		},
		{
			name: "DuckDuckGo",
			safety: "73%",
			body: "Something something"
		},
		{ name: "DuckDuckGo", safety: 1, body: 1 },
		{ name: 1, safety: 1, body: 1 },
		{ name: 1, safety: 1, body: 1 }
	];

	let isActive;

	function stepUp() {
		$$invalidate(9, q++, q);
		$$invalidate(0, q1Steps[q].classn = "complete", q1Steps);

		if (q == 2) {
			isActive = true;
		}

		if (q > 2) {
			complete();

			stream.getTracks().forEach(function (track) {
				track.stop();
			});
		}
	}

	let choice = ["Google Chrome"];
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Q2> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Q2", $$slots, []);
	const $$binding_groups = [[]];

	function input_change_handler() {
		choice = this.__value;
		$$invalidate(1, choice);
	}

	$$self.$capture_state = () => ({
		onMount,
		afterUpdate,
		createEventDispatcher,
		Completion,
		dispatch,
		complete,
		q1Steps,
		browserChoice,
		isActive,
		stepUp,
		choice,
		q,
		headline,
		body,
		fraction
	});

	$$self.$inject_state = $$props => {
		if ("q1Steps" in $$props) $$invalidate(0, q1Steps = $$props.q1Steps);
		if ("browserChoice" in $$props) browserChoice = $$props.browserChoice;
		if ("isActive" in $$props) isActive = $$props.isActive;
		if ("choice" in $$props) $$invalidate(1, choice = $$props.choice);
		if ("q" in $$props) $$invalidate(9, q = $$props.q);
		if ("headline" in $$props) $$invalidate(2, headline = $$props.headline);
		if ("body" in $$props) $$invalidate(3, body = $$props.body);
		if ("fraction" in $$props) $$invalidate(4, fraction = $$props.fraction);
	};

	let q;
	let headline;
	let body;
	let fraction;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*q1Steps, q*/ 513) {
			 $$invalidate(2, headline = q1Steps[q].h2);
		}

		if ($$self.$$.dirty & /*q1Steps, q*/ 513) {
			 $$invalidate(3, body = q1Steps[q].copy);
		}

		if ($$self.$$.dirty & /*q1Steps, q*/ 513) {
			 $$invalidate(4, fraction = q1Steps[q].d);
		}
	};

	 $$invalidate(9, q = 0);

	return [
		q1Steps,
		choice,
		headline,
		body,
		fraction,
		stepUp,
		input_change_handler,
		$$binding_groups
	];
}

class Q2 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Q2",
			options,
			id: create_fragment.name
		});
	}
}

export default Q2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicTIuYmM3ZWJiOWQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcXVpei9xMi5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0aW1wb3J0IHsgb25Nb3VudCwgYWZ0ZXJVcGRhdGUgfSBmcm9tICdzdmVsdGUnO1xuXHRpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnO1xuXHRpbXBvcnQgQ29tcGxldGlvbiBmcm9tICcuLi8uLi9jb21wb25lbnRzL0NvbXBsZXRpb24uc3ZlbHRlJ1xuXHRcblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblx0XG5cdGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuXHRcdGRpc3BhdGNoKCdtZXNzYWdlJywge1xuXHRcdFx0cTE6ICd0cnVlJ1xuXHRcdH0pO1xuXHR9XG5cdFx0bGV0IHExU3RlcHMgPSBbXG5cdFx0eyBzdGVwTnVtOiAnMScsIFxuXHRcdGgyOiAnV2hhdCBTZWFyY2ggRW5naW5lIGRvIHlvdSB1c2U/JywgXG5cdFx0bmFtZTogJ0ludHJvZHVjdGlvbicsIFxuXHRcdGNsYXNzbjogJ2NvbXBsZXRlJyxcblx0XHRkOiAnMSAvIDMnLFxuXHRcdGJyb3dzZXJzOiBbJ0dvb2dsZSBDaHJvbWUnLCAnRHVja0R1Y2tHbycsICdCaW5nJywgJ1NvbWV0aGluZycsICdTb21ldGhpbmcnXSxcblx0XHRjb3B5OiAnRGlkIHlvdSBrbm93IGV2ZXJ5dGhpbmcgdGltZSB5b3UgbG9vayB1cCBzb21ldGhpbmcgdXNpbmcgc2VhcmNoIGVuZ2luZSwgeW91IGFyZSBnaXZpbmcgeW91ciBpbmZvcm1hdGlvbiB0byB0aG91c2FuZHMgb2YgM3JkIHBhcnR5IGFkdmVydGlzZXJzPyBWYXN0IGFtb3VudCBvZiB5b3VyIGRhdGEgaGFzIGJlZW4gdGFrZW4gZnJvbSB5b3Ugd2l0aG91dCBhIHNpbmdsZSBjb25zZW50IG9ubHkgdG8gbWFuaXB1bGF0ZSB5b3VyIHB1cmNoYXNlIGhhYml0IGFuZCBsb25nLXRlcm0gYmVoYXZpb3IuIEluIHRoaXMgZXhlcmNpc2UsIHdlIHdpbGwgd2FsayB0aHJvdWdoIHdpdGggeW91IGhvdyB0byBhdm9pZC4uLi4nfVxuXHRcdF1cblx0XHRsZXQgYnJvd3NlckNob2ljZSA9IFtcblx0XHRcdHtuYW1lOiAnR29vZ2xlIENocm9tZScsXG5cdFx0XHRzYWZldHk6JzM3JScsXG5cdFx0XHRib2R5OidHb29nbGUgQ2hyb21lIGNvbGxlY3RlcyBYIG51bWJlciBvZiBpbmRpdmlkdWFsIGRhdGEgcGVyIHllYXIuIEdvb2dsZSBwcm9iYWJseSBrbm93cyBtb3JlIGFib3V0IHlvdSB0aGFuIGV2ZW4gRmFjZWJvb2sgZG9lcywgdGhhbmtzIHRvIHRoZSB0aGluZ3MgeW91IHRlbGwgaXQgd2hlbiB5b3UgdHlwZSBxdWVyaWVzIGludG8gaXRzIHNlYXJjaCBlbmdpbmUuIFRob3VnaCB0aGF04oCZcyBqdXN0IHRoZSB0aXAgb2YgaG93IGl0IHRyYWNrcyB5b3UuIEl0IGFsc28gaGFzIGl0cyB0cmFja2luZyBpbmZyYXN0cnVjdHVyZSBlbWJlZGRlZCBvbiB0aHJlZS1xdWFydGVycyBvZiB0aGUgdG9wIG1pbGxpb24gd2Vic2l0ZXMuIFNvIGNoYW5jZXMgYXJlIGl04oCZcyBmb2xsb3dpbmcgd2hhdCB5b3XigJlyZSBicm93c2luZyBvbmxpbmUuJ30sXG5cdFx0XHR7bmFtZTogJ0R1Y2tEdWNrR28nLFxuXHRcdFx0c2FmZXR5Oic3MyUnLFxuXHRcdFx0Ym9keTonU29tZXRoaW5nIHNvbWV0aGluZyd9LFxuXHRcdFx0e25hbWU6ICdEdWNrRHVja0dvJyxcblx0XHRcdHNhZmV0eToxLFxuXHRcdFx0Ym9keToxLH0sXG5cdFx0XHR7bmFtZTogMSxcblx0XHRcdHNhZmV0eToxLFxuXHRcdFx0Ym9keToxLH0sXG5cdFx0XHR7bmFtZTogMSxcblx0XHRcdHNhZmV0eToxLFxuXHRcdFx0Ym9keToxLH0sXG5cdFx0XHRcblx0XHRdXG5cdFx0XG5cdFx0JDogcSA9IDA7XG5cdFx0bGV0IGlzQWN0aXZlO1xuXHRcdGZ1bmN0aW9uIHN0ZXBVcCgpIHtcblx0XHRcdHErKztcblx0XHRcdHExU3RlcHNbcV0uY2xhc3NuID0gJ2NvbXBsZXRlJztcblx0XHRcdGlmIChxID09IDIgKXtcblx0XHRcdFx0aXNBY3RpdmUgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHEgPiAyKSB7XG5cdFx0XHRcdGNvbXBsZXRlKCk7XG5cdFx0XHRcdHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrKSB7XG4gIFx0XHRcdFx0XHR0cmFjay5zdG9wKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQkOiBoZWFkbGluZSA9IHExU3RlcHNbcV0uaDI7XG5cdFx0JDogYm9keSA9IHExU3RlcHNbcV0uY29weTtcblx0XHQkOiBmcmFjdGlvbiA9IHExU3RlcHNbcV0uZDtcblx0XG5cdFx0bGV0IGNob2ljZSA9IFsnR29vZ2xlIENocm9tZSddO1xuXHQ8L3NjcmlwdD5cblx0PHN2ZWx0ZTpoZWFkPlxuXHRcdDx0aXRsZT5TZWFyY2ggRW5naW5lPC90aXRsZT5cblx0PC9zdmVsdGU6aGVhZD5cblx0PHNlY3Rpb24gaWQ9XCJwcm9ncmVzc1wiPlxuXHRcdDxoMz5TZWFyY2ggRW5naW5lIHtmcmFjdGlvbn08L2gzPlxuXHRcdDx1bD5cblx0XHRcdHsjZWFjaCBxMVN0ZXBzIGFzIHN0ZXB9XG5cdFx0XHRcdDxsaSBjbGFzcz17c3RlcC5jbGFzc259ID57c3RlcC5uYW1lfTwvbGk+XG5cdFx0XHR7L2VhY2h9XG5cdFx0PC91bD5cblx0PC9zZWN0aW9uPlxuXHQ8ZGl2IGNsYXNzPSdxdWl6LWhvbGRlcic+XG5cdFx0PGgxPntoZWFkbGluZX08L2gxPlxuXHRcdDxwPntib2R5fTwvcD4gXG5cdFx0PGZvcm0+XG5cdFx0eyNlYWNoIHExU3RlcHNbMF0uYnJvd3NlcnMgYXMgYnJvd3NlcnN9XG5cdFx0XHQ8bGFiZWw+XG5cdFx0XHRcdDxpbnB1dCB0eXBlPXJhZGlvIGJpbmQ6Z3JvdXA9e2Nob2ljZX0gdmFsdWU9e2Jyb3dzZXJzfT5cblx0XHRcdFx0XHR7YnJvd3NlcnN9XG5cdFx0XHQ8L2xhYmVsPlxuXHRcdHsvZWFjaH1cblx0XHQ8L2Zvcm0+XG5cdFx0PHA+e2Nob2ljZX08L3A+XG5cdFx0PHNlY3Rpb24gaWQ9J25leHQtc2tpcCc+IFxuXHRcdFx0PGJ1dHRvbiBvbjpjbGljaz17c3RlcFVwfSBjbGFzcz0nYnRuLWRhcmsnPk5leHQ8L2J1dHRvbj5cblx0XHQ8L3NlY3Rpb24+XG5cdFx0XG5cdDwvZGl2PlxuXHRcdFxuXHRcdFxuXHQ8c3R5bGU+XG5cdFx0bWFpbntcblx0XHRcdGZsZXgtZmxvdzogcm93IHdyYXA7XG5cdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG5cdFx0fVxuXHQgICAucXVpei1ob2xkZXIge1xuXHRcdCAgIGRpc3BsYXk6IGJsb2NrO1xuXHRcdCAgIHdpZHRoOiA2NXZ3OyAvKiA3Mi41IG9yaWdpbmFseSAqL1xuXHRcdCAgIGxlZnQ6IDIwdnc7XG5cdFx0ICAgaGVpZ2h0OiAxMDB2aDtcblx0XHQgICBwYWRkaW5nOiAyMHB4IDUwcHg7XG5cdCAgIH1cblx0ICAgLnN0ZXB7XG5cdFx0XHRtYXJnaW4tYm90dG9tOiA1NXB4O1xuXHQgICB9XG5cdCAgICNwcm9ncmVzcyB7XG5cdFx0ICAgbWFyZ2luLXRvcDogNTBweDtcblx0ICAgfVxuXHQgICB1bCB7XG5cdFx0ICAgcGFkZGluZy1pbmxpbmUtc3RhcnQ6IDE1cHg7XG5cdCAgIH1cblx0ICAgbGkge1xuXHRcdCAgIG1hcmdpbjogMzBweCAwcHg7XG5cdCAgIH1cblx0ICAgLmluY29tcGxldGUge1xuXHRcdFx0Y29sb3I6ICNhMGEwYTA7XG5cdFx0XHRsaXN0LXN0eWxlLXR5cGU6IGNpcmNsZTtcblx0XHR9XG5cdFx0LmNvbXBsZXRlIHtcblx0XHRcdGxpc3Qtc3R5bGUtdHlwZTogZGlzYztcblx0XHR9XG5cdFx0LlNpZGUtaGVhZGxpbmUge1xuXHRcdFx0Zm9udC1zaXplOiAyNHB4O1xuXHRcdFx0Zm9udC13ZWlnaHQ6IDcwMDtcblx0XHR9XG5cdFx0LmJ0bi1kYXJrIHtcblx0XHRcdGNvbG9yOndoaXRlO1xuXHRcdFx0YmFja2dyb3VuZDogIzBGMjAzMztcblx0XHRcdGJvcmRlci1yYWRpdXM6IDZweDtcblx0XHRcdHdpZHRoOiAzMCU7XG5cdFx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdFx0XHRwYWRkaW5nOiA1cHggMTBweDtcblx0XHR9XG5cdFx0YnV0dG9uIHtcblx0XHRcdGJvcmRlcjogbm9uZTtcblx0XHRcdHBhZGRpbmc6IDVweCAxMHB4O1xuXHRcdH1cblx0XHRmb3JtIHtcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRmbGV4LWZsb3c6IGNvbHVtbjtcblx0XHR9XG5cdFx0bGFiZWwge1xuXHRcdFx0cGFkZGluZzogMTBweDtcblx0XHR9XG5cdDwvc3R5bGU+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFvRThCLEdBQUksS0FBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7dUVBQXhCLEdBQUksS0FBQyxNQUFNOzs7Ozs7OztnRUFBSSxHQUFJLEtBQUMsSUFBSTs7a0dBQXhCLEdBQUksS0FBQyxNQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFXcEIsR0FBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29EQURtQyxHQUFROzs7Ozs7Ozs7O2dEQUF2QixHQUFNOzs7Ozs7Ozs7Ozt3RkFBUyxHQUFROzs7Ozs7O2lEQUF2QixHQUFNOzs7c0VBQ2xDLEdBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dDQVpKLEdBQU87Ozs7a0NBQVosTUFBSTs7Ozs4QkFTQSxHQUFPLElBQUMsQ0FBQyxFQUFFLFFBQVE7Ozs7Z0NBQXhCLE1BQUk7Ozs7Ozs7Ozs7MEJBWGEsR0FBUTs7Ozs7Ozs7Ozs7MEJBUXRCLEdBQVE7OztzQkFDVCxHQUFJOzs7Ozs7Ozs7O3lCQVNKLEdBQU07Ozs7Ozs7Ozs7Ozs7Ozs7MENBbEJTLEdBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7OzBDQVF0QixHQUFROzs7OztzQ0FDVCxHQUFJOzs7Ozs7Ozs7Ozs7Ozt5Q0FTSixHQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cURBRVMsR0FBTTs7Ozs7OERBcEJOLEdBQVE7OzsrQkFFbkIsR0FBTzs7OztpQ0FBWixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O3dDQUFKLE1BQUk7Ozs2REFNRixHQUFRO3FEQUNULEdBQUk7Ozs2QkFFRCxHQUFPLElBQUMsQ0FBQyxFQUFFLFFBQVE7Ozs7K0JBQXhCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQUosTUFBSTs7OzBEQU9GLEdBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0E5RUwsUUFBUSxHQUFHLHFCQUFxQjs7VUFFN0IsUUFBUTtFQUNoQixRQUFRLENBQUMsU0FBUyxJQUNqQixFQUFFLEVBQUUsTUFBTTs7O0tBR1AsT0FBTzs7R0FDVCxPQUFPLEVBQUUsR0FBRztHQUNkLEVBQUUsRUFBRSxnQ0FBZ0M7R0FDcEMsSUFBSSxFQUFFLGNBQWM7R0FDcEIsTUFBTSxFQUFFLFVBQVU7R0FDbEIsQ0FBQyxFQUFFLE9BQU87R0FDVixRQUFRLEdBQUcsZUFBZSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFdBQVc7R0FDMUUsSUFBSSxFQUFFLDBWQUEwVjs7OztLQUU1VixhQUFhOztHQUNmLElBQUksRUFBRSxlQUFlO0dBQ3RCLE1BQU0sRUFBQyxLQUFLO0dBQ1osSUFBSSxFQUFDLHdaQUF3Wjs7O0dBQzVaLElBQUksRUFBRSxZQUFZO0dBQ25CLE1BQU0sRUFBQyxLQUFLO0dBQ1osSUFBSSxFQUFDLHFCQUFxQjs7SUFDekIsSUFBSSxFQUFFLFlBQVksRUFDbkIsTUFBTSxFQUFDLENBQUMsRUFDUixJQUFJLEVBQUMsQ0FBQztJQUNMLElBQUksRUFBRSxDQUFDLEVBQ1IsTUFBTSxFQUFDLENBQUMsRUFDUixJQUFJLEVBQUMsQ0FBQztJQUNMLElBQUksRUFBRSxDQUFDLEVBQ1IsTUFBTSxFQUFDLENBQUMsRUFDUixJQUFJLEVBQUMsQ0FBQzs7O0tBS0gsUUFBUTs7VUFDSCxNQUFNO2tCQUNkLENBQUM7a0JBQ0QsT0FBTyxDQUFDLENBQUMsRUFBRSxNQUFNLEdBQUcsVUFBVTs7TUFDMUIsQ0FBQyxJQUFJLENBQUM7R0FDVCxRQUFRLEdBQUcsSUFBSTs7O01BRVosQ0FBQyxHQUFHLENBQUM7R0FDUixRQUFROztHQUNSLE1BQU0sQ0FBQyxTQUFTLEdBQUcsT0FBTyxXQUFVLEtBQUs7SUFDdEMsS0FBSyxDQUFDLElBQUk7Ozs7O0tBUVgsTUFBTSxJQUFJLGVBQWU7Ozs7Ozs7Ozs7OztFQW1CRyxNQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkF2Qm5DLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUU7Ozs7b0JBQ3hCLElBQUksR0FBRyxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUk7Ozs7b0JBQ3RCLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUM7Ozs7a0JBakJ2QixDQUFDLEdBQUcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
