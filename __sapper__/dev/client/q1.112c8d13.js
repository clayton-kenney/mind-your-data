import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, o as createEventDispatcher, N as afterUpdate, O as onDestroy, v as validate_slots, P as onMount, p as globals, a as space, e as element, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, g as children, k as add_location, l as insert_dev, A as add_render_callback, Q as create_in_transition, R as create_out_transition, j as attr_dev, n as noop, t as text, h as claim_text, m as append_dev, T as listen_dev, U as run_all } from './client.988af906.js';
import { s as slide, b as sineInOut } from './index.77fae157.js';

/* src/routes/quiz/q1.svelte generated by Svelte v3.23.2 */

const { console: console_1, document: document_1 } = globals;
const file = "src/routes/quiz/q1.svelte";

// (86:0) {:else}
function create_else_block(ctx) {
	let video_1;

	const block = {
		c: function create() {
			video_1 = element("video");
			this.h();
		},
		l: function claim(nodes) {
			video_1 = claim_element(nodes, "VIDEO", { autoplay: true, id: true });
			children(video_1).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			video_1.autoplay = "true";
			attr_dev(video_1, "id", "videoElement");
			add_location(video_1, file, 86, 4, 3011);
		},
		m: function mount(target, anchor) {
			insert_dev(target, video_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(video_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(86:0) {:else}",
		ctx
	});

	return block;
}

// (81:15) 
function create_if_block_2(ctx) {
	let div;
	let video_1;
	let t0;
	let p0;
	let t1;
	let t2;
	let p1;
	let t3;
	let t4;
	let button;
	let t5;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			video_1 = element("video");
			t0 = space();
			p0 = element("p");
			t1 = text("Cover your webcam");
			t2 = space();
			p1 = element("p");
			t3 = text("You haven’t covered your webcame or did not do it properly. Please cover your webcam completely to proceed to the next step.");
			t4 = space();
			button = element("button");
			t5 = text("Onwards to the next challenge");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			video_1 = claim_element(div_nodes, "VIDEO", { autoplay: true, id: true });
			children(video_1).forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			p0 = claim_element(nodes, "P", { id: true, class: true });
			var p0_nodes = children(p0);
			t1 = claim_text(p0_nodes, "Cover your webcam");
			p0_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			p1 = claim_element(nodes, "P", { id: true, class: true });
			var p1_nodes = children(p1);
			t3 = claim_text(p1_nodes, "You haven’t covered your webcame or did not do it properly. Please cover your webcam completely to proceed to the next step.");
			p1_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t5 = claim_text(button_nodes, "Onwards to the next challenge");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			video_1.autoplay = "true";
			attr_dev(video_1, "id", "videoElement");
			add_location(video_1, file, 81, 29, 2677);
			attr_dev(div, "class", "video-holder svelte-1sss75x");
			add_location(div, file, 81, 3, 2651);
			attr_dev(p0, "id", "alert");
			attr_dev(p0, "class", "svelte-1sss75x");
			add_location(p0, file, 82, 4, 2737);
			attr_dev(p1, "id", "not-covered");
			attr_dev(p1, "class", "svelte-1sss75x");
			add_location(p1, file, 83, 4, 2777);
			attr_dev(button, "class", "svelte-1sss75x");
			add_location(button, file, 84, 4, 2930);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, video_1);
			insert_dev(target, t0, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, button, anchor);
			append_dev(button, t5);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*incomplete*/ ctx[1], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(81:15) ",
		ctx
	});

	return block;
}

// (72:15) 
function create_if_block_1(ctx) {
	let section;
	let h2;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let div;
	let button0;
	let t4;
	let t5;
	let button1;
	let t6;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			section = element("section");
			h2 = element("h2");
			t0 = text("Cover Your Webcam");
			t1 = space();
			p = element("p");
			t2 = text("Cover your webcam. You can get fancy removable stickers for this purpose, but for now, find a sticky note or piece of masking tape and cover your webcam when it’s not in use (like right now).");
			t3 = space();
			div = element("div");
			button0 = element("button");
			t4 = text("It's covered");
			t5 = space();
			button1 = element("button");
			t6 = text("No Thanks, It's a hassle");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Cover Your Webcam");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			p = claim_element(section_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Cover your webcam. You can get fancy removable stickers for this purpose, but for now, find a sticky note or piece of masking tape and cover your webcam when it’s not in use (like right now).");
			p_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			button0 = claim_element(div_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t4 = claim_text(button0_nodes, "It's covered");
			button0_nodes.forEach(detach_dev);
			t5 = claim_space(div_nodes);
			button1 = claim_element(div_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			t6 = claim_text(button1_nodes, "No Thanks, It's a hassle");
			button1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 73, 1, 2227);
			add_location(p, file, 74, 1, 2255);
			attr_dev(button0, "class", "svelte-1sss75x");
			add_location(button0, file, 76, 8, 2492);
			attr_dev(button1, "class", "svelte-1sss75x");
			add_location(button1, file, 77, 8, 2549);
			attr_dev(div, "class", "button-holder svelte-1sss75x");
			add_location(div, file, 75, 1, 2456);
			add_location(section, file, 72, 0, 2216);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t0);
			append_dev(section, t1);
			append_dev(section, p);
			append_dev(p, t2);
			append_dev(section, t3);
			append_dev(section, div);
			append_dev(div, button0);
			append_dev(button0, t4);
			append_dev(div, t5);
			append_dev(div, button1);
			append_dev(button1, t6);

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*advance*/ ctx[2], false, false, false),
					listen_dev(button1, "click", /*advanceTwo*/ ctx[3], false, false, false)
				];

				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(72:15) ",
		ctx
	});

	return block;
}

// (66:0) {#if q==0}
function create_if_block(ctx) {
	let section;
	let h2;
	let t0;
	let t1;
	let p;
	let t2;
	let br;
	let t3;
	let t4;
	let button;
	let t5;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			section = element("section");
			h2 = element("h2");
			t0 = text("Is your Webcam Covered?");
			t1 = space();
			p = element("p");
			t2 = text("It’s likely your computer already has a built-in camera, and it’s possible for that camera to be used to spy on you.  ");
			br = element("br");
			t3 = text("  If your webcam for whatever reason has been hacked, the person on the other side can take pictures and video of anything or anyone. No, this isn’t just paranoia–a recent survey conducted by HP found that 10% in the U.S. either know someone whose webcam was hacked or have had their own webcam hacked.");
			t4 = space();
			button = element("button");
			t5 = text("Continue");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Is your Webcam Covered?");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			p = claim_element(section_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "It’s likely your computer already has a built-in camera, and it’s possible for that camera to be used to spy on you.  ");
			br = claim_element(p_nodes, "BR", {});
			t3 = claim_text(p_nodes, "  If your webcam for whatever reason has been hacked, the person on the other side can take pictures and video of anything or anyone. No, this isn’t just paranoia–a recent survey conducted by HP found that 10% in the U.S. either know someone whose webcam was hacked or have had their own webcam hacked.");
			p_nodes.forEach(detach_dev);
			t4 = claim_space(section_nodes);
			button = claim_element(section_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t5 = claim_text(button_nodes, "Continue");
			button_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 67, 1, 1676);
			add_location(br, file, 68, 122, 1832);
			add_location(p, file, 68, 1, 1711);
			attr_dev(button, "class", "svelte-1sss75x");
			add_location(button, file, 69, 1, 2144);
			add_location(section, file, 66, 0, 1665);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t0);
			append_dev(section, t1);
			append_dev(section, p);
			append_dev(p, t2);
			append_dev(p, br);
			append_dev(p, t3);
			append_dev(section, t4);
			append_dev(section, button);
			append_dev(button, t5);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*advance*/ ctx[2], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(66:0) {#if q==0}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let div;
	let div_intro;
	let div_outro;
	let current;

	function select_block_type(ctx, dirty) {
		if (/*q*/ ctx[0] == 0) return create_if_block;
		if (/*q*/ ctx[0] == 1) return create_if_block_1;
		if (/*q*/ ctx[0] == 2) return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			t = space();
			div = element("div");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-11mvzac\"]", document_1.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document_1.title = "Webcam Challenge";
			add_location(div, file, 64, 0, 1525);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);
			if_block.m(div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);

				if (!div_intro) div_intro = create_in_transition(div, slide, {
					delay: 200,
					duration: 1000,
					easing: sineInOut
				});

				div_intro.start();
			});

			current = true;
		},
		o: function outro(local) {
			if (div_intro) div_intro.invalidate();

			div_outro = create_out_transition(div, slide, {
				delay: 100,
				duration: 800,
				easing: sineInOut
			});

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div);
			if_block.d();
			if (detaching && div_outro) div_outro.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();

	//confirm comletion of quiz to master quiz component
	function complete() {
		dispatch("message", {
			question: 0, //Q-1 becaue of array
			complete: "true"
		});
	}

	function incomplete() {
		dispatch("message", {
			question: 0, //Q-1 becaue of array
			complete: "false"
		});
	}

	let q = 0;
	let isActive;

	function advance() {
		$$invalidate(0, q++, q);
		console.log(q);

		if ($$invalidate(0, q = 2)) {
			isActive = true;
		}
	}

	function advanceTwo() {
		$$invalidate(0, q += 2);
		console.log(q);
	}

	//Start Video on update
	let video;

	afterUpdate(async () => {
		video = document.querySelector("#videoElement");

		if (navigator.mediaDevices.getUserMedia) {
			navigator.mediaDevices.getUserMedia({ video: true }).then(function (stream) {
				video.srcObject = stream;
			}).catch(function (err0r) {
				console.log("Not loaded");
			});
		}
	});

	//stop video function on end of component   
	onDestroy(async () => {

		video.srcObject = null;
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Q1> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Q1", $$slots, []);

	$$self.$capture_state = () => ({
		createEventDispatcher,
		onMount,
		afterUpdate,
		onDestroy,
		slide,
		sineInOut,
		dispatch,
		complete,
		incomplete,
		q,
		isActive,
		advance,
		advanceTwo,
		video
	});

	$$self.$inject_state = $$props => {
		if ("q" in $$props) $$invalidate(0, q = $$props.q);
		if ("isActive" in $$props) isActive = $$props.isActive;
		if ("video" in $$props) video = $$props.video;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [q, incomplete, advance, advanceTwo];
}

class Q1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Q1",
			options,
			id: create_fragment.name
		});
	}
}

export default Q1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicTEuMTEyYzhkMTMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcXVpei9xMS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnO1xuICAgIGltcG9ydCB7IG9uTW91bnQsIGFmdGVyVXBkYXRlLCBvbkRlc3Ryb3kgfSBmcm9tICdzdmVsdGUnO1xuICAgIGltcG9ydCB7IHNsaWRlIH0gZnJvbSAnc3ZlbHRlL3RyYW5zaXRpb24nO1xuICAgIGltcG9ydCB7IHNpbmVJbk91dCB9IGZyb20gJ3N2ZWx0ZS9lYXNpbmcnO1xuXG5cblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuXHQvL2NvbmZpcm0gY29tbGV0aW9uIG9mIHF1aXogdG8gbWFzdGVyIHF1aXogY29tcG9uZW50XG5cdGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuXHRcdGRpc3BhdGNoKCdtZXNzYWdlJywge1xuXHRcdFx0cXVlc3Rpb246IDAsIC8vUS0xIGJlY2F1ZSBvZiBhcnJheVxuXHRcdFx0Y29tcGxldGU6ICd0cnVlJ1xuXHRcdH0pO1xuXHR9XG5cdGZ1bmN0aW9uIGluY29tcGxldGUoKSB7XG5cdFx0ZGlzcGF0Y2goJ21lc3NhZ2UnLCB7XG5cdFx0XHRxdWVzdGlvbjogMCwgLy9RLTEgYmVjYXVlIG9mIGFycmF5XG5cdFx0XHRjb21wbGV0ZTogJ2ZhbHNlJ1xuXHRcdH0pO1xuXHR9XG4gICAgbGV0IHEgPSAwO1xuICAgIGxldCBpc0FjdGl2ZTtcblx0ZnVuY3Rpb24gYWR2YW5jZSgpIHtcblx0XHRxKys7XG4gICAgICAgIGNvbnNvbGUubG9nKHEpO1xuICAgICAgICBpZiAocT0yKSB7XG4gICAgICAgICAgICBpc0FjdGl2ZT0gdHJ1ZTtcbiAgICAgICAgfVxuXHR9XG5cdGZ1bmN0aW9uIGFkdmFuY2VUd28oKSB7XG5cdFx0cSs9Mjtcblx0XHRjb25zb2xlLmxvZyhxKTtcbiAgICB9XG4gICAgXG4gICAgLy9TdGFydCBWaWRlbyBvbiB1cGRhdGVcbiAgICBsZXQgdmlkZW87XG5cdGFmdGVyVXBkYXRlKGFzeW5jKCkgPT4ge1xuXHR2aWRlbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdmlkZW9FbGVtZW50XCIpO1xuXHRpZiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpIHtcbiAgXHRuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7IHZpZGVvOiB0cnVlIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHN0cmVhbSkge1xuXHRcdFx0dmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtO1xuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIwcikge1xuICAgICAgY29uc29sZS5sb2coXCJOb3QgbG9hZGVkXCIpO1xuICAgIH0pO1xuXHRcdH1cbn0pXG4vL3N0b3AgdmlkZW8gZnVuY3Rpb24gb24gZW5kIG9mIGNvbXBvbmVudCAgIFxuICAgIG9uRGVzdHJveShhc3luYygpID0+IHsgXG4gICAgICAgIGZ1bmN0aW9uIHN0b3BTdHJlYW1lZFZpZGVvKHZpZGVvKSB7IFxuICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gdmlkZW8uc3JjT2JqZWN0O1xuICAgICAgICAgICAgY29uc3QgdHJhY2tzID0gc3RyZWFtLmdldFRyYWNrcygpO1xuICAgICAgICAgICAgICAgIHRyYWNrc1swXS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZpZGVvLnNyY09iamVjdCA9IG51bGw7XG4gICAgICAgICAgICB9KTtcbjwvc2NyaXB0PlxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+V2ViY2FtIENoYWxsZW5nZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPGRpdiBpbjpzbGlkZT1cInt7ZGVsYXk6IDIwMCwgZHVyYXRpb246IDEwMDAsIGVhc2luZzogc2luZUluT3V0fX1cIiBvdXQ6c2xpZGU9XCJ7e2RlbGF5OiAxMDAsIGR1cmF0aW9uOiA4MDAsIGVhc2luZzogc2luZUluT3V0fX1cIiA+XG57I2lmIHE9PTB9XG48c2VjdGlvbj5cblx0PGgyPklzIHlvdXIgV2ViY2FtIENvdmVyZWQ/PC9oMj4gXG5cdDxwPkl04oCZcyBsaWtlbHkgeW91ciBjb21wdXRlciBhbHJlYWR5IGhhcyBhIGJ1aWx0LWluIGNhbWVyYSwgYW5kIGl04oCZcyBwb3NzaWJsZSBmb3IgdGhhdCBjYW1lcmEgdG8gYmUgdXNlZCB0byBzcHkgb24geW91LiAgPGJyPiAgSWYgeW91ciB3ZWJjYW0gZm9yIHdoYXRldmVyIHJlYXNvbiBoYXMgYmVlbiBoYWNrZWQsIHRoZSBwZXJzb24gb24gdGhlIG90aGVyIHNpZGUgY2FuIHRha2UgcGljdHVyZXMgYW5kIHZpZGVvIG9mIGFueXRoaW5nIG9yIGFueW9uZS4gTm8sIHRoaXMgaXNu4oCZdCBqdXN0IHBhcmFub2lh4oCTYSByZWNlbnQgc3VydmV5IGNvbmR1Y3RlZCBieSBIUCBmb3VuZCB0aGF0IDEwJSBpbiB0aGUgVS5TLiBlaXRoZXIga25vdyBzb21lb25lIHdob3NlIHdlYmNhbSB3YXMgaGFja2VkIG9yIGhhdmUgaGFkIHRoZWlyIG93biB3ZWJjYW0gaGFja2VkLjwvcD5cblx0PGJ1dHRvbiBvbjpjbGljaz17YWR2YW5jZX0+Q29udGludWU8L2J1dHRvbj5cbjwvc2VjdGlvbj5cbns6ZWxzZSBpZiBxPT0xfVxuPHNlY3Rpb24+XG5cdDxoMj5Db3ZlciBZb3VyIFdlYmNhbTwvaDI+XG5cdDxwPkNvdmVyIHlvdXIgd2ViY2FtLiBZb3UgY2FuIGdldCBmYW5jeSByZW1vdmFibGUgc3RpY2tlcnMgZm9yIHRoaXMgcHVycG9zZSwgYnV0IGZvciBub3csIGZpbmQgYSBzdGlja3kgbm90ZSBvciBwaWVjZSBvZiBtYXNraW5nIHRhcGUgYW5kIGNvdmVyIHlvdXIgd2ViY2FtIHdoZW4gaXTigJlzIG5vdCBpbiB1c2UgKGxpa2UgcmlnaHQgbm93KS4gPC9wPlxuXHQ8ZGl2IGNsYXNzPVwiYnV0dG9uLWhvbGRlclwiPlxuICAgICAgICA8YnV0dG9uIG9uOmNsaWNrPXthZHZhbmNlfT5JdCdzIGNvdmVyZWQ8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBvbjpjbGljaz17YWR2YW5jZVR3b30+Tm8gVGhhbmtzLCBJdCdzIGEgaGFzc2xlPC9idXR0b24+XG5cdDwvZGl2PlxuPC9zZWN0aW9uPlxuezplbHNlIGlmIHE9PTJ9XG4gICA8ZGl2IGNsYXNzPVwidmlkZW8taG9sZGVyXCI+PHZpZGVvIGF1dG9wbGF5PVwidHJ1ZVwiIGlkPVwidmlkZW9FbGVtZW50XCI+PC92aWRlbz48L2Rpdj5cbiAgICA8cCBpZD1cImFsZXJ0XCI+Q292ZXIgeW91ciB3ZWJjYW08L3A+XG4gICAgPHAgaWQ9XCJub3QtY292ZXJlZFwiPllvdSBoYXZlbuKAmXQgY292ZXJlZCB5b3VyIHdlYmNhbWUgb3IgZGlkIG5vdCBkbyBpdCBwcm9wZXJseS4gUGxlYXNlIGNvdmVyIHlvdXIgd2ViY2FtIGNvbXBsZXRlbHkgdG8gcHJvY2VlZCB0byB0aGUgbmV4dCBzdGVwLjwvcD5cbiAgICA8YnV0dG9uIG9uOmNsaWNrPXtpbmNvbXBsZXRlfT5PbndhcmRzIHRvIHRoZSBuZXh0IGNoYWxsZW5nZTwvYnV0dG9uPlxuezplbHNlfVxuICAgIDx2aWRlbyBhdXRvcGxheT1cInRydWVcIiBpZD1cInZpZGVvRWxlbWVudFwiPjwvdmlkZW8+XG57L2lmfVxuPC9kaXY+XG48c3R5bGU+XG4gICAuYnV0dG9uLWhvbGRlciB7XG5cdHdpZHRoOiAyN3Z3O1xuXHRkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgIH1cbiAgIC52aWRlby1ob2xkZXJ7XG4gICAgICAgd2lkdGg6IDEwMCU7XG4gICB9XG4gICBidXR0b24ge1xuXHQgICBwYWRkaW5nOiAxMHB4IDIwcHg7XG5cdCAgIG1hcmdpbjogMTBweDtcblx0ICAgYm9yZGVyOiBibGFjayBzb2xpZCAwcHg7XG5cdCAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgIH1cbiAgICNhbGVydCB7XG4gICAgICAgY29sb3I6IHJlZDtcbiAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICBmb250LXNpemU6IDI0cHg7XG4gICB9XG4gICAjbm90LWNvdmVyZWQge1xuICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgYmFja2dyb3VuZDogI0ZGRUVFRTtcbiAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgYm9yZGVyOiBub25lO1xuICAgfVxuPC9zdHlsZT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5REFvRnNCLEdBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4Q0FSTixHQUFPO2lEQUNQLEdBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0RBUmpCLEdBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFKckIsR0FBQyxPQUFFLENBQUM7WUFNQyxHQUFDLE9BQUUsQ0FBQztZQVNKLEdBQUMsT0FBRSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FoQkcsS0FBSyxFQUFFLEdBQUc7S0FBRSxRQUFRLEVBQUUsSUFBSTtLQUFFLE1BQU0sRUFBRSxTQUFTOzs7Ozs7Ozs7Ozs7SUFBaUIsS0FBSyxFQUFFLEdBQUc7SUFBRSxRQUFRLEVBQUUsR0FBRztJQUFFLE1BQU0sRUFBRSxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BekRwSCxRQUFRLEdBQUcscUJBQXFCOzs7VUFHN0IsUUFBUTtFQUNoQixRQUFRLENBQUMsU0FBUztHQUNqQixRQUFRLEVBQUUsQ0FBQztHQUNYLFFBQVEsRUFBRSxNQUFNOzs7O1VBR1QsVUFBVTtFQUNsQixRQUFRLENBQUMsU0FBUztHQUNqQixRQUFRLEVBQUUsQ0FBQztHQUNYLFFBQVEsRUFBRSxPQUFPOzs7O0tBR1osQ0FBQyxHQUFHLENBQUM7S0FDTCxRQUFROztVQUNOLE9BQU87a0JBQ2YsQ0FBQztFQUNLLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7c0JBQ1QsQ0FBQyxHQUFDLENBQUM7R0FDSCxRQUFRLEdBQUUsSUFBSTs7OztVQUdoQixVQUFVO2tCQUNsQixDQUFDLElBQUUsQ0FBQztFQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7OztLQUlQLEtBQUs7O0NBQ1osV0FBVztFQUNYLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLGVBQWU7O01BQzFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsWUFBWTtHQUNyQyxTQUFTLENBQUMsWUFBWSxDQUFDLFlBQVksR0FBRyxLQUFLLEVBQUUsSUFBSSxJQUMvQyxJQUFJLFdBQVcsTUFBTTtJQUN2QixLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU07TUFFdEIsS0FBSyxXQUFXLEtBQUs7SUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZOzs7Ozs7Q0FLMUIsU0FBUzs7RUFPRyxLQUFLLENBQUMsU0FBUyxHQUFHLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
