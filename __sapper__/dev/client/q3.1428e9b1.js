import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, o as validate_store, p as component_subscribe, x as onMount, r as createEventDispatcher, v as validate_slots, w as afterUpdate, a as space, z as create_component, q as query_selector_all, b as detach_dev, c as claim_space, A as claim_component, l as insert_dev, B as mount_component, E as transition_in, C as transition_out, H as destroy_component, N as set_store_value, J as group_outros, D as check_outros, e as element, t as text, f as claim_element, g as children, h as claim_text, k as add_location, j as attr_dev, m as append_dev, I as set_data_dev, V as listen_dev, W as run_all } from './client.ca94406f.js';
import './index.cccde779.js';
import './index.01b49c54.js';
import { T as TransHelp } from './TransHelp.4ee9171d.js';
import { c as count, s as step, q as quizSteps } from './store.c528e988.js';
import { C as Complete, B as Back } from './Back.64a24eb9.js';
import { B as Btn } from './Btn.44a8bd55.js';

/* src/routes/quiz/q3.svelte generated by Svelte v3.23.2 */
const file = "src/routes/quiz/q3.svelte";

// (116:2) {:else}
function create_else_block(ctx) {
	let h1;
	let t0;
	let t1;
	let h2;
	let t2;
	let t3;
	let ul;
	let li0;
	let t4;
	let t5;
	let li1;
	let t6;
	let t7;
	let li2;
	let t8;
	let t9;
	let li3;
	let t10;
	let t11;
	let li4;
	let t12;
	let t13;
	let h30;
	let t14;
	let t15;
	let h31;
	let t16;
	let t17;
	let div;
	let complete0;
	let t18;
	let complete1;
	let current;

	complete0 = new Complete({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	complete1 = new Complete({
			props: {
				success: false,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("Switch Search Engine");
			t1 = space();
			h2 = element("h2");
			t2 = text("Here is a list of our recomended search engines");
			t3 = space();
			ul = element("ul");
			li0 = element("li");
			t4 = text("Option 1");
			t5 = space();
			li1 = element("li");
			t6 = text("Option 2");
			t7 = space();
			li2 = element("li");
			t8 = text("Option 3");
			t9 = space();
			li3 = element("li");
			t10 = text("Option 4");
			t11 = space();
			li4 = element("li");
			t12 = text("Option 5");
			t13 = space();
			h30 = element("h3");
			t14 = text("How to change your default browser for windows");
			t15 = space();
			h31 = element("h3");
			t16 = text("how to change your defualt browser for mac");
			t17 = space();
			div = element("div");
			create_component(complete0.$$.fragment);
			t18 = space();
			create_component(complete1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Switch Search Engine");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t2 = claim_text(h2_nodes, "Here is a list of our recomended search engines");
			h2_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			t4 = claim_text(li0_nodes, "Option 1");
			li0_nodes.forEach(detach_dev);
			t5 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			t6 = claim_text(li1_nodes, "Option 2");
			li1_nodes.forEach(detach_dev);
			t7 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			t8 = claim_text(li2_nodes, "Option 3");
			li2_nodes.forEach(detach_dev);
			t9 = claim_space(ul_nodes);
			li3 = claim_element(ul_nodes, "LI", { class: true });
			var li3_nodes = children(li3);
			t10 = claim_text(li3_nodes, "Option 4");
			li3_nodes.forEach(detach_dev);
			t11 = claim_space(ul_nodes);
			li4 = claim_element(ul_nodes, "LI", { class: true });
			var li4_nodes = children(li4);
			t12 = claim_text(li4_nodes, "Option 5");
			li4_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			t13 = claim_space(nodes);
			h30 = claim_element(nodes, "H3", {});
			var h30_nodes = children(h30);
			t14 = claim_text(h30_nodes, "How to change your default browser for windows");
			h30_nodes.forEach(detach_dev);
			t15 = claim_space(nodes);
			h31 = claim_element(nodes, "H3", {});
			var h31_nodes = children(h31);
			t16 = claim_text(h31_nodes, "how to change your defualt browser for mac");
			h31_nodes.forEach(detach_dev);
			t17 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(complete0.$$.fragment, div_nodes);
			t18 = claim_space(div_nodes);
			claim_component(complete1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 116, 3, 3605);
			add_location(h2, file, 117, 3, 3638);
			attr_dev(li0, "class", "svelte-gs0uzf");
			add_location(li0, file, 119, 4, 3707);
			attr_dev(li1, "class", "svelte-gs0uzf");
			add_location(li1, file, 120, 4, 3729);
			attr_dev(li2, "class", "svelte-gs0uzf");
			add_location(li2, file, 121, 4, 3751);
			attr_dev(li3, "class", "svelte-gs0uzf");
			add_location(li3, file, 122, 4, 3773);
			attr_dev(li4, "class", "svelte-gs0uzf");
			add_location(li4, file, 123, 4, 3795);
			attr_dev(ul, "class", "svelte-gs0uzf");
			add_location(ul, file, 118, 3, 3698);
			add_location(h30, file, 125, 3, 3825);
			add_location(h31, file, 126, 3, 3885);
			attr_dev(div, "class", "button-holder svelte-gs0uzf");
			add_location(div, file, 127, 2, 3940);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, ul, anchor);
			append_dev(ul, li0);
			append_dev(li0, t4);
			append_dev(ul, t5);
			append_dev(ul, li1);
			append_dev(li1, t6);
			append_dev(ul, t7);
			append_dev(ul, li2);
			append_dev(li2, t8);
			append_dev(ul, t9);
			append_dev(ul, li3);
			append_dev(li3, t10);
			append_dev(ul, t11);
			append_dev(ul, li4);
			append_dev(li4, t12);
			insert_dev(target, t13, anchor);
			insert_dev(target, h30, anchor);
			append_dev(h30, t14);
			insert_dev(target, t15, anchor);
			insert_dev(target, h31, anchor);
			append_dev(h31, t16);
			insert_dev(target, t17, anchor);
			insert_dev(target, div, anchor);
			mount_component(complete0, div, null);
			append_dev(div, t18);
			mount_component(complete1, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const complete0_changes = {};

			if (dirty & /*$$scope*/ 2097152) {
				complete0_changes.$$scope = { dirty, ctx };
			}

			complete0.$set(complete0_changes);
			const complete1_changes = {};

			if (dirty & /*$$scope*/ 2097152) {
				complete1_changes.$$scope = { dirty, ctx };
			}

			complete1.$set(complete1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(complete0.$$.fragment, local);
			transition_in(complete1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(complete0.$$.fragment, local);
			transition_out(complete1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(ul);
			if (detaching) detach_dev(t13);
			if (detaching) detach_dev(h30);
			if (detaching) detach_dev(t15);
			if (detaching) detach_dev(h31);
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(div);
			destroy_component(complete0);
			destroy_component(complete1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(116:2) {:else}",
		ctx
	});

	return block;
}

// (109:21) 
function create_if_block_1(ctx) {
	let h2;
	let t0_value = /*browserChoice*/ ctx[4][/*choice*/ ctx[0]].name + "";
	let t0;
	let t1;
	let p0;
	let t2;
	let t3_value = /*browserChoice*/ ctx[4][/*choice*/ ctx[0]].safety + "";
	let t3;
	let t4;
	let p1;
	let t5_value = /*browserChoice*/ ctx[4][/*choice*/ ctx[0]].body + "";
	let t5;
	let t6;
	let btn;
	let current;

	btn = new Btn({
			props: {
				type: "Submit",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			p0 = element("p");
			t2 = text("Safety level: ");
			t3 = text(t3_value);
			t4 = space();
			p1 = element("p");
			t5 = text(t5_value);
			t6 = space();
			create_component(btn.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, t0_value);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p0 = claim_element(nodes, "P", { id: true, class: true });
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "Safety level: ");
			t3 = claim_text(p0_nodes, t3_value);
			p0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t5 = claim_text(p1_nodes, t5_value);
			p1_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			claim_component(btn.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 110, 3, 3310);
			attr_dev(p0, "id", "warning");
			attr_dev(p0, "class", "svelte-gs0uzf");
			add_location(p0, file, 111, 3, 3351);
			add_location(p1, file, 112, 3, 3419);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t2);
			append_dev(p0, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t5);
			insert_dev(target, t6, anchor);
			mount_component(btn, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty & /*choice*/ 1) && t0_value !== (t0_value = /*browserChoice*/ ctx[4][/*choice*/ ctx[0]].name + "")) set_data_dev(t0, t0_value);
			if ((!current || dirty & /*choice*/ 1) && t3_value !== (t3_value = /*browserChoice*/ ctx[4][/*choice*/ ctx[0]].safety + "")) set_data_dev(t3, t3_value);
			if ((!current || dirty & /*choice*/ 1) && t5_value !== (t5_value = /*browserChoice*/ ctx[4][/*choice*/ ctx[0]].body + "")) set_data_dev(t5, t5_value);
			const btn_changes = {};

			if (dirty & /*$$scope*/ 2097152) {
				btn_changes.$$scope = { dirty, ctx };
			}

			btn.$set(btn_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(btn.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(btn.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t6);
			destroy_component(btn, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(109:21) ",
		ctx
	});

	return block;
}

// (81:1) {#if $step==0}
function create_if_block(ctx) {
	let h1;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let form;
	let label0;
	let input0;
	let input0_value_value;
	let t4;
	let t5_value = /*browserChoice*/ ctx[4][0].name + "";
	let t5;
	let t6;
	let label1;
	let input1;
	let input1_value_value;
	let t7;
	let t8_value = /*browserChoice*/ ctx[4][1].name + "";
	let t8;
	let t9;
	let label2;
	let input2;
	let input2_value_value;
	let t10;
	let t11_value = /*browserChoice*/ ctx[4][2].name + "";
	let t11;
	let t12;
	let label3;
	let input3;
	let input3_value_value;
	let t13;
	let t14_value = /*browserChoice*/ ctx[4][3].name + "";
	let t14;
	let t15;
	let label4;
	let input4;
	let input4_value_value;
	let t16;
	let t17_value = /*browserChoice*/ ctx[4][4].name + "";
	let t17;
	let t18;
	let section_1;
	let btn;
	let current;
	let mounted;
	let dispose;

	btn = new Btn({
			props: {
				type: "Submit",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text(/*headline*/ ctx[1]);
			t1 = space();
			p = element("p");
			t2 = text(/*body*/ ctx[2]);
			t3 = space();
			form = element("form");
			label0 = element("label");
			input0 = element("input");
			t4 = space();
			t5 = text(t5_value);
			t6 = space();
			label1 = element("label");
			input1 = element("input");
			t7 = space();
			t8 = text(t8_value);
			t9 = space();
			label2 = element("label");
			input2 = element("input");
			t10 = space();
			t11 = text(t11_value);
			t12 = space();
			label3 = element("label");
			input3 = element("input");
			t13 = space();
			t14 = text(t14_value);
			t15 = space();
			label4 = element("label");
			input4 = element("input");
			t16 = space();
			t17 = text(t17_value);
			t18 = space();
			section_1 = element("section");
			create_component(btn.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, /*headline*/ ctx[1]);
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, /*body*/ ctx[2]);
			p_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			form = claim_element(nodes, "FORM", { class: true });
			var form_nodes = children(form);
			label0 = claim_element(form_nodes, "LABEL", { class: true });
			var label0_nodes = children(label0);
			input0 = claim_element(label0_nodes, "INPUT", { type: true, value: true, selected: true });
			t4 = claim_space(label0_nodes);
			t5 = claim_text(label0_nodes, t5_value);
			label0_nodes.forEach(detach_dev);
			t6 = claim_space(form_nodes);
			label1 = claim_element(form_nodes, "LABEL", { class: true });
			var label1_nodes = children(label1);
			input1 = claim_element(label1_nodes, "INPUT", { type: true, value: true });
			t7 = claim_space(label1_nodes);
			t8 = claim_text(label1_nodes, t8_value);
			label1_nodes.forEach(detach_dev);
			t9 = claim_space(form_nodes);
			label2 = claim_element(form_nodes, "LABEL", { class: true });
			var label2_nodes = children(label2);
			input2 = claim_element(label2_nodes, "INPUT", { type: true, value: true });
			t10 = claim_space(label2_nodes);
			t11 = claim_text(label2_nodes, t11_value);
			label2_nodes.forEach(detach_dev);
			t12 = claim_space(form_nodes);
			label3 = claim_element(form_nodes, "LABEL", { class: true });
			var label3_nodes = children(label3);
			input3 = claim_element(label3_nodes, "INPUT", { type: true, value: true });
			t13 = claim_space(label3_nodes);
			t14 = claim_text(label3_nodes, t14_value);
			label3_nodes.forEach(detach_dev);
			t15 = claim_space(form_nodes);
			label4 = claim_element(form_nodes, "LABEL", { class: true });
			var label4_nodes = children(label4);
			input4 = claim_element(label4_nodes, "INPUT", { type: true, value: true });
			t16 = claim_space(label4_nodes);
			t17 = claim_text(label4_nodes, t17_value);
			label4_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			t18 = claim_space(nodes);
			section_1 = claim_element(nodes, "SECTION", { id: true });
			var section_1_nodes = children(section_1);
			claim_component(btn.$$.fragment, section_1_nodes);
			section_1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 81, 2, 2586);
			add_location(p, file, 82, 2, 2608);
			attr_dev(input0, "type", "radio");
			input0.__value = input0_value_value = 0;
			input0.value = input0.__value;
			attr_dev(input0, "selected", "");
			/*$$binding_groups*/ ctx[6][0].push(input0);
			add_location(input0, file, 85, 5, 2649);
			attr_dev(label0, "class", "svelte-gs0uzf");
			add_location(label0, file, 84, 4, 2636);
			attr_dev(input1, "type", "radio");
			input1.__value = input1_value_value = 1;
			input1.value = input1.__value;
			/*$$binding_groups*/ ctx[6][0].push(input1);
			add_location(input1, file, 89, 5, 2769);
			attr_dev(label1, "class", "svelte-gs0uzf");
			add_location(label1, file, 88, 4, 2756);
			attr_dev(input2, "type", "radio");
			input2.__value = input2_value_value = 2;
			input2.value = input2.__value;
			/*$$binding_groups*/ ctx[6][0].push(input2);
			add_location(input2, file, 93, 5, 2880);
			attr_dev(label2, "class", "svelte-gs0uzf");
			add_location(label2, file, 92, 4, 2867);
			attr_dev(input3, "type", "radio");
			input3.__value = input3_value_value = 3;
			input3.value = input3.__value;
			/*$$binding_groups*/ ctx[6][0].push(input3);
			add_location(input3, file, 97, 5, 2991);
			attr_dev(label3, "class", "svelte-gs0uzf");
			add_location(label3, file, 96, 4, 2978);
			attr_dev(input4, "type", "radio");
			input4.__value = input4_value_value = 4;
			input4.value = input4.__value;
			/*$$binding_groups*/ ctx[6][0].push(input4);
			add_location(input4, file, 101, 5, 3102);
			attr_dev(label4, "class", "svelte-gs0uzf");
			add_location(label4, file, 100, 4, 3089);
			attr_dev(form, "class", "svelte-gs0uzf");
			add_location(form, file, 83, 2, 2625);
			attr_dev(section_1, "id", "next-skip");
			add_location(section_1, file, 105, 2, 3208);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, form, anchor);
			append_dev(form, label0);
			append_dev(label0, input0);
			input0.checked = input0.__value === /*choice*/ ctx[0];
			append_dev(label0, t4);
			append_dev(label0, t5);
			append_dev(form, t6);
			append_dev(form, label1);
			append_dev(label1, input1);
			input1.checked = input1.__value === /*choice*/ ctx[0];
			append_dev(label1, t7);
			append_dev(label1, t8);
			append_dev(form, t9);
			append_dev(form, label2);
			append_dev(label2, input2);
			input2.checked = input2.__value === /*choice*/ ctx[0];
			append_dev(label2, t10);
			append_dev(label2, t11);
			append_dev(form, t12);
			append_dev(form, label3);
			append_dev(label3, input3);
			input3.checked = input3.__value === /*choice*/ ctx[0];
			append_dev(label3, t13);
			append_dev(label3, t14);
			append_dev(form, t15);
			append_dev(form, label4);
			append_dev(label4, input4);
			input4.checked = input4.__value === /*choice*/ ctx[0];
			append_dev(label4, t16);
			append_dev(label4, t17);
			insert_dev(target, t18, anchor);
			insert_dev(target, section_1, anchor);
			mount_component(btn, section_1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input0, "change", /*input0_change_handler*/ ctx[5]),
					listen_dev(input1, "change", /*input1_change_handler*/ ctx[7]),
					listen_dev(input2, "change", /*input2_change_handler*/ ctx[8]),
					listen_dev(input3, "change", /*input3_change_handler*/ ctx[9]),
					listen_dev(input4, "change", /*input4_change_handler*/ ctx[10])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*headline*/ 2) set_data_dev(t0, /*headline*/ ctx[1]);
			if (!current || dirty & /*body*/ 4) set_data_dev(t2, /*body*/ ctx[2]);

			if (dirty & /*choice*/ 1) {
				input0.checked = input0.__value === /*choice*/ ctx[0];
			}

			if (dirty & /*choice*/ 1) {
				input1.checked = input1.__value === /*choice*/ ctx[0];
			}

			if (dirty & /*choice*/ 1) {
				input2.checked = input2.__value === /*choice*/ ctx[0];
			}

			if (dirty & /*choice*/ 1) {
				input3.checked = input3.__value === /*choice*/ ctx[0];
			}

			if (dirty & /*choice*/ 1) {
				input4.checked = input4.__value === /*choice*/ ctx[0];
			}

			const btn_changes = {};

			if (dirty & /*$$scope*/ 2097152) {
				btn_changes.$$scope = { dirty, ctx };
			}

			btn.$set(btn_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(btn.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(btn.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(form);
			/*$$binding_groups*/ ctx[6][0].splice(/*$$binding_groups*/ ctx[6][0].indexOf(input0), 1);
			/*$$binding_groups*/ ctx[6][0].splice(/*$$binding_groups*/ ctx[6][0].indexOf(input1), 1);
			/*$$binding_groups*/ ctx[6][0].splice(/*$$binding_groups*/ ctx[6][0].indexOf(input2), 1);
			/*$$binding_groups*/ ctx[6][0].splice(/*$$binding_groups*/ ctx[6][0].indexOf(input3), 1);
			/*$$binding_groups*/ ctx[6][0].splice(/*$$binding_groups*/ ctx[6][0].indexOf(input4), 1);
			if (detaching) detach_dev(t18);
			if (detaching) detach_dev(section_1);
			destroy_component(btn);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(81:1) {#if $step==0}",
		ctx
	});

	return block;
}

// (129:3) <Complete>
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Yes, I did");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Yes, I did");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(129:3) <Complete>",
		ctx
	});

	return block;
}

// (132:3) <Complete success={false}>
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("No, I didn't");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "No, I didn't");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(132:3) <Complete success={false}>",
		ctx
	});

	return block;
}

// (115:3) <Btn type=Submit>
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Check Alternatives");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Check Alternatives");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(115:3) <Btn type=Submit>",
		ctx
	});

	return block;
}

// (107:3) <Btn type=Submit>
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Submit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Submit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(107:3) <Btn type=Submit>",
		ctx
	});

	return block;
}

// (80:1) <Trans>
function create_default_slot(ctx) {
	let current_block_type_index;
	let if_block;
	let t;
	let back;
	let current;
	const if_block_creators = [create_if_block, create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$step*/ ctx[3] == 0) return 0;
		if (/*$step*/ ctx[3] == 1) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	back = new Back({ $$inline: true });

	const block = {
		c: function create() {
			if_block.c();
			t = space();
			create_component(back.$$.fragment);
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			t = claim_space(nodes);
			claim_component(back.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, t, anchor);
			mount_component(back, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(t.parentNode, t);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(back.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(back.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(t);
			destroy_component(back, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(80:1) <Trans>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let trans;
	let current;

	trans = new TransHelp({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t = space();
			create_component(trans.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1ux4qy8\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			claim_component(trans.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Search Engine";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(trans, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const trans_changes = {};

			if (dirty & /*$$scope, choice, body, headline, $step*/ 2097167) {
				trans_changes.$$scope = { dirty, ctx };
			}

			trans.$set(trans_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(trans.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(trans.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_component(trans, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $quizSteps;
	let $count;
	let $step;
	validate_store(quizSteps, "quizSteps");
	component_subscribe($$self, quizSteps, $$value => $$invalidate(13, $quizSteps = $$value));
	validate_store(count, "count");
	component_subscribe($$self, count, $$value => $$invalidate(14, $count = $$value));
	validate_store(step, "step");
	component_subscribe($$self, step, $$value => $$invalidate(3, $step = $$value));

	onMount(async () => {
		set_store_value(quizSteps, $quizSteps[$count].status = 1, $quizSteps);
	});

	const dispatch = createEventDispatcher();

	let q1Steps = [
		{
			stepNum: "1",
			h2: "What Search Engine do you use?",
			name: "Introduction",
			classn: "complete",
			d: "1 / 3",
			browsers: ["Google Chrome", "DuckDuckGo", "Bing", "Something", "Something"],
			copy: "Did you know everything time you look up something using search engine, you are giving your information to thousands of 3rd party advertisers? Vast amount of your data has been taken from you without a single consent only to manipulate your purchase habit and long-term behavior. In this exercise, we will walk through with you how to avoid...."
		}
	];

	let browserChoice = [
		{
			name: "Google Chrome",
			value: 1,
			safety: "37%",
			body: "Google Chrome collectes X number of individual data per year. Google probably knows more about you than even Facebook does, thanks to the things you tell it when you type queries into its search engine. Though that’s just the tip of how it tracks you. It also has its tracking infrastructure embedded on three-quarters of the top million websites. So chances are it’s following what you’re browsing online."
		},
		{
			name: "DuckDuckGo",
			value: 2,
			safety: "73%",
			body: "Something something"
		},
		{
			name: "DuckDuckGo",
			value: 3,
			safety: 1,
			body: "duckduckgo is so freaking awesome. omg."
		},
		{
			name: "something1",
			value: 4,
			safety: 1,
			body: "maybe switch to duckduckgo"
		},
		{
			name: "something2",
			value: 5,
			safety: 1,
			body: "pooooooor decisions  hahahahah"
		}
	];

	let section = 0;

	function stepUp() {
		$$invalidate(15, q++, q);
		$$invalidate(11, q1Steps[q].classn = "complete", q1Steps);
	}

	let choice = 0;

	function showResults(event) {
		section = 1;
	}

	function showAlternatives(event) {
		section = 2;
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Q3> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Q3", $$slots, []);
	const $$binding_groups = [[]];

	function input0_change_handler() {
		choice = this.__value;
		$$invalidate(0, choice);
	}

	function input1_change_handler() {
		choice = this.__value;
		$$invalidate(0, choice);
	}

	function input2_change_handler() {
		choice = this.__value;
		$$invalidate(0, choice);
	}

	function input3_change_handler() {
		choice = this.__value;
		$$invalidate(0, choice);
	}

	function input4_change_handler() {
		choice = this.__value;
		$$invalidate(0, choice);
	}

	$$self.$capture_state = () => ({
		onMount,
		afterUpdate,
		createEventDispatcher,
		Trans: TransHelp,
		Complete,
		Btn,
		count,
		step,
		quizSteps,
		Back,
		dispatch,
		q1Steps,
		browserChoice,
		section,
		stepUp,
		choice,
		showResults,
		showAlternatives,
		$quizSteps,
		$count,
		q,
		headline,
		body,
		fraction,
		$step
	});

	$$self.$inject_state = $$props => {
		if ("q1Steps" in $$props) $$invalidate(11, q1Steps = $$props.q1Steps);
		if ("browserChoice" in $$props) $$invalidate(4, browserChoice = $$props.browserChoice);
		if ("section" in $$props) section = $$props.section;
		if ("choice" in $$props) $$invalidate(0, choice = $$props.choice);
		if ("q" in $$props) $$invalidate(15, q = $$props.q);
		if ("headline" in $$props) $$invalidate(1, headline = $$props.headline);
		if ("body" in $$props) $$invalidate(2, body = $$props.body);
		if ("fraction" in $$props) fraction = $$props.fraction;
	};

	let q;
	let headline;
	let body;
	let fraction;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*q1Steps, q*/ 34816) {
			 $$invalidate(1, headline = q1Steps[q].h2);
		}

		if ($$self.$$.dirty & /*q1Steps, q*/ 34816) {
			 $$invalidate(2, body = q1Steps[q].copy);
		}

		if ($$self.$$.dirty & /*q1Steps, q*/ 34816) {
			 fraction = q1Steps[q].d;
		}
	};

	 $$invalidate(15, q = 0);

	return [
		choice,
		headline,
		body,
		$step,
		browserChoice,
		input0_change_handler,
		$$binding_groups,
		input1_change_handler,
		input2_change_handler,
		input3_change_handler,
		input4_change_handler
	];
}

class Q3 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Q3",
			options,
			id: create_fragment.name
		});
	}
}

export default Q3;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
