import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, o as validate_store, p as component_subscribe, v as validate_slots, r as createEventDispatcher, u as beforeUpdate, w as afterUpdate, x as onMount, y as globals, a as space, e as element, z as create_component, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, g as children, A as claim_component, j as attr_dev, k as add_location, l as insert_dev, B as mount_component, m as append_dev, C as transition_out, D as check_outros, E as transition_in, F as add_render_callback, G as create_bidirectional_transition, H as destroy_component, t as text, h as claim_text, I as set_data_dev, J as group_outros } from './client.540a5aad.js';
import Q1 from './q1.f9b11a0a.js';
import { q as quintOut, a as quintIn } from './index.cccde779.js';
import { s as slide } from './index.01b49c54.js';
import './TransHelp.be4c5ee3.js';
import { c as count, q as quizSteps } from './store.52c37127.js';
import './Back.966dd5b8.js';
import './Btn.fe8d47f7.js';
import Q2 from './q2.284029d2.js';
import Q3 from './q3.05ce274d.js';
import './Detect.94cc74a5.js';
import Q4 from './q4.faf29303.js';
import Q5 from './q5.6eedc108.js';
import Q6 from './q6.4ff0c592.js';
import Q7 from './q7.069d18f5.js';
import Q8 from './q8.b62a4e9c.js';
import Q9 from './q9.101a3157.js';
import Check1 from './check1.836de55e.js';
import Check2 from './check2.eef5b519.js';
import Check3 from './check3.5102d3b5.js';
import { C as Completion } from './Completion.c77c014f.js';

/* src/routes/quizmain.svelte generated by Svelte v3.23.2 */

const { console: console_1 } = globals;
const file = "src/routes/quizmain.svelte";

// (55:7) <Completion class='step'>
function create_default_slot(ctx) {
	let t_value = /*names*/ ctx[2][/*$count*/ ctx[1]] + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$count*/ 2 && t_value !== (t_value = /*names*/ ctx[2][/*$count*/ ctx[1]] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(55:7) <Completion class='step'>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let main;
	let completion;
	let t1;
	let section;
	let switch_instance;
	let main_transition;
	let current;

	completion = new Completion({
			props: {
				class: "step",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	var switch_value = /*names*/ ctx[2][/*quizNum*/ ctx[0]];

	function switch_props(ctx) {
		return { $$inline: true };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
		switch_instance.$on("message", handleMessage);
	}

	const block = {
		c: function create() {
			t0 = space();
			main = element("main");
			create_component(completion.$$.fragment);
			t1 = space();
			section = element("section");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-7q3d4x\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			claim_component(completion.$$.fragment, main_nodes);
			t1 = claim_space(main_nodes);
			section = claim_element(main_nodes, "SECTION", { id: true, class: true });
			var section_nodes = children(section);
			if (switch_instance) claim_component(switch_instance.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			main_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Test your knowledge";
			attr_dev(section, "id", "main-content");
			attr_dev(section, "class", "svelte-8ub2z1");
			add_location(section, file, 59, 7, 2488);
			attr_dev(main, "class", "svelte-8ub2z1");
			add_location(main, file, 53, 0, 2296);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, main, anchor);
			mount_component(completion, main, null);
			append_dev(main, t1);
			append_dev(main, section);

			if (switch_instance) {
				mount_component(switch_instance, section, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			const completion_changes = {};

			if (dirty & /*$$scope, $count*/ 18) {
				completion_changes.$$scope = { dirty, ctx };
			}

			completion.$set(completion_changes);

			if (switch_value !== (switch_value = /*names*/ ctx[2][/*quizNum*/ ctx[0]])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					switch_instance.$on("message", handleMessage);
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, section, null);
				} else {
					switch_instance = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(completion.$$.fragment, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);

			add_render_callback(() => {
				if (!main_transition) main_transition = create_bidirectional_transition(
					main,
					slide,
					{
						delay: 100,
						duration: 400,
						easing: quintOut
					},
					true
				);

				main_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			transition_out(completion.$$.fragment, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);

			if (!main_transition) main_transition = create_bidirectional_transition(
				main,
				slide,
				{
					delay: 100,
					duration: 400,
					easing: quintOut
				},
				false
			);

			main_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(main);
			destroy_component(completion);
			if (switch_instance) destroy_component(switch_instance);
			if (detaching && main_transition) main_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function handleMessage(event) {
	
} //quizNum++;
//quizSteps[Object.values(event.detail[0])].complete = object.values(event.detail[1])

function instance($$self, $$props, $$invalidate) {
	let $quizSteps;
	let $count;
	validate_store(quizSteps, "quizSteps");
	component_subscribe($$self, quizSteps, $$value => $$invalidate(3, $quizSteps = $$value));
	validate_store(count, "count");
	component_subscribe($$self, count, $$value => $$invalidate(1, $count = $$value));
	const names = [];
	$quizSteps.forEach(v => names.push(v.component));
	console.log(names);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Quizmain> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Quizmain", $$slots, []);

	$$self.$capture_state = () => ({
		Quiz1: Q1,
		Quiz2: Q2,
		Quiz3: Q3,
		Quiz4: Q4,
		Quiz5: Q5,
		Quiz6: Q6,
		Quiz7: Q7,
		Quiz8: Q8,
		Quiz9: Q9,
		Checkpoint1: Check1,
		Checkpoint2: Check2,
		Checkpoint3: Check3,
		Completion,
		createEventDispatcher,
		beforeUpdate,
		afterUpdate,
		onMount,
		slide,
		quintOut,
		quintIn,
		count,
		quizSteps,
		names,
		handleMessage,
		$quizSteps,
		quizNum,
		$count
	});

	$$self.$inject_state = $$props => {
		if ("quizNum" in $$props) $$invalidate(0, quizNum = $$props.quizNum);
	};

	let quizNum;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$count*/ 2) {
			/*const quizStep =  [
        { id:'1', component: Quiz1, name: 'Webcam Challenge', complete:false},
        { id: '2', component: Quiz2, name: 'HTTPS Everywhere', complete:false},
        { id: '3', component: Checkpoint1, name: 'Security vs Privacy', complete:false},
        { id: '4', component: Quiz3, name: 'Search Engine', complete:false},
        { id: '5', component: Quiz4, name: 'Privacy Settings', complete:false},
        { id: '6', component: Quiz5, name: 'Tracker blocker', complete:false},
        { id: '7', component: Quiz6, name: 'DNS', complete:false},
        { id: '8', component: Checkpoint2, name: 'Surveillance Capitalism', complete:false},
        { id: '9', component: Quiz7, name: 'Location Tracking', complete:false},
        { id: '10', component: Quiz8, name: 'iOT', complete:false},
        { id: '11', component: Checkpoint3, name: 'How to Make change', complete:false},
]*/
			 $$invalidate(0, quizNum = $count);
		}
	};

	return [quizNum, $count, names];
}

class Quizmain extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Quizmain",
			options,
			id: create_fragment.name
		});
	}
}

export default Quizmain;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpem1haW4uOTI0MzNmYjMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcXVpem1haW4uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gaW1wb3J0IFF1aXoxIGZyb20gJy4vcXVpei9xMS5zdmVsdGUnXG4gaW1wb3J0IFF1aXoyIGZyb20gJy4vcXVpei9xMi5zdmVsdGUnXG4gaW1wb3J0IFF1aXozIGZyb20gJy4vcXVpei9xMy5zdmVsdGUnXG4gaW1wb3J0IFF1aXo0IGZyb20gJy4vcXVpei9xNC5zdmVsdGUnXG4gaW1wb3J0IFF1aXo1IGZyb20gJy4vcXVpei9xNS5zdmVsdGUnXG4gaW1wb3J0IFF1aXo2IGZyb20gJy4vcXVpei9xNi5zdmVsdGUnXG4gaW1wb3J0IFF1aXo3IGZyb20gJy4vcXVpei9xNy5zdmVsdGUnXG4gaW1wb3J0IFF1aXo4IGZyb20gJy4vcXVpei9xOC5zdmVsdGUnXG4gaW1wb3J0IFF1aXo5IGZyb20gJy4vcXVpei9xOS5zdmVsdGUnXG4gaW1wb3J0IENoZWNrcG9pbnQxIGZyb20gJy4vcXVpei9jaGVjazEuc3ZlbHRlJ1xuIGltcG9ydCBDaGVja3BvaW50MiBmcm9tICcuL3F1aXovY2hlY2syLnN2ZWx0ZSdcbiBpbXBvcnQgQ2hlY2twb2ludDMgZnJvbSAnLi9xdWl6L2NoZWNrMy5zdmVsdGUnXG4gaW1wb3J0IENvbXBsZXRpb24gZnJvbSAnLi4vY29tcG9uZW50cy9Db21wbGV0aW9uLnN2ZWx0ZSdcbiBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIsIGJlZm9yZVVwZGF0ZSwgYWZ0ZXJVcGRhdGUsIG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xuaW1wb3J0IHsgc2xpZGUgfSBmcm9tICdzdmVsdGUvdHJhbnNpdGlvbic7XG5pbXBvcnQgeyBxdWludE91dCwgcXVpbnRJbiB9IGZyb20gJ3N2ZWx0ZS9lYXNpbmcnO1xuaW1wb3J0IHsgY291bnQsIHF1aXpTdGVwcyB9IGZyb20gJy4uL3N0b3JlLmpzJ1xuLy9pbXBvcnQgcXVpelN0ZXBzIGZyb20gJy4uL3N0b3JlLmpzJ1xuY29uc3QgbmFtZXMgPSBbXTtcbiRxdWl6U3RlcHMuZm9yRWFjaCh2ID0+IG5hbWVzLnB1c2godi5jb21wb25lbnQpKVxuXG5jb25zb2xlLmxvZyhuYW1lcyk7XG5cbi8qY29uc3QgcXVpelN0ZXAgPSAgW1xuICAgICAgICB7IGlkOicxJywgY29tcG9uZW50OiBRdWl6MSwgbmFtZTogJ1dlYmNhbSBDaGFsbGVuZ2UnLCBjb21wbGV0ZTpmYWxzZX0sXG4gICAgICAgIHsgaWQ6ICcyJywgY29tcG9uZW50OiBRdWl6MiwgbmFtZTogJ0hUVFBTIEV2ZXJ5d2hlcmUnLCBjb21wbGV0ZTpmYWxzZX0sXG4gICAgICAgIHsgaWQ6ICczJywgY29tcG9uZW50OiBDaGVja3BvaW50MSwgbmFtZTogJ1NlY3VyaXR5IHZzIFByaXZhY3knLCBjb21wbGV0ZTpmYWxzZX0sXG4gICAgICAgIHsgaWQ6ICc0JywgY29tcG9uZW50OiBRdWl6MywgbmFtZTogJ1NlYXJjaCBFbmdpbmUnLCBjb21wbGV0ZTpmYWxzZX0sXG4gICAgICAgIHsgaWQ6ICc1JywgY29tcG9uZW50OiBRdWl6NCwgbmFtZTogJ1ByaXZhY3kgU2V0dGluZ3MnLCBjb21wbGV0ZTpmYWxzZX0sXG4gICAgICAgIHsgaWQ6ICc2JywgY29tcG9uZW50OiBRdWl6NSwgbmFtZTogJ1RyYWNrZXIgYmxvY2tlcicsIGNvbXBsZXRlOmZhbHNlfSxcbiAgICAgICAgeyBpZDogJzcnLCBjb21wb25lbnQ6IFF1aXo2LCBuYW1lOiAnRE5TJywgY29tcGxldGU6ZmFsc2V9LFxuICAgICAgICB7IGlkOiAnOCcsIGNvbXBvbmVudDogQ2hlY2twb2ludDIsIG5hbWU6ICdTdXJ2ZWlsbGFuY2UgQ2FwaXRhbGlzbScsIGNvbXBsZXRlOmZhbHNlfSxcbiAgICAgICAgeyBpZDogJzknLCBjb21wb25lbnQ6IFF1aXo3LCBuYW1lOiAnTG9jYXRpb24gVHJhY2tpbmcnLCBjb21wbGV0ZTpmYWxzZX0sXG4gICAgICAgIHsgaWQ6ICcxMCcsIGNvbXBvbmVudDogUXVpejgsIG5hbWU6ICdpT1QnLCBjb21wbGV0ZTpmYWxzZX0sXG4gICAgICAgIHsgaWQ6ICcxMScsIGNvbXBvbmVudDogQ2hlY2twb2ludDMsIG5hbWU6ICdIb3cgdG8gTWFrZSBjaGFuZ2UnLCBjb21wbGV0ZTpmYWxzZX0sXG5dKi9cblxuJDpxdWl6TnVtID0gJGNvdW50O1xuXG5mdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGV2ZW50KSB7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvL3F1aXpOdW0rKztcbiAgICAgICAgICAgICAgLy9xdWl6U3RlcHNbT2JqZWN0LnZhbHVlcyhldmVudC5kZXRhaWxbMF0pXS5jb21wbGV0ZSA9IG9iamVjdC52YWx1ZXMoZXZlbnQuZGV0YWlsWzFdKVxuICAgICAgICAgICAgICAvL2xldCBzdGF0dXMgPSBPYmplY3QudmFsdWVzKGV2ZW50LmRldGFpbCk7XG4gICAgICAgICAgICAgIC8vbGV0IGxvY2F0aW9uID0gc3RhdHVzWzBdO1xuICAgICAgICAgICAgICAvL3F1aXpTdGVwc1tsb2NhdGlvbl0uY29tcGxldGUgPSBzdGF0dXNbMV07XG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocXVpelN0ZXBzW2xvY2F0aW9uXSk7XG5cdH1cbjwvc2NyaXB0PlxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+VGVzdCB5b3VyIGtub3dsZWRnZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPG1haW4gdHJhbnNpdGlvbjpzbGlkZT1cInt7ZGVsYXk6IDEwMCwgZHVyYXRpb246IDQwMCwgZWFzaW5nOiBxdWludE91dH19XCI+XG4gICAgICAgPENvbXBsZXRpb24gY2xhc3M9J3N0ZXAnPlxuICAgICAgICAgICAgICB7bmFtZXNbJGNvdW50XX1cbiAgICAgICAgICAgXG4gICAgICAgICAgICAgIFxuICAgICAgIDwvQ29tcGxldGlvbj5cbiAgICAgICA8c2VjdGlvbiBpZD1cIm1haW4tY29udGVudFwiPlxuICAgICAgICA8c3ZlbHRlOmNvbXBvbmVudCB0aGlzPXtuYW1lc1txdWl6TnVtXX0gb246bWVzc2FnZT17aGFuZGxlTWVzc2FnZX0gLz5cbiAgICAgICA8IS0tPFF1aXoyIG9uOm1lc3NhZ2U9e2hhbmRsZU1lc3NhZ2V9Lz4gLS0+XG48IS0tPHNlbGVjdCBiaW5kOnZhbHVlPXtzZWxlY3RlZH0+XG4gICAgICAgIHsjZWFjaCBxdWl6U3RlcHMgYXMgcX1cblx0XHQ8b3B0aW9uIHZhbHVlPXtxfT5RdWVzdGlvbiB7cS5pZH08L29wdGlvbj5cblx0ey9lYWNofVxuPC9zZWxlY3Q+LS0+XG48IS0tPGJ1dHRvbiBvbjpjbGljaz17aGFuZGxlQ2xpY2t9PkNsaWNrIG1lPC9idXR0b24+LS0+XG48IS0tPFByb2dyZXNzIHBhc3Q9e3Bhc3QubmFtZX0gY3VycmVudD17c2VsZWN0ZWQubmFtZX0gbmV4dD17bmV4dC5uYW1lfS8+LS0+XG4gICAgICAgPC9zZWN0aW9uPlxuPC9tYWluPlxuPHN0eWxlPlxuICAgICAgIG1haW4ge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICBmbGV4LWZsb3c6IHJvdztcblxuICAgICAgIH1cbiAgICAgICAuc3RlcHtcblx0XHRtYXJnaW4tYm90dG9tOiA1NXB4O1xuICAgICAgIH1cbiAgICAgICAjbWFpbi1jb250ZW50e1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjMzg0MjREO1xuICAgICAgICAgICAgICAvKmhlaWdodDogODZ2aDsgKi9cbiAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTVweDtcbiAgICAgICAgICAgICAgYm9yZGVyOiAwcHg7XG4gICAgICAgICAgICAgIG1hcmdpbjogMTJweCAyMnB4IDQwcHggMjBweDtcbiAgICAgICAgICAgICAgcGFkZGluZzogOS4zdmggNXZ3IDB2aCA5LjN2aDtcbiAgICAgICAgICAgICAgY29sb3I6ICNGRkZGRkY7XG4gICAgXG4gICAgICAgICAgICAgIC8qbWFyZ2luLXRvcDogLTUwcHg7XG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyMXZ3O1xuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDUwcHg7XG4gICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7Ki9cbiAgICAgICB9XG48L3N0eWxlPiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkF1RGUsR0FBSyxlQUFDLEdBQU07Ozs7Ozs7Ozs7Ozs7O2dFQUFaLEdBQUssZUFBQyxHQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQUtLLEdBQUssZ0JBQUMsR0FBTzs7Ozs7Ozs7aUNBQWUsYUFBYTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrREFBekMsR0FBSyxnQkFBQyxHQUFPOzs7Ozs7Ozs7Ozs7OztvQ0FBZSxhQUFhOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BUC9DLEtBQUssRUFBRSxHQUFHO01BQUUsUUFBUSxFQUFFLEdBQUc7TUFBRSxNQUFNLEVBQUUsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBQTNDLEtBQUssRUFBRSxHQUFHO0tBQUUsUUFBUSxFQUFFLEdBQUc7S0FBRSxNQUFNLEVBQUUsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQWI1RCxhQUFhLENBQUMsS0FBSzs7Ozs7Ozs7Ozs7O09BckJ0QixLQUFLO0NBQ1gsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUztDQUU5QyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQWdCZixPQUFPLEdBQUcsTUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
