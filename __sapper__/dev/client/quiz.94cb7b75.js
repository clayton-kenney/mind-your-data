import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, o as validate_store, p as component_subscribe, v as validate_slots, a as space, w as create_component, q as query_selector_all, b as detach_dev, c as claim_space, x as claim_component, l as insert_dev, y as mount_component, B as transition_in, z as transition_out, E as destroy_component, e as element, f as claim_element, g as children, j as attr_dev, k as add_location, t as text, h as claim_text, m as append_dev, n as noop, V as toggle_class, T as listen_dev, F as set_data_dev, U as run_all } from './client.3428bfd4.js';
import './index.cccde779.js';
import './index.01b49c54.js';
import { T as TransHelp } from './TransHelp.a7a91e36.js';
import { q as quizSteps } from './store.a68c3ca9.js';

/* src/routes/quiz.svelte generated by Svelte v3.23.2 */
const file = "src/routes/quiz.svelte";

// (72:4) {:else}
function create_else_block(ctx) {
	let section;
	let h1;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let p1;
	let t4;
	let t5;
	let button;
	let a;
	let t6;

	const block = {
		c: function create() {
			section = element("section");
			h1 = element("h1");
			t0 = text("Chapter 1: Security");
			t1 = space();
			p0 = element("p");
			t2 = text("Through out this challenge, we need your permission to give us one time non-recurring access to your webcam to test your practice.");
			t3 = space();
			p1 = element("p");
			t4 = text("Please click allow for one time non-recurring access to your webcame to move to the next step to complete this challenge.");
			t5 = space();
			button = element("button");
			a = element("a");
			t6 = text("Start Challenge");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			h1 = claim_element(section_nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Chapter 1: Security");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			p0 = claim_element(section_nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "Through out this challenge, we need your permission to give us one time non-recurring access to your webcam to test your practice.");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			p1 = claim_element(section_nodes, "P", {});
			var p1_nodes = children(p1);
			t4 = claim_text(p1_nodes, "Please click allow for one time non-recurring access to your webcame to move to the next step to complete this challenge.");
			p1_nodes.forEach(detach_dev);
			t5 = claim_space(section_nodes);
			button = claim_element(section_nodes, "BUTTON", { id: true, class: true });
			var button_nodes = children(button);
			a = claim_element(button_nodes, "A", { rel: true, href: true });
			var a_nodes = children(a);
			t6 = claim_text(a_nodes, "Start Challenge");
			a_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 73, 8, 2942);
			add_location(p0, file, 74, 8, 2979);
			add_location(p1, file, 75, 8, 3125);
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", "quizmain");
			add_location(a, file, 76, 27, 3281);
			attr_dev(button, "id", "start");
			attr_dev(button, "class", "svelte-1gme2nj");
			add_location(button, file, 76, 8, 3262);
			attr_dev(section, "class", "svelte-1gme2nj");
			add_location(section, file, 72, 4, 2924);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h1);
			append_dev(h1, t0);
			append_dev(section, t1);
			append_dev(section, p0);
			append_dev(p0, t2);
			append_dev(section, t3);
			append_dev(section, p1);
			append_dev(p1, t4);
			append_dev(section, t5);
			append_dev(section, button);
			append_dev(button, a);
			append_dev(a, t6);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(72:4) {:else}",
		ctx
	});

	return block;
}

// (19:25) 
function create_if_block_1(ctx) {
	let section;
	let h3;
	let t0;
	let t1;
	let div7;
	let p0;
	let t2_value = /*$quizSteps*/ ctx[2][0].name + "";
	let t2;
	let t3;
	let t4;
	let div6;
	let p1;
	let t5_value = /*$quizSteps*/ ctx[2][1].name + "";
	let t5;
	let t6;
	let t7;
	let div5;
	let p2;
	let t8_value = /*$quizSteps*/ ctx[2][2].name + "";
	let t8;
	let t9;
	let t10;
	let div4;
	let p3;
	let t11_value = /*$quizSteps*/ ctx[2][3].name + "";
	let t11;
	let t12;
	let t13;
	let div3;
	let p4;
	let t14_value = /*$quizSteps*/ ctx[2][4].name + "";
	let t14;
	let t15;
	let t16;
	let div2;
	let p5;
	let t17_value = /*$quizSteps*/ ctx[2][5].name + "";
	let t17;
	let t18;
	let t19;
	let div1;
	let p6;
	let t20_value = /*$quizSteps*/ ctx[2][6].name + "";
	let t20;
	let t21;
	let t22;
	let div0;
	let p7;
	let t23_value = /*$quizSteps*/ ctx[2][7].name + "";
	let t23;
	let t24;
	let t25;
	let button;
	let t26;
	let mounted;
	let dispose;
	let if_block0 = /*current*/ ctx[1] === "webcam" && create_if_block_9(ctx);
	let if_block1 = /*current*/ ctx[1] === "https" && create_if_block_8(ctx);
	let if_block2 = /*current*/ ctx[1] === "amazon" && create_if_block_7(ctx);
	let if_block3 = /*current*/ ctx[1] === "search" && create_if_block_6(ctx);
	let if_block4 = /*current*/ ctx[1] === "privacy" && create_if_block_5(ctx);
	let if_block5 = /*current*/ ctx[1] === "tracker" && create_if_block_4(ctx);
	let if_block6 = /*current*/ ctx[1] === "location" && create_if_block_3(ctx);
	let if_block7 = /*current*/ ctx[1] === "iot" && create_if_block_2(ctx);

	const block = {
		c: function create() {
			section = element("section");
			h3 = element("h3");
			t0 = text("This test contains 10 unique privacy tests that will take you about 30 minutes to complete. Throught the test, we will provide...");
			t1 = space();
			div7 = element("div");
			p0 = element("p");
			t2 = text(t2_value);
			t3 = space();
			if (if_block0) if_block0.c();
			t4 = space();
			div6 = element("div");
			p1 = element("p");
			t5 = text(t5_value);
			t6 = space();
			if (if_block1) if_block1.c();
			t7 = space();
			div5 = element("div");
			p2 = element("p");
			t8 = text(t8_value);
			t9 = space();
			if (if_block2) if_block2.c();
			t10 = space();
			div4 = element("div");
			p3 = element("p");
			t11 = text(t11_value);
			t12 = space();
			if (if_block3) if_block3.c();
			t13 = space();
			div3 = element("div");
			p4 = element("p");
			t14 = text(t14_value);
			t15 = space();
			if (if_block4) if_block4.c();
			t16 = space();
			div2 = element("div");
			p5 = element("p");
			t17 = text(t17_value);
			t18 = space();
			if (if_block5) if_block5.c();
			t19 = space();
			div1 = element("div");
			p6 = element("p");
			t20 = text(t20_value);
			t21 = space();
			if (if_block6) if_block6.c();
			t22 = space();
			div0 = element("div");
			p7 = element("p");
			t23 = text(t23_value);
			t24 = space();
			if (if_block7) if_block7.c();
			t25 = space();
			button = element("button");
			t26 = text("Continue");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			h3 = claim_element(section_nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "This test contains 10 unique privacy tests that will take you about 30 minutes to complete. Throught the test, we will provide...");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			div7 = claim_element(section_nodes, "DIV", {});
			var div7_nodes = children(div7);
			p0 = claim_element(div7_nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, t2_value);
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(div7_nodes);
			if (if_block0) if_block0.l(div7_nodes);
			t4 = claim_space(div7_nodes);
			div6 = claim_element(div7_nodes, "DIV", {});
			var div6_nodes = children(div6);
			p1 = claim_element(div6_nodes, "P", {});
			var p1_nodes = children(p1);
			t5 = claim_text(p1_nodes, t5_value);
			p1_nodes.forEach(detach_dev);
			t6 = claim_space(div6_nodes);
			if (if_block1) if_block1.l(div6_nodes);
			t7 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", {});
			var div5_nodes = children(div5);
			p2 = claim_element(div5_nodes, "P", {});
			var p2_nodes = children(p2);
			t8 = claim_text(p2_nodes, t8_value);
			p2_nodes.forEach(detach_dev);
			t9 = claim_space(div5_nodes);
			if (if_block2) if_block2.l(div5_nodes);
			t10 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", {});
			var div4_nodes = children(div4);
			p3 = claim_element(div4_nodes, "P", {});
			var p3_nodes = children(p3);
			t11 = claim_text(p3_nodes, t11_value);
			p3_nodes.forEach(detach_dev);
			t12 = claim_space(div4_nodes);
			if (if_block3) if_block3.l(div4_nodes);
			t13 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", {});
			var div3_nodes = children(div3);
			p4 = claim_element(div3_nodes, "P", {});
			var p4_nodes = children(p4);
			t14 = claim_text(p4_nodes, t14_value);
			p4_nodes.forEach(detach_dev);
			t15 = claim_space(div3_nodes);
			if (if_block4) if_block4.l(div3_nodes);
			t16 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", {});
			var div2_nodes = children(div2);
			p5 = claim_element(div2_nodes, "P", {});
			var p5_nodes = children(p5);
			t17 = claim_text(p5_nodes, t17_value);
			p5_nodes.forEach(detach_dev);
			t18 = claim_space(div2_nodes);
			if (if_block5) if_block5.l(div2_nodes);
			t19 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", {});
			var div1_nodes = children(div1);
			p6 = claim_element(div1_nodes, "P", {});
			var p6_nodes = children(p6);
			t20 = claim_text(p6_nodes, t20_value);
			p6_nodes.forEach(detach_dev);
			t21 = claim_space(div1_nodes);
			if (if_block6) if_block6.l(div1_nodes);
			t22 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", {});
			var div0_nodes = children(div0);
			p7 = claim_element(div0_nodes, "P", {});
			var p7_nodes = children(p7);
			t23 = claim_text(p7_nodes, t23_value);
			p7_nodes.forEach(detach_dev);
			t24 = claim_space(div0_nodes);
			if (if_block7) if_block7.l(div0_nodes);
			t25 = claim_space(div0_nodes);
			button = claim_element(div0_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t26 = claim_text(button_nodes, "Continue");
			button_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h3, file, 20, 8, 880);
			add_location(p0, file, 22, 12, 1120);
			add_location(p1, file, 28, 12, 1355);
			add_location(p2, file, 34, 12, 1579);
			add_location(p3, file, 40, 12, 1805);
			add_location(p4, file, 46, 12, 2031);
			add_location(p5, file, 52, 12, 2259);
			add_location(p6, file, 58, 12, 2489);
			add_location(p7, file, 64, 12, 2710);
			attr_dev(button, "class", "svelte-1gme2nj");
			add_location(button, file, 69, 8, 2838);
			toggle_class(div0, "active", /*current*/ ctx[1] === "iot");
			add_location(div0, file, 62, 8, 2614);
			toggle_class(div1, "active", /*current*/ ctx[1] === "location");
			add_location(div1, file, 56, 8, 2383);
			toggle_class(div2, "active", /*current*/ ctx[1] === "tracker");
			add_location(div2, file, 50, 8, 2155);
			toggle_class(div3, "active", /*current*/ ctx[1] === "privacy");
			add_location(div3, file, 44, 8, 1928);
			toggle_class(div4, "active", /*current*/ ctx[1] === "search");
			add_location(div4, file, 38, 8, 1702);
			toggle_class(div5, "active", /*current*/ ctx[1] === "amazon");
			add_location(div5, file, 32, 8, 1477);
			toggle_class(div6, "active", /*current*/ ctx[1] === "https");
			add_location(div6, file, 26, 8, 1255);
			toggle_class(div7, "active", /*current*/ ctx[1] === "https");
			add_location(div7, file, 21, 8, 1027);
			attr_dev(section, "class", "svelte-1gme2nj");
			add_location(section, file, 19, 4, 862);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h3);
			append_dev(h3, t0);
			append_dev(section, t1);
			append_dev(section, div7);
			append_dev(div7, p0);
			append_dev(p0, t2);
			append_dev(div7, t3);
			if (if_block0) if_block0.m(div7, null);
			append_dev(div7, t4);
			append_dev(div7, div6);
			append_dev(div6, p1);
			append_dev(p1, t5);
			append_dev(div6, t6);
			if (if_block1) if_block1.m(div6, null);
			append_dev(div6, t7);
			append_dev(div6, div5);
			append_dev(div5, p2);
			append_dev(p2, t8);
			append_dev(div5, t9);
			if (if_block2) if_block2.m(div5, null);
			append_dev(div5, t10);
			append_dev(div5, div4);
			append_dev(div4, p3);
			append_dev(p3, t11);
			append_dev(div4, t12);
			if (if_block3) if_block3.m(div4, null);
			append_dev(div4, t13);
			append_dev(div4, div3);
			append_dev(div3, p4);
			append_dev(p4, t14);
			append_dev(div3, t15);
			if (if_block4) if_block4.m(div3, null);
			append_dev(div3, t16);
			append_dev(div3, div2);
			append_dev(div2, p5);
			append_dev(p5, t17);
			append_dev(div2, t18);
			if (if_block5) if_block5.m(div2, null);
			append_dev(div2, t19);
			append_dev(div2, div1);
			append_dev(div1, p6);
			append_dev(p6, t20);
			append_dev(div1, t21);
			if (if_block6) if_block6.m(div1, null);
			append_dev(div1, t22);
			append_dev(div1, div0);
			append_dev(div0, p7);
			append_dev(p7, t23);
			append_dev(div0, t24);
			if (if_block7) if_block7.m(div0, null);
			append_dev(div0, t25);
			append_dev(div0, button);
			append_dev(button, t26);

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", /*click_handler_1*/ ctx[4], false, false, false),
					listen_dev(div0, "click", /*click_handler_2*/ ctx[5], false, false, false),
					listen_dev(div1, "click", /*click_handler_3*/ ctx[6], false, false, false),
					listen_dev(div2, "click", /*click_handler_4*/ ctx[7], false, false, false),
					listen_dev(div3, "click", /*click_handler_5*/ ctx[8], false, false, false),
					listen_dev(div4, "click", /*click_handler_6*/ ctx[9], false, false, false),
					listen_dev(div5, "click", /*click_handler_7*/ ctx[10], false, false, false),
					listen_dev(div6, "click", /*click_handler_8*/ ctx[11], false, false, false),
					listen_dev(div7, "click", /*click_handler_9*/ ctx[12], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$quizSteps*/ 4 && t2_value !== (t2_value = /*$quizSteps*/ ctx[2][0].name + "")) set_data_dev(t2, t2_value);

			if (/*current*/ ctx[1] === "webcam") {
				if (if_block0) ; else {
					if_block0 = create_if_block_9(ctx);
					if_block0.c();
					if_block0.m(div7, t4);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*$quizSteps*/ 4 && t5_value !== (t5_value = /*$quizSteps*/ ctx[2][1].name + "")) set_data_dev(t5, t5_value);

			if (/*current*/ ctx[1] === "https") {
				if (if_block1) ; else {
					if_block1 = create_if_block_8(ctx);
					if_block1.c();
					if_block1.m(div6, t7);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*$quizSteps*/ 4 && t8_value !== (t8_value = /*$quizSteps*/ ctx[2][2].name + "")) set_data_dev(t8, t8_value);

			if (/*current*/ ctx[1] === "amazon") {
				if (if_block2) ; else {
					if_block2 = create_if_block_7(ctx);
					if_block2.c();
					if_block2.m(div5, t10);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*$quizSteps*/ 4 && t11_value !== (t11_value = /*$quizSteps*/ ctx[2][3].name + "")) set_data_dev(t11, t11_value);

			if (/*current*/ ctx[1] === "search") {
				if (if_block3) ; else {
					if_block3 = create_if_block_6(ctx);
					if_block3.c();
					if_block3.m(div4, t13);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (dirty & /*$quizSteps*/ 4 && t14_value !== (t14_value = /*$quizSteps*/ ctx[2][4].name + "")) set_data_dev(t14, t14_value);

			if (/*current*/ ctx[1] === "privacy") {
				if (if_block4) ; else {
					if_block4 = create_if_block_5(ctx);
					if_block4.c();
					if_block4.m(div3, t16);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (dirty & /*$quizSteps*/ 4 && t17_value !== (t17_value = /*$quizSteps*/ ctx[2][5].name + "")) set_data_dev(t17, t17_value);

			if (/*current*/ ctx[1] === "tracker") {
				if (if_block5) ; else {
					if_block5 = create_if_block_4(ctx);
					if_block5.c();
					if_block5.m(div2, t19);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (dirty & /*$quizSteps*/ 4 && t20_value !== (t20_value = /*$quizSteps*/ ctx[2][6].name + "")) set_data_dev(t20, t20_value);

			if (/*current*/ ctx[1] === "location") {
				if (if_block6) ; else {
					if_block6 = create_if_block_3(ctx);
					if_block6.c();
					if_block6.m(div1, t22);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (dirty & /*$quizSteps*/ 4 && t23_value !== (t23_value = /*$quizSteps*/ ctx[2][7].name + "")) set_data_dev(t23, t23_value);

			if (/*current*/ ctx[1] === "iot") {
				if (if_block7) ; else {
					if_block7 = create_if_block_2(ctx);
					if_block7.c();
					if_block7.m(div0, t25);
				}
			} else if (if_block7) {
				if_block7.d(1);
				if_block7 = null;
			}

			if (dirty & /*current*/ 2) {
				toggle_class(div0, "active", /*current*/ ctx[1] === "iot");
			}

			if (dirty & /*current*/ 2) {
				toggle_class(div1, "active", /*current*/ ctx[1] === "location");
			}

			if (dirty & /*current*/ 2) {
				toggle_class(div2, "active", /*current*/ ctx[1] === "tracker");
			}

			if (dirty & /*current*/ 2) {
				toggle_class(div3, "active", /*current*/ ctx[1] === "privacy");
			}

			if (dirty & /*current*/ 2) {
				toggle_class(div4, "active", /*current*/ ctx[1] === "search");
			}

			if (dirty & /*current*/ 2) {
				toggle_class(div5, "active", /*current*/ ctx[1] === "amazon");
			}

			if (dirty & /*current*/ 2) {
				toggle_class(div6, "active", /*current*/ ctx[1] === "https");
			}

			if (dirty & /*current*/ 2) {
				toggle_class(div7, "active", /*current*/ ctx[1] === "https");
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
			if (if_block7) if_block7.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(19:25) ",
		ctx
	});

	return block;
}

// (12:4) {#if part === 0}
function create_if_block(ctx) {
	let section;
	let h1;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let button;
	let t4;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			section = element("section");
			h1 = element("h1");
			t0 = text("Welcome to Mind Your Data Challenge");
			t1 = space();
			p = element("p");
			t2 = text("Only for educational purpose, this test will utilize blah blah blah. There will be no personal data collected or shared... This test will only  blah blah blah and utilize blah blah blah. There will be no data... This test will only do blah blah blah and utilize blah blah blah. There will be no data... This test will only do blah blah blah and utilize blah blah blah. There will be no data...");
			t3 = space();
			button = element("button");
			t4 = text("Start Challenge");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			h1 = claim_element(section_nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Welcome to Mind Your Data Challenge");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			p = claim_element(section_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Only for educational purpose, this test will utilize blah blah blah. There will be no personal data collected or shared... This test will only  blah blah blah and utilize blah blah blah. There will be no data... This test will only do blah blah blah and utilize blah blah blah. There will be no data... This test will only do blah blah blah and utilize blah blah blah. There will be no data...");
			p_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			button = claim_element(section_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t4 = claim_text(button_nodes, "Start Challenge");
			button_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 13, 8, 280);
			add_location(p, file, 14, 8, 333);
			attr_dev(button, "class", "svelte-1gme2nj");
			add_location(button, file, 16, 8, 756);
			attr_dev(section, "class", "svelte-1gme2nj");
			add_location(section, file, 12, 4, 262);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h1);
			append_dev(h1, t0);
			append_dev(section, t1);
			append_dev(section, p);
			append_dev(p, t2);
			append_dev(section, t3);
			append_dev(section, button);
			append_dev(button, t4);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[3], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(12:4) {#if part === 0}",
		ctx
	});

	return block;
}

// (24:16) {#if current === 'webcam'}
function create_if_block_9(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("q1 content");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "q1 content");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 24, 16, 1207);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(24:16) {#if current === 'webcam'}",
		ctx
	});

	return block;
}

// (30:12) {#if current === 'https'}
function create_if_block_8(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("q2 content");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "q2 content");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 30, 12, 1433);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(30:12) {#if current === 'https'}",
		ctx
	});

	return block;
}

// (36:12) {#if current === 'amazon'}
function create_if_block_7(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("q3 content");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "q3 content");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 36, 12, 1658);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(36:12) {#if current === 'amazon'}",
		ctx
	});

	return block;
}

// (42:12) {#if current === 'search'}
function create_if_block_6(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("q4 content");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "q4 content");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 42, 12, 1884);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(42:12) {#if current === 'search'}",
		ctx
	});

	return block;
}

// (48:12) {#if current === 'privacy'}
function create_if_block_5(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("q5 content");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "q5 content");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 48, 12, 2111);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(48:12) {#if current === 'privacy'}",
		ctx
	});

	return block;
}

// (54:12) {#if current === 'tracker'}
function create_if_block_4(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("q6 content");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "q6 content");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 54, 12, 2339);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(54:12) {#if current === 'tracker'}",
		ctx
	});

	return block;
}

// (60:12) {#if current === 'location'}
function create_if_block_3(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("q7 content");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "q7 content");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 60, 12, 2570);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(60:12) {#if current === 'location'}",
		ctx
	});

	return block;
}

// (66:12) {#if current === 'iot'}
function create_if_block_2(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("q8 content");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "q8 content");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 66, 12, 2786);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(66:12) {#if current === 'iot'}",
		ctx
	});

	return block;
}

// (10:0) <Trans>
function create_default_slot(ctx) {
	let main;

	function select_block_type(ctx, dirty) {
		if (/*part*/ ctx[0] === 0) return create_if_block;
		if (/*part*/ ctx[0] === 1) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			main = element("main");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			if_block.l(main_nodes);
			main_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(main, "class", "svelte-1gme2nj");
			add_location(main, file, 10, 0, 230);
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			if_block.m(main, null);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(main, null);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(10:0) <Trans>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let trans;
	let current;

	trans = new TransHelp({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t = space();
			create_component(trans.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1tak1mj\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			claim_component(trans.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Data privacy quiz";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(trans, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const trans_changes = {};

			if (dirty & /*$$scope, part, current, $quizSteps*/ 8199) {
				trans_changes.$$scope = { dirty, ctx };
			}

			trans.$set(trans_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(trans.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(trans.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_component(trans, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $quizSteps;
	validate_store(quizSteps, "quizSteps");
	component_subscribe($$self, quizSteps, $$value => $$invalidate(2, $quizSteps = $$value));
	let part = 0;
	let current = "initial";
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Quiz> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Quiz", $$slots, []);
	const click_handler = () => $$invalidate(0, part = 1);
	const click_handler_1 = () => $$invalidate(0, part = 2);
	const click_handler_2 = () => $$invalidate(1, current = "iot");
	const click_handler_3 = () => $$invalidate(1, current = "location");
	const click_handler_4 = () => $$invalidate(1, current = "tracker");
	const click_handler_5 = () => $$invalidate(1, current = "amazon");
	const click_handler_6 = () => $$invalidate(1, current = "privacy");
	const click_handler_7 = () => $$invalidate(1, current = "search");
	const click_handler_8 = () => $$invalidate(1, current = "https");
	const click_handler_9 = () => $$invalidate(1, current = "webcam");

	$$self.$capture_state = () => ({
		Trans: TransHelp,
		part,
		current,
		quizSteps,
		$quizSteps
	});

	$$self.$inject_state = $$props => {
		if ("part" in $$props) $$invalidate(0, part = $$props.part);
		if ("current" in $$props) $$invalidate(1, current = $$props.current);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		part,
		current,
		$quizSteps,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		click_handler_7,
		click_handler_8,
		click_handler_9
	];
}

class Quiz extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Quiz",
			options,
			id: create_fragment.name
		});
	}
}

export default Quiz;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
