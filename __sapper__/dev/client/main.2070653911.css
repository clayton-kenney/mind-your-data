h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}
main.svelte-19axu57{background-color:white;box-sizing:border-box}
#logo-holder.svelte-1vtc7gq{background-color:white;display:flex;flex-flow:column nowrap;align-items:center}img.svelte-1vtc7gq{width:800px}
h1.svelte-1acdip2.svelte-1acdip2,p.svelte-1acdip2.svelte-1acdip2{text-align:center;margin:0 auto}.hero.svelte-1acdip2.svelte-1acdip2{background-color:#3e4b59;padding-left:80px;padding-top:30vh;width:100%;height:60vh}.hero.svelte-1acdip2 p.svelte-1acdip2{margin:1em auto;color:white}h1.svelte-1acdip2.svelte-1acdip2{font-size:2.8em;text-align:left;text-transform:uppercase;font-weight:700;margin:0 0 0.5em 0;color:white;letter-spacing:25%}h2.svelte-1acdip2.svelte-1acdip2{text-align:left;margin:auto;text-transform:uppercase}h3.svelte-1acdip2.svelte-1acdip2{text-align:center;margin:auto}.bigImg.svelte-1acdip2.svelte-1acdip2{max-width:1400px;background-color:grey}button.svelte-1acdip2.svelte-1acdip2{background:#7AAF54;text-transform:uppercase;padding:10px 20px 10px 20px;font-size:30px;line-height:38px;border:none;border-radius:10px;color:white;box-shadow:0px 4px 4px rgba(0, 0, 0, 0.25)}img.svelte-1acdip2.svelte-1acdip2{width:100%;max-width:400px;margin:0 0 1em 0}.about.svelte-1acdip2.svelte-1acdip2{padding:1.5em}p.svelte-1acdip2.svelte-1acdip2{color:black;text-align:left}ul.svelte-1acdip2.svelte-1acdip2{display:flex;flex-direction:row;list-style:none;margin-block-start:0px;margin-block-end:0px;padding-inline-start:0px}li.svelte-1acdip2.svelte-1acdip2{justify-content:space-around;margin:auto}.why.svelte-1acdip2.svelte-1acdip2{padding-left:80px;margin:1em auto}a.svelte-1acdip2.svelte-1acdip2{text-decoration:none;padding:4px 30px}@media(min-width: 480px){h1.svelte-1acdip2.svelte-1acdip2{font-size:4em}}
main.svelte-fltwt6{display:flex;flex-flow:row}#main-content.svelte-fltwt6{background:#38424D;border-radius:15px;border:0px;margin:12px 22px 40px 20px;padding:9.3vh 5vw 0vh 9.3vh;color:#FFFFFF;width:100%;background-image:url('../bg-vector.png');background-blend-mode:darken}#checkpoint.svelte-fltwt6{}
main.svelte-2cos9x{background-color:#303538}.review.svelte-2cos9x{width:50vw;background-color:#38424d;display:flex;flex-flow:column;margin:auto;color:#ffffff;padding:65px 100px 65px 65px}#complete.svelte-2cos9x{background-color:#38424D;color:#ffffff;font-weight:500;margin:5px}#incomplete.svelte-2cos9x{background-color:#ffffff;color:#e94040;font-weight:500;margin:5px}button.svelte-2cos9x{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}.caret.svelte-2cos9x{display:flex;flex-flow:row nowrap;align-items:center;justify-content:space-between}div.caret.svelte-2cos9x{border-radius:6px;border:none;margin:10px;padding:10px 20px}.prize1.svelte-2cos9x{color:#ffffff;display:flex;flex-flow:column nowrap;align-items:center;text-align:center}img.svelte-2cos9x{width:100%;border-radius:6px}.button-holder.svelte-2cos9x{align-items:center;padding-bottom:50px}
main.svelte-xtf1j9{display:flex;flex-flow:row;justify-content:center;margin-top:15px}section.svelte-xtf1j9{background:#38424D;width:65vw;border-radius:15px;border:0px;margin:auto;padding:15vh 9vw;color:#FFFFFF;text-align:center;max-width:62%;background-image:url(/bg-lock.png);background-repeat:no-repeat;background-blend-mode:darken;background-position:center}#welcome.svelte-xtf1j9{padding-bottom:40px}p.svelte-xtf1j9{text-align:left}.welcome-text.svelte-xtf1j9{text-align:center}#headline.svelte-xtf1j9{font-weight:600;margin-bottom:25px;font-size:20px}#start.svelte-xtf1j9{background-color:#73ef7b;margin-top:50px}#start-challenge.svelte-xtf1j9{margin-top:75px}a.svelte-xtf1j9{text-decoration:none}.caret.svelte-xtf1j9{display:flex;flex-flow:row nowrap;align-items:center;justify-content:space-between}
ul.svelte-1frg2tf{margin:0 0 1em 0;line-height:1.5}
.content.svelte-gnxal1 h2{font-size:1.4em;font-weight:500}.content.svelte-gnxal1 pre{background-color:#f9f9f9;box-shadow:inset 1px 1px 5px rgba(0,0,0,0.05);padding:0.5em;border-radius:2px;overflow-x:auto}.content.svelte-gnxal1 pre code{background-color:transparent;padding:0}.content.svelte-gnxal1 ul{line-height:1.5}.content.svelte-gnxal1 li{margin:0 0 0.5em 0}
.quiz-holder.svelte-dkh3bo{display:block;width:65vw;left:20vw;height:100vh;padding:20px 50px}.step.svelte-dkh3bo{margin-bottom:55px}#progress.svelte-dkh3bo{margin-top:50px}ul.svelte-dkh3bo{padding-inline-start:15px}li.svelte-dkh3bo{margin:30px 0px}.incomplete.svelte-dkh3bo{color:#a0a0a0;list-style-type:circle}.complete.svelte-dkh3bo{list-style-type:disc}.Side-headline.svelte-dkh3bo{font-size:24px;font-weight:700}#videoElement.svelte-dkh3bo{}.btn-dark.svelte-dkh3bo{color:white;background:#0F2033;border-radius:6px;width:30%;text-align:center;padding:5px 10px}button.svelte-dkh3bo{border:none;padding:5px 10px}
aside.svelte-n0ypaq{display:block;top:50px;left:0;width:27.77vw;height:100vh;padding-left:50px}section.svelte-n0ypaq{padding:10px 10px 20px 10px}
.button-holder.svelte-1sss75x{width:27vw;display:flex;flex-flow:column nowrap}.video-holder.svelte-1sss75x{width:100%}button.svelte-1sss75x{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}#alert.svelte-1sss75x{color:red;font-weight:700;font-size:24px}#not-covered.svelte-1sss75x{color:red;background:#FFEEEE;border-radius:6px;border:none}
.num.svelte-m0bqhn{padding-right:100px}div.svelte-m0bqhn{color:black}.active.svelte-m0bqhn{display:block}
nav.svelte-wgfy02{display:flex;flex-flow:row nowrap;height:50px;justify-content:space-between;align-items:center;background-color:#303538;font-weight:300;padding:0 1em;position:sticky;top:0px;left:0px;z-index:1}ul.svelte-wgfy02{display:flex;list-style:none;justify-content:flex-end;margin:0;padding:0;color:#c7c7c7}img.svelte-wgfy02{display:flex;justify-content:flex-start;height:30px;margin-left:25px}li.svelte-wgfy02{display:flex;margin:0px 20px 0px 20px;text-transform:uppercase}[aria-current].svelte-wgfy02{position:relative;display:inline-block}[aria-current].svelte-wgfy02::after{position:absolute;content:'';width:calc(100% - 1em);height:2px;background-color:#e74e45;display:block}a.svelte-wgfy02{display:flex;padding:1em 0.5em;text-decoration:none;margin:2em, 0em}.home.svelte-wgfy02{background-color:white}
.video-holder.svelte-1eg3wlj{width:100%}
.button-holder.svelte-leh4oa{width:27vw;display:flex;flex-flow:column nowrap}a.svelte-leh4oa{text-decoration:none}
.caret.svelte-hhwisi{display:flex;flex-flow:row nowrap;align-items:center;justify-content:space-between}a.svelte-hhwisi{text-decoration:underline}
.button-holder.svelte-1omauo6{width:27vw;display:flex;flex-flow:column nowrap}#cookie-buttons.svelte-1omauo6{margin:40px 0px 0px 0px}
.button-holder.svelte-15owt46{width:27vw;display:flex;flex-flow:column nowrap}button.svelte-15owt46{padding:10px 20px;margin:10px;border:black solid 0px;border-radius:8px}a.svelte-15owt46{text-decoration:none}
.button-holder.svelte-h4ab6b{width:27vw;display:flex;flex-flow:column nowrap}.caret.svelte-h4ab6b{display:flex;flex-flow:row nowrap;align-items:center;justify-content:space-between}
.button-holder.svelte-338bov{width:27vw;display:flex;flex-flow:column nowrap}
section.svelte-1y4us4j{width:100%}.button-holder.svelte-1y4us4j{width:27vw;display:flex;flex-flow:column nowrap}
#main-content.svelte-su6n7t{width:100%;background-image:url(https://images.unsplash.com/photo-1558697524-5a2d1e8a93d1?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2550&q=80);background-size:contain;padding-top:15px}div.svelte-su6n7t{width:50%;margin:auto;background:#38424D;border:none;border-radius:15px;padding:9.3vh 5vw 0vh 9.3vh;color:#FFFFFF}strong.svelte-su6n7t{font-weight:700;font-size:22px}
section.svelte-1fien2q{width:100%;background-image:url(https://images.unsplash.com/photo-1535376472810-5d229c65da09?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2600&q=80);background-size:contain;padding-top:15px}div.svelte-1fien2q{width:50%;margin:auto;background:#38424D;border:none;border-radius:15px;padding:9.3vh 5vw 0vh 9.3vh;color:#FFFFFF}strong.svelte-1fien2q{font-weight:700;font-size:22px}
section.svelte-fqq2f8{width:100vw;height:100vh;background-image:url(https://images.unsplash.com/photo-1557411732-1797a9171fcf?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=750&q=80);background-size:contain;padding-top:15px}div.svelte-fqq2f8{width:50%;margin:auto;background:#38424D;border:none;border-radius:15px;padding:9.3vh 5vw 0vh 9.3vh;color:#FFFFFF}
aside.svelte-1vkgvcf{display:flex;flex-direction:column;justify-content:space-between;align-items:center;width:33.75vw;height:86vh;background-color:#38424D;border-radius:15px;border:0px;margin:12px 0px 40px 20px;min-width:33vw;position:sticky;top:50px}#timer.svelte-1vkgvcf{display:flex;flex-flow:row wrap;margin-block-start:30px;align-items:center;justify-content:center}#minutes.svelte-1vkgvcf{color:white;background:#0F2033;border-radius:6px;max-width:150px;height:60px;text-align:center;font-size:24px;margin:8px 20px;display:grid;align-content:center;padding:2px 30px}.done.svelte-1vkgvcf{display:flex;flex-flow:row nowrap;align-items:center;width:95%;margin-bottom:20px
    }progress.svelte-1vkgvcf{-webkit-appearance:none;border:none;display:block;width:86%;position:relative;bottom:4.7vh;height:6px;z-index:-1;margin-left:31px}progress.svelte-1vkgvcf::-webkit-progress-bar{background:#303538}progress.bg1.svelte-1vkgvcf::-webkit-progress-value{background:#74ef7b}progress.bg2.svelte-1vkgvcf::-webkit-progress-value{background:#F1C330}progress.bg3.svelte-1vkgvcf::-webkit-progress-value{background:#E94040}.bg1.svelte-1vkgvcf{background-image:url('../bg-group1.png');background-blend-mode:normal;background-size:cover;background-position:top;color:#74ef7b;font-size:20px}.bg2.svelte-1vkgvcf{background-image:url('../bg-group2.png');background-blend-mode:normal;background-size:cover;background-position:top;color:#F1C330;font-size:20px}.bg3.svelte-1vkgvcf{background-image:url('../bg-group3.png');background-blend-mode:normal;background-size:cover;background-position:top;color:#E94040;font-size:20px}#progress-holder.svelte-1vkgvcf{width:80%}#challenge-name.svelte-1vkgvcf{font-size:40px;color:white}
canvas.svelte-1qzoqa3{position:absolute;top:100px;left:525px}.alert.svelte-1qzoqa3{color:red;font-weight:700;font-size:24px}#not-covered.svelte-1qzoqa3{color:red;background:#FFEEEE;border-radius:6px;border:none;padding:15px}
button.svelte-c2wm0k{}.green.svelte-c2wm0k{background-color:#73ef7b;color:#2C3C4E}.yellow.svelte-c2wm0k{background-color:#F1C330;color:#2C3C4E}.red.svelte-c2wm0k{background-color:#E74E45;color:#FFFFFF}
button.svelte-c2wm0k{}.green.svelte-c2wm0k{background-color:#73ef7b;color:#2C3C4E}.yellow.svelte-c2wm0k{background-color:#F1C330;color:#2C3C4E}.red.svelte-c2wm0k{background-color:#E74E45;color:#FFFFFF}
button.svelte-1ip8e9i{margin-top:7.2vh}.green.svelte-1ip8e9i{background-color:#73ef7b;color:#2C3C4E}.yellow.svelte-1ip8e9i{background-color:#F1C330;color:#2C3C4E}.red.svelte-1ip8e9i{background-color:#E74E45;color:#FFFFFF}
#back.svelte-1x5om3e{display:flex;position:inherit;bottom:72px;flex-flow:row nowrap;align-items:center;color:#757575;margin:20px 0px}svg.svelte-1x5om3e{margin-right:20px;fill:#757575}
.lock.svelte-n4s916{margin:auto}
strong.svelte-1qffeqo{font-weight:600;font-size:22px;text-decoration:underline}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */