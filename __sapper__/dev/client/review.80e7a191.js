import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, H as validate_store, I as component_subscribe, J as createEventDispatcher, o as onMount, v as validate_slots, K as beforeUpdate, P as globals, B as space, c as create_component, D as query_selector_all, j as detach_dev, E as claim_space, a as claim_component, n as insert_dev, m as mount_component, t as transition_in, b as transition_out, e as destroy_component, Q as set_store_value, f as element, g as claim_element, h as children, k as attr_dev, l as add_location, p as append_dev, w as group_outros, x as check_outros, Y as validate_each_argument, U as empty, C as text, F as claim_text, N as set_data_dev, _ as destroy_each, V as svg_element } from './client.92949371.js';
import './index.a9b41745.js';
import { T as TransHelp } from './TransHelp.abbc4b8f.js';
import { c as count, s as step, q as quizSteps } from './store.6b6f7a95.js';
import { C as Complete, B as Back } from './Back.58c9c831.js';
import { B as Btn } from './Btn.1d7074da.js';

/* src/routes/review.svelte generated by Svelte v3.23.2 */

const { console: console_1 } = globals;
const file = "src/routes/review.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i].name;
	child_ctx[8] = list[i].complete;
	child_ctx[9] = list[i].displayProgress;
	return child_ctx;
}

// (98:4) {:else}
function create_else_block_1(ctx) {
	let div1;
	let h3;
	let t0;
	let t1;
	let p0;
	let t2;
	let br;
	let t3;
	let t4;
	let h1;
	let t5;
	let t6;
	let h2;
	let t7;
	let t8;
	let p1;
	let t9;
	let t10;
	let img;
	let img_src_value;
	let t11;
	let div0;
	let btn;
	let current;

	btn = new Btn({
			props: {
				q: 0,
				p: 0,
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			h3 = element("h3");
			t0 = text("Congrats!");
			t1 = space();
			p0 = element("p");
			t2 = text("You made it all the way through.");
			br = element("br");
			t3 = text("We are impressed!");
			t4 = space();
			h1 = element("h1");
			t5 = text("Level 3: Grand Awesome Person of Privacy");
			t6 = space();
			h2 = element("h2");
			t7 = text("Thanks for caring");
			t8 = space();
			p1 = element("p");
			t9 = text("Prize: Access to a super limited editon Mind Your Data T-shirt. Only 50 made, for those dedicated to privacy.");
			t10 = space();
			img = element("img");
			t11 = space();
			div0 = element("div");
			create_component(btn.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Congrats!");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			p0 = claim_element(div1_nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "You made it all the way through.");
			br = claim_element(p0_nodes, "BR", {});
			t3 = claim_text(p0_nodes, "We are impressed!");
			p0_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);
			h1 = claim_element(div1_nodes, "H1", {});
			var h1_nodes = children(h1);
			t5 = claim_text(h1_nodes, "Level 3: Grand Awesome Person of Privacy");
			h1_nodes.forEach(detach_dev);
			t6 = claim_space(div1_nodes);
			h2 = claim_element(div1_nodes, "H2", {});
			var h2_nodes = children(h2);
			t7 = claim_text(h2_nodes, "Thanks for caring");
			h2_nodes.forEach(detach_dev);
			t8 = claim_space(div1_nodes);
			p1 = claim_element(div1_nodes, "P", {});
			var p1_nodes = children(p1);
			t9 = claim_text(p1_nodes, "Prize: Access to a super limited editon Mind Your Data T-shirt. Only 50 made, for those dedicated to privacy.");
			p1_nodes.forEach(detach_dev);
			t10 = claim_space(div1_nodes);
			img = claim_element(div1_nodes, "IMG", { src: true, alt: true, class: true });
			t11 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(btn.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h3, file, 99, 8, 4146);
			add_location(br, file, 100, 47, 4212);
			add_location(p0, file, 100, 12, 4177);
			add_location(h1, file, 101, 8, 4246);
			add_location(h2, file, 102, 8, 4304);
			add_location(p1, file, 103, 12, 4343);
			if (img.src !== (img_src_value = "./shirt_mock.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "mind your data shirt on a model");
			attr_dev(img, "class", "svelte-6eoo08");
			add_location(img, file, 104, 8, 4468);
			attr_dev(div0, "class", "button-holder svelte-6eoo08");
			add_location(div0, file, 105, 8, 4544);
			attr_dev(div1, "class", "prize1 svelte-6eoo08");
			add_location(div1, file, 98, 4, 4117);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, h3);
			append_dev(h3, t0);
			append_dev(div1, t1);
			append_dev(div1, p0);
			append_dev(p0, t2);
			append_dev(p0, br);
			append_dev(p0, t3);
			append_dev(div1, t4);
			append_dev(div1, h1);
			append_dev(h1, t5);
			append_dev(div1, t6);
			append_dev(div1, h2);
			append_dev(h2, t7);
			append_dev(div1, t8);
			append_dev(div1, p1);
			append_dev(p1, t9);
			append_dev(div1, t10);
			append_dev(div1, img);
			append_dev(div1, t11);
			append_dev(div1, div0);
			mount_component(btn, div0, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const btn_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				btn_changes.$$scope = { dirty, ctx };
			}

			btn.$set(btn_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(btn.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(btn.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(btn);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(98:4) {:else}",
		ctx
	});

	return block;
}

// (85:26) 
function create_if_block_4(ctx) {
	let div1;
	let h3;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let h1;
	let t4;
	let t5;
	let h2;
	let t6;
	let t7;
	let img;
	let img_src_value;
	let t8;
	let p1;
	let t9;
	let t10;
	let div0;
	let btn;
	let current;

	btn = new Btn({
			props: {
				q: 0,
				p: 0,
				disabled: true,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			h3 = element("h3");
			t0 = text("Congrats!");
			t1 = space();
			p0 = element("p");
			t2 = text("You didn't abandon us, and learned a little about data privacy");
			t3 = space();
			h1 = element("h1");
			t4 = text("Level 2");
			t5 = space();
			h2 = element("h2");
			t6 = text("Not too shabby");
			t7 = space();
			img = element("img");
			t8 = space();
			p1 = element("p");
			t9 = text("Prize: Mind your data pin set. Availible for purchase only for a select group of people.(coming soon)");
			t10 = space();
			div0 = element("div");
			create_component(btn.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Congrats!");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			p0 = claim_element(div1_nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "You didn't abandon us, and learned a little about data privacy");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			h1 = claim_element(div1_nodes, "H1", {});
			var h1_nodes = children(h1);
			t4 = claim_text(h1_nodes, "Level 2");
			h1_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			h2 = claim_element(div1_nodes, "H2", {});
			var h2_nodes = children(h2);
			t6 = claim_text(h2_nodes, "Not too shabby");
			h2_nodes.forEach(detach_dev);
			t7 = claim_space(div1_nodes);
			img = claim_element(div1_nodes, "IMG", { src: true, alt: true, class: true });
			t8 = claim_space(div1_nodes);
			p1 = claim_element(div1_nodes, "P", {});
			var p1_nodes = children(p1);
			t9 = claim_text(p1_nodes, "Prize: Mind your data pin set. Availible for purchase only for a select group of people.(coming soon)");
			p1_nodes.forEach(detach_dev);
			t10 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(btn.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h3, file, 86, 8, 3555);
			add_location(p0, file, 87, 12, 3586);
			add_location(h1, file, 88, 8, 3664);
			add_location(h2, file, 89, 8, 3689);
			if (img.src !== (img_src_value = "./pins.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "women wearing mind your data pins which is the prize for this level");
			attr_dev(img, "class", "svelte-6eoo08");
			add_location(img, file, 90, 8, 3721);
			add_location(p1, file, 91, 12, 3831);
			attr_dev(div0, "class", "button-holder svelte-6eoo08");
			add_location(div0, file, 93, 8, 3961);
			attr_dev(div1, "class", "prize1 svelte-6eoo08");
			add_location(div1, file, 85, 4, 3526);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, h3);
			append_dev(h3, t0);
			append_dev(div1, t1);
			append_dev(div1, p0);
			append_dev(p0, t2);
			append_dev(div1, t3);
			append_dev(div1, h1);
			append_dev(h1, t4);
			append_dev(div1, t5);
			append_dev(div1, h2);
			append_dev(h2, t6);
			append_dev(div1, t7);
			append_dev(div1, img);
			append_dev(div1, t8);
			append_dev(div1, p1);
			append_dev(p1, t9);
			append_dev(div1, t10);
			append_dev(div1, div0);
			mount_component(btn, div0, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const btn_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				btn_changes.$$scope = { dirty, ctx };
			}

			btn.$set(btn_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(btn.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(btn.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(btn);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(85:26) ",
		ctx
	});

	return block;
}

// (73:26) 
function create_if_block_3(ctx) {
	let div1;
	let h3;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let h1;
	let t4;
	let t5;
	let h2;
	let t6;
	let t7;
	let img;
	let img_src_value;
	let t8;
	let p1;
	let t9;
	let br;
	let t10;
	let t11;
	let div0;
	let a;
	let btn;
	let current;

	btn = new Btn({
			props: {
				q: 0,
				p: 0,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			h3 = element("h3");
			t0 = text("Congrats!");
			t1 = space();
			p0 = element("p");
			t2 = text("You didn't abandon us");
			t3 = space();
			h1 = element("h1");
			t4 = text("Level1");
			t5 = space();
			h2 = element("h2");
			t6 = text("Maybe try harder next time...");
			t7 = space();
			img = element("img");
			t8 = space();
			p1 = element("p");
			t9 = text("Prize: A radical mind your data poster. ");
			br = element("br");
			t10 = text("Download it, and print it at home.");
			t11 = space();
			div0 = element("div");
			a = element("a");
			create_component(btn.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Congrats!");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			p0 = claim_element(div1_nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "You didn't abandon us");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			h1 = claim_element(div1_nodes, "H1", {});
			var h1_nodes = children(h1);
			t4 = claim_text(h1_nodes, "Level1");
			h1_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			h2 = claim_element(div1_nodes, "H2", {});
			var h2_nodes = children(h2);
			t6 = claim_text(h2_nodes, "Maybe try harder next time...");
			h2_nodes.forEach(detach_dev);
			t7 = claim_space(div1_nodes);
			img = claim_element(div1_nodes, "IMG", { src: true, alt: true, class: true });
			t8 = claim_space(div1_nodes);
			p1 = claim_element(div1_nodes, "P", {});
			var p1_nodes = children(p1);
			t9 = claim_text(p1_nodes, "Prize: A radical mind your data poster. ");
			br = claim_element(p1_nodes, "BR", {});
			t10 = claim_text(p1_nodes, "Download it, and print it at home.");
			p1_nodes.forEach(detach_dev);
			t11 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			a = claim_element(div0_nodes, "A", { href: true, download: true });
			var a_nodes = children(a);
			claim_component(btn.$$.fragment, a_nodes);
			a_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h3, file, 74, 8, 3009);
			add_location(p0, file, 75, 12, 3040);
			add_location(h1, file, 76, 8, 3077);
			add_location(h2, file, 77, 8, 3101);
			if (img.src !== (img_src_value = "poster_mock.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "mind your data poster on the street at night");
			attr_dev(img, "class", "svelte-6eoo08");
			add_location(img, file, 78, 8, 3148);
			add_location(br, file, 79, 55, 3283);
			add_location(p1, file, 79, 12, 3240);
			attr_dev(a, "href", "./MindYourDataPoster.pdf");
			attr_dev(a, "download", "");
			add_location(a, file, 81, 11, 3374);
			attr_dev(div0, "class", "button-holder svelte-6eoo08");
			add_location(div0, file, 80, 8, 3334);
			attr_dev(div1, "class", "prize1 svelte-6eoo08");
			add_location(div1, file, 73, 4, 2980);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, h3);
			append_dev(h3, t0);
			append_dev(div1, t1);
			append_dev(div1, p0);
			append_dev(p0, t2);
			append_dev(div1, t3);
			append_dev(div1, h1);
			append_dev(h1, t4);
			append_dev(div1, t5);
			append_dev(div1, h2);
			append_dev(h2, t6);
			append_dev(div1, t7);
			append_dev(div1, img);
			append_dev(div1, t8);
			append_dev(div1, p1);
			append_dev(p1, t9);
			append_dev(p1, br);
			append_dev(p1, t10);
			append_dev(div1, t11);
			append_dev(div1, div0);
			append_dev(div0, a);
			mount_component(btn, a, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const btn_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				btn_changes.$$scope = { dirty, ctx };
			}

			btn.$set(btn_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(btn.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(btn.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(btn);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(73:26) ",
		ctx
	});

	return block;
}

// (43:4) {#if $step === 0}
function create_if_block(ctx) {
	let h2;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let div;
	let btn;
	let t5;
	let a;
	let button;
	let t6;
	let current;
	let each_value = /*$quizSteps*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	btn = new Btn({
			props: {
				p: 0,
				q: /*s*/ ctx[0],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text("You have completed ");
			t1 = text(/*comp*/ ctx[1]);
			t2 = text(" / 8 challenges!");
			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			div = element("div");
			create_component(btn.$$.fragment);
			t5 = space();
			a = element("a");
			button = element("button");
			t6 = text("Back to quiz");
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "You have completed ");
			t1 = claim_text(h2_nodes, /*comp*/ ctx[1]);
			t2 = claim_text(h2_nodes, " / 8 challenges!");
			h2_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			t4 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(btn.$$.fragment, div_nodes);
			t5 = claim_space(div_nodes);
			a = claim_element(div_nodes, "A", { prefetch: true, href: true });
			var a_nodes = children(a);
			button = claim_element(a_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t6 = claim_text(button_nodes, "Back to quiz");
			button_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 43, 4, 1219);
			attr_dev(button, "class", "svelte-6eoo08");
			add_location(button, file, 70, 36, 2904);
			attr_dev(a, "prefetch", "");
			attr_dev(a, "href", "quizmain");
			add_location(a, file, 70, 8, 2876);
			attr_dev(div, "class", "button-holder svelte-6eoo08");
			add_location(div, file, 68, 4, 2795);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			append_dev(h2, t1);
			append_dev(h2, t2);
			insert_dev(target, t3, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t4, anchor);
			insert_dev(target, div, anchor);
			mount_component(btn, div, null);
			append_dev(div, t5);
			append_dev(div, a);
			append_dev(a, button);
			append_dev(button, t6);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*comp*/ 2) set_data_dev(t1, /*comp*/ ctx[1]);

			if (dirty & /*$quizSteps*/ 4) {
				each_value = /*$quizSteps*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(t4.parentNode, t4);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const btn_changes = {};
			if (dirty & /*s*/ 1) btn_changes.q = /*s*/ ctx[0];

			if (dirty & /*$$scope*/ 4096) {
				btn_changes.$$scope = { dirty, ctx };
			}

			btn.$set(btn_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(btn.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(btn.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t3);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div);
			destroy_component(btn);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(43:4) {#if $step === 0}",
		ctx
	});

	return block;
}

// (107:12) <Btn q={0} p={0}>
function create_default_slot_4(ctx) {
	let t0;
	let br;
	let t1;

	const block = {
		c: function create() {
			t0 = text("Buy your shirt!!");
			br = element("br");
			t1 = text(" (coming soon)");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "Buy your shirt!!");
			br = claim_element(nodes, "BR", {});
			t1 = claim_text(nodes, " (coming soon)");
			this.h();
		},
		h: function hydrate() {
			add_location(br, file, 106, 45, 4618);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t1, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(107:12) <Btn q={0} p={0}>",
		ctx
	});

	return block;
}

// (95:12) <Btn q={0} p={0} disabled={true}>
function create_default_slot_3(ctx) {
	let t0;
	let br;
	let t1;

	const block = {
		c: function create() {
			t0 = text("Claim your pins");
			br = element("br");
			t1 = text(" (coming soon)");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "Claim your pins");
			br = claim_element(nodes, "BR", {});
			t1 = claim_text(nodes, " (coming soon)");
			this.h();
		},
		h: function hydrate() {
			add_location(br, file, 94, 60, 4050);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t1, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(95:12) <Btn q={0} p={0} disabled={true}>",
		ctx
	});

	return block;
}

// (82:59) <Btn q={0} p={0}>
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Download the poster");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Download the poster");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(82:59) <Btn q={0} p={0}>",
		ctx
	});

	return block;
}

// (47:4) {#if displayProgress}
function create_if_block_1(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (!/*complete*/ ctx[8]) return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(47:4) {#if displayProgress}",
		ctx
	});

	return block;
}

// (57:8) {:else}
function create_else_block(ctx) {
	let div;
	let p;
	let t0_value = /*name*/ ctx[7] + "";
	let t0;
	let t1;
	let svg;
	let path0;
	let path1;

	const block = {
		c: function create() {
			div = element("div");
			p = element("p");
			t0 = text(t0_value);
			t1 = space();
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, t0_value);
			p_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);

			svg = claim_element(
				div_nodes,
				"svg",
				{
					width: true,
					height: true,
					viewBox: true,
					fill: true,
					xmlns: true
				},
				1
			);

			var svg_nodes = children(svg);

			path0 = claim_element(
				svg_nodes,
				"path",
				{
					d: true,
					fill: true,
					stroke: true,
					"stroke-width": true
				},
				1
			);

			children(path0).forEach(detach_dev);
			path1 = claim_element(svg_nodes, "path", { d: true, fill: true }, 1);
			children(path1).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "status svelte-6eoo08");
			add_location(p, file, 58, 12, 1937);
			attr_dev(path0, "d", "M10.2754 19.037C15.1206 19.037 19.0509 15.1126 19.0509 10.2685C19.0509 5.42444 15.1206 1.5 10.2754 1.5C5.43025 1.5 1.5 5.42444 1.5 10.2685C1.5 15.1126 5.43025 19.037 10.2754 19.037Z");
			attr_dev(path0, "fill", "#E94040");
			attr_dev(path0, "stroke", "#E94040");
			attr_dev(path0, "stroke-width", "3");
			add_location(path0, file, 60, 12, 2082);
			attr_dev(path1, "d", "M8.28453 15.8272L3.87075 11.4176C3.60558 11.1527 3.60558 10.7232 3.87075 10.4583L4.83104 9.49886C5.09621 9.23391 5.52618 9.23391 5.79135 9.49886L8.76468 12.4693L15.1332 6.10689C15.3984 5.84197 15.8284 5.84197 16.0935 6.10689L17.0538 7.06629C17.319 7.3312 17.319 7.76074 17.0538 8.02568L9.24484 15.8272C8.97964 16.0921 8.5497 16.0921 8.28453 15.8272Z");
			attr_dev(path1, "fill", "#303538");
			add_location(path1, file, 61, 12, 2337);
			attr_dev(svg, "width", "21");
			attr_dev(svg, "height", "21");
			attr_dev(svg, "viewBox", "0 0 21 21");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			add_location(svg, file, 59, 8, 1974);
			attr_dev(div, "id", "complete");
			attr_dev(div, "class", "caret svelte-6eoo08");
			add_location(div, file, 57, 8, 1890);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p);
			append_dev(p, t0);
			append_dev(div, t1);
			append_dev(div, svg);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$quizSteps*/ 4 && t0_value !== (t0_value = /*name*/ ctx[7] + "")) set_data_dev(t0, t0_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(57:8) {:else}",
		ctx
	});

	return block;
}

// (49:8) {#if !complete}
function create_if_block_2(ctx) {
	let div;
	let p;
	let t0_value = /*name*/ ctx[7] + "";
	let t0;
	let t1;
	let svg;
	let circle;
	let path;

	const block = {
		c: function create() {
			div = element("div");
			p = element("p");
			t0 = text(t0_value);
			t1 = space();
			svg = svg_element("svg");
			circle = svg_element("circle");
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, t0_value);
			p_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);

			svg = claim_element(
				div_nodes,
				"svg",
				{
					width: true,
					height: true,
					viewBox: true,
					fill: true,
					xmlns: true
				},
				1
			);

			var svg_nodes = children(svg);

			circle = claim_element(
				svg_nodes,
				"circle",
				{
					cx: true,
					cy: true,
					r: true,
					stroke: true,
					"stroke-width": true
				},
				1
			);

			children(circle).forEach(detach_dev);
			path = claim_element(svg_nodes, "path", { d: true, fill: true }, 1);
			children(path).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "status svelte-6eoo08");
			add_location(p, file, 50, 12, 1447);
			attr_dev(circle, "cx", "14");
			attr_dev(circle, "cy", "14");
			attr_dev(circle, "r", "13");
			attr_dev(circle, "stroke", "#E94040");
			attr_dev(circle, "stroke-width", "2");
			add_location(circle, file, 52, 12, 1592);
			attr_dev(path, "d", "M13.9991 6.91016L12.7493 8.15993L17.6952 13.1147H6.9082V14.8874H17.6952L12.7493 19.8422L13.9991 21.092L21.09 14.0011L13.9991 6.91016Z");
			attr_dev(path, "fill", "#E94040");
			add_location(path, file, 53, 12, 1671);
			attr_dev(svg, "width", "28");
			attr_dev(svg, "height", "28");
			attr_dev(svg, "viewBox", "0 0 28 28");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			add_location(svg, file, 51, 8, 1484);
			attr_dev(div, "id", "incomplete");
			attr_dev(div, "class", "caret svelte-6eoo08");
			add_location(div, file, 49, 8, 1398);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p);
			append_dev(p, t0);
			append_dev(div, t1);
			append_dev(div, svg);
			append_dev(svg, circle);
			append_dev(svg, path);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$quizSteps*/ 4 && t0_value !== (t0_value = /*name*/ ctx[7] + "")) set_data_dev(t0, t0_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(49:8) {#if !complete}",
		ctx
	});

	return block;
}

// (46:4) {#each $quizSteps as {name, complete, displayProgress}}
function create_each_block(ctx) {
	let if_block_anchor;
	let if_block = /*displayProgress*/ ctx[9] && create_if_block_1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*displayProgress*/ ctx[9]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(46:4) {#each $quizSteps as {name, complete, displayProgress}}",
		ctx
	});

	return block;
}

// (70:7) <Btn p={0} q={s}>
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Claim my Prize");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Claim my Prize");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(70:7) <Btn p={0} q={s}>",
		ctx
	});

	return block;
}

// (40:0) <Trans>
function create_default_slot(ctx) {
	let main;
	let section;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block, create_if_block_3, create_if_block_4, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$step*/ ctx[3] === 0) return 0;
		if (/*$step*/ ctx[3] === 1) return 1;
		if (/*$step*/ ctx[3] === 2) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			main = element("main");
			section = element("section");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			section = claim_element(main_nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			main_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "class", "review svelte-6eoo08");
			add_location(section, file, 41, 0, 1168);
			attr_dev(main, "class", "svelte-6eoo08");
			add_location(main, file, 40, 0, 1161);
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, section);
			if_blocks[current_block_type_index].m(section, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(section, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(40:0) <Trans>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let trans;
	let current;

	trans = new TransHelp({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t = space();
			create_component(trans.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-bfz5cl\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			claim_component(trans.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Mind Your Data";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(trans, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const trans_changes = {};

			if (dirty & /*$$scope, s, $quizSteps, comp, $step*/ 4111) {
				trans_changes.$$scope = { dirty, ctx };
			}

			trans.$set(trans_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(trans.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(trans.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_component(trans, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $quizSteps;
	let $count;
	let $step;
	validate_store(quizSteps, "quizSteps");
	component_subscribe($$self, quizSteps, $$value => $$invalidate(2, $quizSteps = $$value));
	validate_store(count, "count");
	component_subscribe($$self, count, $$value => $$invalidate(4, $count = $$value));
	validate_store(step, "step");
	component_subscribe($$self, step, $$value => $$invalidate(3, $step = $$value));
	const dispatch = createEventDispatcher();
	let s;
	let comp = 0;

	//sets aside icon to in progress via store
	onMount(async () => {
		set_store_value(quizSteps, $quizSteps[$count].status = 1, $quizSteps);

		$quizSteps.forEach(v => {
			if (v.complete && v.displayProgress) {
				$$invalidate(1, comp++, comp);
			}
		});

		step.set(0);
		let percentComplete;
		percentComplete = comp / 8 * 100;
		console.log(percentComplete);

		if (percentComplete < 33) {
			$$invalidate(0, s = 1);
		} else if (percentComplete < 90) {
			$$invalidate(0, s = 2);
		} else {
			$$invalidate(0, s = 3);
		}
	});

	let current = "initial";
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Review> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Review", $$slots, []);

	$$self.$capture_state = () => ({
		onMount,
		beforeUpdate,
		createEventDispatcher,
		dispatch,
		Trans: TransHelp,
		Complete,
		Btn,
		count,
		step,
		quizSteps,
		Back,
		s,
		comp,
		current,
		$quizSteps,
		$count,
		$step
	});

	$$self.$inject_state = $$props => {
		if ("s" in $$props) $$invalidate(0, s = $$props.s);
		if ("comp" in $$props) $$invalidate(1, comp = $$props.comp);
		if ("current" in $$props) current = $$props.current;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [s, comp, $quizSteps, $step];
}

class Review extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Review",
			options,
			id: create_fragment.name
		});
	}
}

export default Review;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
