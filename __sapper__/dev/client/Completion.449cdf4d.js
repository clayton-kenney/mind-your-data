import { H as writable, I as identity, J as assign, K as now, L as loop, S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, M as empty, l as insert_dev, n as noop, b as detach_dev, e as element, a as space, f as claim_element, c as claim_space, j as attr_dev, k as add_location, N as create_slot, O as validate_each_argument, o as validate_store, p as component_subscribe, P as set_store_value, u as globals, w as create_component, x as claim_component, y as mount_component, B as transition_in, z as transition_out, E as destroy_component, t as text, g as children, h as claim_text, m as append_dev, Q as update_slot, F as set_data_dev, G as group_outros, A as check_outros, R as destroy_each } from './client.f715525c.js';
import { q as quizSteps } from './store.52e1b1f4.js';

function is_date(obj) {
    return Object.prototype.toString.call(obj) === '[object Date]';
}

function get_interpolator(a, b) {
    if (a === b || a !== a)
        return () => a;
    const type = typeof a;
    if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
        throw new Error('Cannot interpolate values of different type');
    }
    if (Array.isArray(a)) {
        const arr = b.map((bi, i) => {
            return get_interpolator(a[i], bi);
        });
        return t => arr.map(fn => fn(t));
    }
    if (type === 'object') {
        if (!a || !b)
            throw new Error('Object cannot be null');
        if (is_date(a) && is_date(b)) {
            a = a.getTime();
            b = b.getTime();
            const delta = b - a;
            return t => new Date(a + t * delta);
        }
        const keys = Object.keys(b);
        const interpolators = {};
        keys.forEach(key => {
            interpolators[key] = get_interpolator(a[key], b[key]);
        });
        return t => {
            const result = {};
            keys.forEach(key => {
                result[key] = interpolators[key](t);
            });
            return result;
        };
    }
    if (type === 'number') {
        const delta = b - a;
        return t => a + t * delta;
    }
    throw new Error(`Cannot interpolate ${type} values`);
}
function tweened(value, defaults = {}) {
    const store = writable(value);
    let task;
    let target_value = value;
    function set(new_value, opts) {
        if (value == null) {
            store.set(value = new_value);
            return Promise.resolve();
        }
        target_value = new_value;
        let previous_task = task;
        let started = false;
        let { delay = 0, duration = 400, easing = identity, interpolate = get_interpolator } = assign(assign({}, defaults), opts);
        if (duration === 0) {
            if (previous_task) {
                previous_task.abort();
                previous_task = null;
            }
            store.set(value = target_value);
            return Promise.resolve();
        }
        const start = now() + delay;
        let fn;
        task = loop(now => {
            if (now < start)
                return true;
            if (!started) {
                fn = interpolate(value, new_value);
                if (typeof duration === 'function')
                    duration = duration(value, new_value);
                started = true;
            }
            if (previous_task) {
                previous_task.abort();
                previous_task = null;
            }
            const elapsed = now - start;
            if (elapsed > duration) {
                store.set(value = new_value);
                return false;
            }
            // @ts-ignore
            store.set(value = fn(easing(elapsed / duration)));
            return true;
        });
        return task.promise;
    }
    return {
        set,
        update: (fn, opts) => set(fn(target_value, value), opts),
        subscribe: store.subscribe
    };
}

/* src/components/Check.svelte generated by Svelte v3.23.2 */

const file = "src/components/Check.svelte";

// (9:0) {:else}
function create_else_block(ctx) {
	let img0;
	let img0_src_value;
	let t0;
	let img1;
	let img1_src_value;
	let t1;
	let img2;
	let img2_src_value;

	const block = {
		c: function create() {
			img0 = element("img");
			t0 = space();
			img1 = element("img");
			t1 = space();
			img2 = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img0 = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(nodes);
			img1 = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			t1 = claim_space(nodes);
			img2 = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			this.h();
		},
		h: function hydrate() {
			if (img0.src !== (img0_src_value = "./checked.svg")) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", "completed");
			attr_dev(img0, "class", "active lock");
			add_location(img0, file, 9, 4, 305);
			if (img1.src !== (img1_src_value = "./Ellipse-active.png")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", "completed");
			attr_dev(img1, "class", "ellipse active");
			add_location(img1, file, 10, 4, 373);
			if (img2.src !== (img2_src_value = "./Ellipse-active.png")) attr_dev(img2, "src", img2_src_value);
			attr_dev(img2, "alt", "completed");
			attr_dev(img2, "class", "ellipse inactive");
			add_location(img2, file, 11, 4, 451);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, img1, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, img2, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(img1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(img2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(9:0) {:else}",
		ctx
	});

	return block;
}

// (5:0) {#if !active}
function create_if_block(ctx) {
	let img0;
	let img0_src_value;
	let t0;
	let img1;
	let img1_src_value;
	let t1;
	let img2;
	let img2_src_value;

	const block = {
		c: function create() {
			img0 = element("img");
			t0 = space();
			img1 = element("img");
			t1 = space();
			img2 = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img0 = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(nodes);
			img1 = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			t1 = claim_space(nodes);
			img2 = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			this.h();
		},
		h: function hydrate() {
			if (img0.src !== (img0_src_value = "./blank_circle.svg")) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", "completed");
			attr_dev(img0, "class", "active lock");
			add_location(img0, file, 5, 4, 66);
			if (img1.src !== (img1_src_value = "./Ellipse-active.png")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", "completed");
			attr_dev(img1, "class", "ellipse active");
			add_location(img1, file, 6, 4, 139);
			if (img2.src !== (img2_src_value = "./Ellipse-active.png")) attr_dev(img2, "src", img2_src_value);
			attr_dev(img2, "alt", "completed");
			attr_dev(img2, "class", "ellipse inactive");
			add_location(img2, file, 7, 4, 217);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, img1, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, img2, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(img1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(img2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(5:0) {#if !active}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (!/*active*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { active = [] } = $$props;
	const writable_props = ["active"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Check> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Check", $$slots, []);

	$$self.$set = $$props => {
		if ("active" in $$props) $$invalidate(0, active = $$props.active);
	};

	$$self.$capture_state = () => ({ active });

	$$self.$inject_state = $$props => {
		if ("active" in $$props) $$invalidate(0, active = $$props.active);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [active];
}

class Check extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { active: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Check",
			options,
			id: create_fragment.name
		});
	}

	get active() {
		throw new Error("<Check>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set active(value) {
		throw new Error("<Check>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Completion.svelte generated by Svelte v3.23.2 */

const { console: console_1 } = globals;
const file$1 = "src/components/Completion.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (28:8) {#each $quizSteps as challenge}
function create_each_block(ctx) {
	let check;
	let current;

	check = new Check({
			props: { active: /*challenge*/ ctx[9].complete },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(check.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(check.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(check, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const check_changes = {};
			if (dirty & /*$quizSteps*/ 1) check_changes.active = /*challenge*/ ctx[9].complete;
			check.$set(check_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(check.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(check.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(check, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(28:8) {#each $quizSteps as challenge}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let aside;
	let section0;
	let span0;
	let t0;
	let span1;
	let t1;
	let t2;
	let t3;
	let t4;
	let section1;
	let current;
	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let each_value = /*$quizSteps*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			aside = element("aside");
			section0 = element("section");
			span0 = element("span");
			if (default_slot) default_slot.c();
			t0 = space();
			span1 = element("span");
			t1 = text(/*minutes*/ ctx[1]);
			t2 = text(":");
			t3 = text(/*seconds*/ ctx[2]);
			t4 = space();
			section1 = element("section");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			aside = claim_element(nodes, "ASIDE", { class: true });
			var aside_nodes = children(aside);
			section0 = claim_element(aside_nodes, "SECTION", { id: true, class: true });
			var section0_nodes = children(section0);
			span0 = claim_element(section0_nodes, "SPAN", { id: true, class: true });
			var span0_nodes = children(span0);
			if (default_slot) default_slot.l(span0_nodes);
			span0_nodes.forEach(detach_dev);
			t0 = claim_space(section0_nodes);
			span1 = claim_element(section0_nodes, "SPAN", { id: true, class: true });
			var span1_nodes = children(span1);
			t1 = claim_text(span1_nodes, /*minutes*/ ctx[1]);
			t2 = claim_text(span1_nodes, ":");
			t3 = claim_text(span1_nodes, /*seconds*/ ctx[2]);
			span1_nodes.forEach(detach_dev);
			section0_nodes.forEach(detach_dev);
			t4 = claim_space(aside_nodes);
			section1 = claim_element(aside_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(section1_nodes);
			}

			section1_nodes.forEach(detach_dev);
			aside_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "id", "remaining");
			attr_dev(span0, "class", "svelte-qgjdqu");
			add_location(span0, file$1, 19, 8, 481);
			attr_dev(span1, "id", "minutes");
			attr_dev(span1, "class", "svelte-qgjdqu");
			add_location(span1, file$1, 24, 8, 568);
			attr_dev(section0, "id", "timer");
			attr_dev(section0, "class", "svelte-qgjdqu");
			add_location(section0, file$1, 18, 4, 452);
			attr_dev(section1, "class", "done svelte-qgjdqu");
			add_location(section1, file$1, 26, 4, 633);
			attr_dev(aside, "class", "svelte-qgjdqu");
			add_location(aside, file$1, 17, 0, 440);
		},
		m: function mount(target, anchor) {
			insert_dev(target, aside, anchor);
			append_dev(aside, section0);
			append_dev(section0, span0);

			if (default_slot) {
				default_slot.m(span0, null);
			}

			append_dev(section0, t0);
			append_dev(section0, span1);
			append_dev(span1, t1);
			append_dev(span1, t2);
			append_dev(span1, t3);
			append_dev(aside, t4);
			append_dev(aside, section1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(section1, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			if (!current || dirty & /*minutes*/ 2) set_data_dev(t1, /*minutes*/ ctx[1]);
			if (!current || dirty & /*seconds*/ 4) set_data_dev(t3, /*seconds*/ ctx[2]);

			if (dirty & /*$quizSteps*/ 1) {
				each_value = /*$quizSteps*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(section1, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(aside);
			if (default_slot) default_slot.d(detaching);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $quizSteps;
	let $timer;
	validate_store(quizSteps, "quizSteps");
	component_subscribe($$self, quizSteps, $$value => $$invalidate(0, $quizSteps = $$value));
	console.log($quizSteps);
	let start = 30 * 60;
	let timer = tweened(start);
	validate_store(timer, "timer");
	component_subscribe($$self, timer, value => $$invalidate(6, $timer = value));

	setInterval(
		() => {
			if ($timer > 0) set_store_value(timer, $timer--, $timer);
		},
		1000
	);

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Completion> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Completion", $$slots, ['default']);

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		tweened,
		Check,
		quizSteps,
		start,
		timer,
		$quizSteps,
		$timer,
		minutes,
		minname,
		seconds
	});

	$$self.$inject_state = $$props => {
		if ("start" in $$props) start = $$props.start;
		if ("timer" in $$props) $$invalidate(3, timer = $$props.timer);
		if ("minutes" in $$props) $$invalidate(1, minutes = $$props.minutes);
		if ("minname" in $$props) minname = $$props.minname;
		if ("seconds" in $$props) $$invalidate(2, seconds = $$props.seconds);
	};

	let minutes;
	let minname;
	let seconds;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$timer*/ 64) {
			 $$invalidate(1, minutes = Math.floor($timer / 60));
		}

		if ($$self.$$.dirty & /*minutes*/ 2) {
			 minname = minutes > 1 ? "mins" : "min";
		}

		if ($$self.$$.dirty & /*$timer, minutes*/ 66) {
			 $$invalidate(2, seconds = Math.floor($timer - minutes * 60));
		}
	};

	return [$quizSteps, minutes, seconds, timer, $$scope, $$slots];
}

class Completion extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Completion",
			options,
			id: create_fragment$1.name
		});
	}
}

export { Completion as C };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
