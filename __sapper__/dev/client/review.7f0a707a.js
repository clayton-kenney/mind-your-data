import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, H as validate_store, I as component_subscribe, J as createEventDispatcher, o as onMount, v as validate_slots, P as globals, B as space, c as create_component, D as query_selector_all, j as detach_dev, E as claim_space, a as claim_component, n as insert_dev, m as mount_component, t as transition_in, b as transition_out, e as destroy_component, Q as set_store_value, f as element, g as claim_element, h as children, k as attr_dev, l as add_location, w as group_outros, x as check_outros, Y as validate_each_argument, U as empty, C as text, F as claim_text, p as append_dev, _ as destroy_each, W as toggle_class, N as set_data_dev, V as svg_element } from './client.4ffc2c7b.js';
import './index.013878ab.js';
import { T as TransHelp } from './TransHelp.225b3958.js';
import { c as count, s as step, q as quizSteps } from './store.af5e076c.js';
import { C as Complete, B as Back } from './Back.66d82e66.js';
import { B as Btn } from './Btn.59d70025.js';

/* src/routes/review.svelte generated by Svelte v3.23.2 */

const { console: console_1 } = globals;
const file = "src/routes/review.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i].name;
	child_ctx[7] = list[i].complete;
	child_ctx[8] = list[i].displayProgress;
	return child_ctx;
}

// (94:4) {:else}
function create_else_block_1(ctx) {
	let div1;
	let h3;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let h1;
	let t4;
	let t5;
	let h2;
	let t6;
	let t7;
	let p1;
	let t8;
	let t9;
	let div0;
	let btn;
	let current;

	btn = new Btn({
			props: {
				q: 0,
				p: 0,
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			h3 = element("h3");
			t0 = text("Congrats!");
			t1 = space();
			p0 = element("p");
			t2 = text("You didn't abandon us");
			t3 = space();
			h1 = element("h1");
			t4 = text("Level3: Grand Wizard of Privacy");
			t5 = space();
			h2 = element("h2");
			t6 = text("Thanks for caring");
			t7 = space();
			p1 = element("p");
			t8 = text("Prize: download an exclusize Mind Your Data zine, and print it at home.");
			t9 = space();
			div0 = element("div");
			create_component(btn.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Congrats!");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			p0 = claim_element(div1_nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "You didn't abandon us");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			h1 = claim_element(div1_nodes, "H1", {});
			var h1_nodes = children(h1);
			t4 = claim_text(h1_nodes, "Level3: Grand Wizard of Privacy");
			h1_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			h2 = claim_element(div1_nodes, "H2", {});
			var h2_nodes = children(h2);
			t6 = claim_text(h2_nodes, "Thanks for caring");
			h2_nodes.forEach(detach_dev);
			t7 = claim_space(div1_nodes);
			p1 = claim_element(div1_nodes, "P", {});
			var p1_nodes = children(p1);
			t8 = claim_text(p1_nodes, "Prize: download an exclusize Mind Your Data zine, and print it at home.");
			p1_nodes.forEach(detach_dev);
			t9 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(btn.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h3, file, 95, 8, 3823);
			add_location(p0, file, 96, 12, 3854);
			add_location(h1, file, 97, 8, 3891);
			add_location(h2, file, 98, 8, 3940);
			add_location(p1, file, 99, 12, 3979);
			attr_dev(div0, "class", "button-holder");
			add_location(div0, file, 101, 8, 4071);
			attr_dev(div1, "id", "prize1");
			attr_dev(div1, "class", "svelte-gymz7e");
			add_location(div1, file, 94, 4, 3797);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, h3);
			append_dev(h3, t0);
			append_dev(div1, t1);
			append_dev(div1, p0);
			append_dev(p0, t2);
			append_dev(div1, t3);
			append_dev(div1, h1);
			append_dev(h1, t4);
			append_dev(div1, t5);
			append_dev(div1, h2);
			append_dev(h2, t6);
			append_dev(div1, t7);
			append_dev(div1, p1);
			append_dev(p1, t8);
			append_dev(div1, t9);
			append_dev(div1, div0);
			mount_component(btn, div0, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const btn_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				btn_changes.$$scope = { dirty, ctx };
			}

			btn.$set(btn_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(btn.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(btn.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(btn);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(94:4) {:else}",
		ctx
	});

	return block;
}

// (82:26) 
function create_if_block_4(ctx) {
	let div1;
	let h3;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let h1;
	let t4;
	let t5;
	let h2;
	let t6;
	let t7;
	let p1;
	let t8;
	let t9;
	let div0;
	let btn;
	let current;

	btn = new Btn({
			props: {
				q: 0,
				p: 0,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			h3 = element("h3");
			t0 = text("Congrats!2");
			t1 = space();
			p0 = element("p");
			t2 = text("You didn't abandon us");
			t3 = space();
			h1 = element("h1");
			t4 = text("Level2");
			t5 = space();
			h2 = element("h2");
			t6 = text("Not bad at all!");
			t7 = space();
			p1 = element("p");
			t8 = text("Prize: download an exclusize Mind Your Data zine, and print it at home.");
			t9 = space();
			div0 = element("div");
			create_component(btn.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Congrats!2");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			p0 = claim_element(div1_nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "You didn't abandon us");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			h1 = claim_element(div1_nodes, "H1", {});
			var h1_nodes = children(h1);
			t4 = claim_text(h1_nodes, "Level2");
			h1_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			h2 = claim_element(div1_nodes, "H2", {});
			var h2_nodes = children(h2);
			t6 = claim_text(h2_nodes, "Not bad at all!");
			h2_nodes.forEach(detach_dev);
			t7 = claim_space(div1_nodes);
			p1 = claim_element(div1_nodes, "P", {});
			var p1_nodes = children(p1);
			t8 = claim_text(p1_nodes, "Prize: download an exclusize Mind Your Data zine, and print it at home.");
			p1_nodes.forEach(detach_dev);
			t9 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(btn.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h3, file, 83, 8, 3451);
			add_location(p0, file, 84, 12, 3483);
			add_location(h1, file, 85, 8, 3520);
			add_location(h2, file, 86, 8, 3544);
			add_location(p1, file, 87, 12, 3581);
			attr_dev(div0, "class", "button-holder");
			add_location(div0, file, 89, 8, 3673);
			attr_dev(div1, "id", "prize1");
			attr_dev(div1, "class", "svelte-gymz7e");
			add_location(div1, file, 82, 4, 3425);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, h3);
			append_dev(h3, t0);
			append_dev(div1, t1);
			append_dev(div1, p0);
			append_dev(p0, t2);
			append_dev(div1, t3);
			append_dev(div1, h1);
			append_dev(h1, t4);
			append_dev(div1, t5);
			append_dev(div1, h2);
			append_dev(h2, t6);
			append_dev(div1, t7);
			append_dev(div1, p1);
			append_dev(p1, t8);
			append_dev(div1, t9);
			append_dev(div1, div0);
			mount_component(btn, div0, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const btn_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				btn_changes.$$scope = { dirty, ctx };
			}

			btn.$set(btn_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(btn.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(btn.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(btn);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(82:26) ",
		ctx
	});

	return block;
}

// (70:26) 
function create_if_block_3(ctx) {
	let div1;
	let h3;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let h1;
	let t4;
	let t5;
	let h2;
	let t6;
	let t7;
	let p1;
	let t8;
	let t9;
	let div0;
	let btn;
	let current;

	btn = new Btn({
			props: {
				q: 0,
				p: 0,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			h3 = element("h3");
			t0 = text("Congrats!");
			t1 = space();
			p0 = element("p");
			t2 = text("You didn't abandon us");
			t3 = space();
			h1 = element("h1");
			t4 = text("Level1");
			t5 = space();
			h2 = element("h2");
			t6 = text("Maybe try harder next time...");
			t7 = space();
			p1 = element("p");
			t8 = text("Prize: download an exclusize Mind Your Data zine, and print it at home.");
			t9 = space();
			div0 = element("div");
			create_component(btn.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Congrats!");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			p0 = claim_element(div1_nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "You didn't abandon us");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			h1 = claim_element(div1_nodes, "H1", {});
			var h1_nodes = children(h1);
			t4 = claim_text(h1_nodes, "Level1");
			h1_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			h2 = claim_element(div1_nodes, "H2", {});
			var h2_nodes = children(h2);
			t6 = claim_text(h2_nodes, "Maybe try harder next time...");
			h2_nodes.forEach(detach_dev);
			t7 = claim_space(div1_nodes);
			p1 = claim_element(div1_nodes, "P", {});
			var p1_nodes = children(p1);
			t8 = claim_text(p1_nodes, "Prize: download an exclusize Mind Your Data zine, and print it at home.");
			p1_nodes.forEach(detach_dev);
			t9 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(btn.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h3, file, 71, 8, 3051);
			add_location(p0, file, 72, 12, 3082);
			add_location(h1, file, 73, 8, 3119);
			add_location(h2, file, 74, 8, 3143);
			add_location(p1, file, 75, 12, 3194);
			attr_dev(div0, "class", "button-holder");
			add_location(div0, file, 77, 8, 3286);
			attr_dev(div1, "id", "prize1");
			attr_dev(div1, "class", "svelte-gymz7e");
			add_location(div1, file, 70, 4, 3025);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, h3);
			append_dev(h3, t0);
			append_dev(div1, t1);
			append_dev(div1, p0);
			append_dev(p0, t2);
			append_dev(div1, t3);
			append_dev(div1, h1);
			append_dev(h1, t4);
			append_dev(div1, t5);
			append_dev(div1, h2);
			append_dev(h2, t6);
			append_dev(div1, t7);
			append_dev(div1, p1);
			append_dev(p1, t8);
			append_dev(div1, t9);
			append_dev(div1, div0);
			mount_component(btn, div0, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const btn_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				btn_changes.$$scope = { dirty, ctx };
			}

			btn.$set(btn_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(btn.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(btn.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(btn);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(70:26) ",
		ctx
	});

	return block;
}

// (44:4) {#if $step === 0}
function create_if_block(ctx) {
	let h2;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let div;
	let btn;
	let t5;
	let a;
	let button;
	let t6;
	let current;
	let each_value = /*$quizSteps*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	btn = new Btn({
			props: {
				p: 0,
				q: 1,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text("You have completed ");
			t1 = text(/*comp*/ ctx[2]);
			t2 = text(" / 8 challenges!");
			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			div = element("div");
			create_component(btn.$$.fragment);
			t5 = space();
			a = element("a");
			button = element("button");
			t6 = text("Back to quiz");
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "You have completed ");
			t1 = claim_text(h2_nodes, /*comp*/ ctx[2]);
			t2 = claim_text(h2_nodes, " / 8 challenges!");
			h2_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			t4 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(btn.$$.fragment, div_nodes);
			t5 = claim_space(div_nodes);
			a = claim_element(div_nodes, "A", { prefetch: true, href: true });
			var a_nodes = children(a);
			button = claim_element(a_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t6 = claim_text(button_nodes, "Back to quiz");
			button_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 44, 4, 1359);
			attr_dev(button, "class", "svelte-gymz7e");
			add_location(button, file, 67, 36, 2949);
			attr_dev(a, "prefetch", "");
			attr_dev(a, "href", "quizmain");
			add_location(a, file, 67, 8, 2921);
			attr_dev(div, "class", "button-holder");
			add_location(div, file, 65, 4, 2840);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			append_dev(h2, t1);
			append_dev(h2, t2);
			insert_dev(target, t3, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t4, anchor);
			insert_dev(target, div, anchor);
			mount_component(btn, div, null);
			append_dev(div, t5);
			append_dev(div, a);
			append_dev(a, button);
			append_dev(button, t6);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$quizSteps*/ 1) {
				each_value = /*$quizSteps*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(t4.parentNode, t4);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const btn_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				btn_changes.$$scope = { dirty, ctx };
			}

			btn.$set(btn_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(btn.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(btn.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t3);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div);
			destroy_component(btn);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(44:4) {#if $step === 0}",
		ctx
	});

	return block;
}

// (103:12) <Btn q={0} p={0}>
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Download the zine");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Download the zine");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(103:12) <Btn q={0} p={0}>",
		ctx
	});

	return block;
}

// (91:12) <Btn q={0} p={0}>
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Download the zine");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Download the zine");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(91:12) <Btn q={0} p={0}>",
		ctx
	});

	return block;
}

// (79:12) <Btn q={0} p={0}>
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Download the zine");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Download the zine");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(79:12) <Btn q={0} p={0}>",
		ctx
	});

	return block;
}

// (48:4) {#if displayProgress}
function create_if_block_1(ctx) {
	let div;
	let p;
	let t0_value = /*name*/ ctx[6] + "";
	let t0;
	let t1;

	function select_block_type_1(ctx, dirty) {
		if (!/*complete*/ ctx[7]) return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			p = element("p");
			t0 = text(t0_value);
			t1 = space();
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, t0_value);
			p_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "status svelte-gymz7e");
			toggle_class(p, "complete", /*complete*/ ctx[7]);
			add_location(p, file, 49, 8, 1548);
			attr_dev(div, "class", "caret svelte-gymz7e");
			toggle_class(div, "complete", /*complete*/ ctx[7]);
			add_location(div, file, 48, 4, 1505);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p);
			append_dev(p, t0);
			append_dev(div, t1);
			if_block.m(div, null);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$quizSteps*/ 1 && t0_value !== (t0_value = /*name*/ ctx[6] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*$quizSteps*/ 1) {
				toggle_class(p, "complete", /*complete*/ ctx[7]);
			}

			if (current_block_type !== (current_block_type = select_block_type_1(ctx))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}

			if (dirty & /*$quizSteps*/ 1) {
				toggle_class(div, "complete", /*complete*/ ctx[7]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(48:4) {#if displayProgress}",
		ctx
	});

	return block;
}

// (57:8) {:else}
function create_else_block(ctx) {
	let svg;
	let path0;
	let path1;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					width: true,
					height: true,
					viewBox: true,
					fill: true,
					xmlns: true
				},
				1
			);

			var svg_nodes = children(svg);

			path0 = claim_element(
				svg_nodes,
				"path",
				{
					d: true,
					fill: true,
					stroke: true,
					"stroke-width": true
				},
				1
			);

			children(path0).forEach(detach_dev);
			path1 = claim_element(svg_nodes, "path", { d: true, fill: true }, 1);
			children(path1).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path0, "d", "M10.2754 19.037C15.1206 19.037 19.0509 15.1126 19.0509 10.2685C19.0509 5.42444 15.1206 1.5 10.2754 1.5C5.43025 1.5 1.5 5.42444 1.5 10.2685C1.5 15.1126 5.43025 19.037 10.2754 19.037Z");
			attr_dev(path0, "fill", "#E94040");
			attr_dev(path0, "stroke", "#E94040");
			attr_dev(path0, "stroke-width", "3");
			add_location(path0, file, 58, 12, 2136);
			attr_dev(path1, "d", "M8.28453 15.8272L3.87075 11.4176C3.60558 11.1527 3.60558 10.7232 3.87075 10.4583L4.83104 9.49886C5.09621 9.23391 5.52618 9.23391 5.79135 9.49886L8.76468 12.4693L15.1332 6.10689C15.3984 5.84197 15.8284 5.84197 16.0935 6.10689L17.0538 7.06629C17.319 7.3312 17.319 7.76074 17.0538 8.02568L9.24484 15.8272C8.97964 16.0921 8.5497 16.0921 8.28453 15.8272Z");
			attr_dev(path1, "fill", "#303538");
			add_location(path1, file, 59, 12, 2391);
			attr_dev(svg, "width", "21");
			attr_dev(svg, "height", "21");
			attr_dev(svg, "viewBox", "0 0 21 21");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			add_location(svg, file, 57, 8, 2028);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(57:8) {:else}",
		ctx
	});

	return block;
}

// (51:8) {#if !complete}
function create_if_block_2(ctx) {
	let svg;
	let circle;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			circle = svg_element("circle");
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					width: true,
					height: true,
					viewBox: true,
					fill: true,
					xmlns: true
				},
				1
			);

			var svg_nodes = children(svg);

			circle = claim_element(
				svg_nodes,
				"circle",
				{
					cx: true,
					cy: true,
					r: true,
					stroke: true,
					"stroke-width": true
				},
				1
			);

			children(circle).forEach(detach_dev);
			path = claim_element(svg_nodes, "path", { d: true, fill: true }, 1);
			children(path).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(circle, "cx", "14");
			attr_dev(circle, "cy", "14");
			attr_dev(circle, "r", "13");
			attr_dev(circle, "stroke", "#E94040");
			attr_dev(circle, "stroke-width", "2");
			add_location(circle, file, 52, 12, 1732);
			attr_dev(path, "d", "M13.9991 6.91016L12.7493 8.15993L17.6952 13.1147H6.9082V14.8874H17.6952L12.7493 19.8422L13.9991 21.092L21.09 14.0011L13.9991 6.91016Z");
			attr_dev(path, "fill", "#E94040");
			add_location(path, file, 53, 12, 1811);
			attr_dev(svg, "width", "28");
			attr_dev(svg, "height", "28");
			attr_dev(svg, "viewBox", "0 0 28 28");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			add_location(svg, file, 51, 8, 1624);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, circle);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(51:8) {#if !complete}",
		ctx
	});

	return block;
}

// (47:4) {#each $quizSteps as {name, complete, displayProgress}}
function create_each_block(ctx) {
	let if_block_anchor;
	let if_block = /*displayProgress*/ ctx[8] && create_if_block_1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*displayProgress*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(47:4) {#each $quizSteps as {name, complete, displayProgress}}",
		ctx
	});

	return block;
}

// (67:7) <Btn p={0} q={1}>
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Claim my Prize");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Claim my Prize");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(67:7) <Btn p={0} q={1}>",
		ctx
	});

	return block;
}

// (42:0) <Trans>
function create_default_slot(ctx) {
	let section;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block, create_if_block_3, create_if_block_4, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$step*/ ctx[1] === 0) return 0;
		if (/*$step*/ ctx[1] === 1) return 1;
		if (/*$step*/ ctx[1] === 2) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			section = element("section");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "class", "review svelte-gymz7e");
			add_location(section, file, 42, 0, 1308);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			if_blocks[current_block_type_index].m(section, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(section, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(42:0) <Trans>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let trans;
	let current;

	trans = new TransHelp({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t = space();
			create_component(trans.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-3r29dh\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			claim_component(trans.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Internet of things( Alexa, Home devices)";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(trans, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const trans_changes = {};

			if (dirty & /*$$scope, $quizSteps, $step*/ 2051) {
				trans_changes.$$scope = { dirty, ctx };
			}

			trans.$set(trans_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(trans.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(trans.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_component(trans, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $quizSteps;
	let $count;
	let $step;
	validate_store(quizSteps, "quizSteps");
	component_subscribe($$self, quizSteps, $$value => $$invalidate(0, $quizSteps = $$value));
	validate_store(count, "count");
	component_subscribe($$self, count, $$value => $$invalidate(3, $count = $$value));
	validate_store(step, "step");
	component_subscribe($$self, step, $$value => $$invalidate(1, $step = $$value));
	const dispatch = createEventDispatcher();
	let comp = 0;

	//sets aside icon to in progress via store
	onMount(async () => {
		let count;
		set_store_value(quizSteps, $quizSteps[$count].status = 1, $quizSteps);

		$quizSteps.forEach(v => {
			if (v.complete && !v.displayProgress) {
				count++;
			}
		});

		//$quizSteps.forEach((v) => {console.log(v.complete, v.displayProgress)})
		console.log(count);

		step.set(0);
	});

	console.log(comp);

	/*let percentComplete = (completed/8) * 100;

let s; //how big of a step to take to show correct prize passed in to Btn as q={s}
if (percentComplete < 33) {
    s = 1;
} else if (percentComplete < 70) {
    s=2;
} else {
    s=3;
}
*/
	let current = "initial";

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Review> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Review", $$slots, []);

	$$self.$capture_state = () => ({
		onMount,
		createEventDispatcher,
		dispatch,
		Trans: TransHelp,
		Complete,
		Btn,
		count,
		step,
		quizSteps,
		Back,
		comp,
		current,
		$quizSteps,
		$count,
		$step
	});

	$$self.$inject_state = $$props => {
		if ("comp" in $$props) $$invalidate(2, comp = $$props.comp);
		if ("current" in $$props) current = $$props.current;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [$quizSteps, $step, comp];
}

class Review extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Review",
			options,
			id: create_fragment.name
		});
	}
}

export default Review;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2aWV3LjdmMGE3MDdhLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL3Jldmlldy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0aW1wb3J0IHsgb25Nb3VudCwgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblx0aW1wb3J0IFRyYW5zIGZyb20gJy4uL2NvbXBvbmVudHMvVHJhbnNIZWxwLnN2ZWx0ZSc7XG5cdGltcG9ydCBDb21wbGV0ZSBmcm9tICcuLi9jb21wb25lbnRzL2NvbXBsZXRlLnN2ZWx0ZScgLy9zZXQgc3VjY2Vzcz17ZmFsc2V9IGZvciBmYWlsdXJlXG5cdGltcG9ydCBCdG4gZnJvbSAnLi4vY29tcG9uZW50cy9CdG4uc3ZlbHRlJyAvL3NldCA8TmV4dCBxPXsyfT4gdG8gc2tpcCBtdWx0aXBsZSBzdGVwcyBwPTcuNCBmb3IgcHJvZ3Jlc3Ncblx0aW1wb3J0IHsgY291bnQsIHN0ZXAsIHF1aXpTdGVwcyB9IGZyb20gJy4uL3N0b3JlLmpzJ1xuXHRpbXBvcnQgQmFjayBmcm9tICcuLi9jb21wb25lbnRzL0JhY2suc3ZlbHRlJ1xuXG4gICAgbGV0IGNvbXAgPSAwO1xuXHQvL3NldHMgYXNpZGUgaWNvbiB0byBpbiBwcm9ncmVzcyB2aWEgc3RvcmVcbiAgICBvbk1vdW50KGFzeW5jKCkgPT4ge1xuICAgICAgICBsZXQgY291bnQ7XG4gICAgICAgICRxdWl6U3RlcHNbJGNvdW50XS5zdGF0dXMgPSAxO1xuICAgICAgICAkcXVpelN0ZXBzLmZvckVhY2goKHYpID0+IHtcbiAgICAgICAgICAgIGlmKHYuY29tcGxldGUgJiYgIXYuZGlzcGxheVByb2dyZXNzKXtcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgfX0pXG4gICAgICAgIC8vJHF1aXpTdGVwcy5mb3JFYWNoKCh2KSA9PiB7Y29uc29sZS5sb2codi5jb21wbGV0ZSwgdi5kaXNwbGF5UHJvZ3Jlc3MpfSlcbiAgICAgICAgY29uc29sZS5sb2coY291bnQpO1xuICAgICAgICBzdGVwLnNldCgwKTtcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhjb21wKVxuICAgIC8qbGV0IHBlcmNlbnRDb21wbGV0ZSA9IChjb21wbGV0ZWQvOCkgKiAxMDA7XG4gICAgXG4gICAgbGV0IHM7IC8vaG93IGJpZyBvZiBhIHN0ZXAgdG8gdGFrZSB0byBzaG93IGNvcnJlY3QgcHJpemUgcGFzc2VkIGluIHRvIEJ0biBhcyBxPXtzfVxuICAgIGlmIChwZXJjZW50Q29tcGxldGUgPCAzMykge1xuICAgICAgICBzID0gMTtcbiAgICB9IGVsc2UgaWYgKHBlcmNlbnRDb21wbGV0ZSA8IDcwKSB7XG4gICAgICAgIHM9MjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzPTM7XG4gICAgfVxuICAgICovXG4gICAgbGV0IGN1cnJlbnQgPSAnaW5pdGlhbCc7XG4gICAgXG5cbjwvc2NyaXB0PlxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+SW50ZXJuZXQgb2YgdGhpbmdzKCBBbGV4YSwgSG9tZSBkZXZpY2VzKTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPFRyYW5zPlxuPHNlY3Rpb24gY2xhc3M9J3Jldmlldyc+XG4gICAgeyNpZiAkc3RlcCA9PT0gMH1cbiAgICA8aDI+WW91IGhhdmUgY29tcGxldGVkIHtjb21wfSAvIDggY2hhbGxlbmdlcyE8L2gyPlxuICAgIFxuICAgIHsjZWFjaCAkcXVpelN0ZXBzIGFzIHtuYW1lLCBjb21wbGV0ZSwgZGlzcGxheVByb2dyZXNzfX1cbiAgICB7I2lmIGRpc3BsYXlQcm9ncmVzc31cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZXRcIiBjbGFzczpjb21wbGV0ZT5cbiAgICAgICAgPHAgY2xhc3M6Y29tcGxldGUgY2xhc3M9XCJzdGF0dXNcIj57bmFtZX08L3A+XG4gICAgICAgIHsjaWYgIWNvbXBsZXRlfVxuICAgICAgICA8c3ZnIHdpZHRoPVwiMjhcIiBoZWlnaHQ9XCIyOFwiIHZpZXdCb3g9XCIwIDAgMjggMjhcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgICAgIDxjaXJjbGUgY3g9XCIxNFwiIGN5PVwiMTRcIiByPVwiMTNcIiBzdHJva2U9XCIjRTk0MDQwXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz5cbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTMuOTk5MSA2LjkxMDE2TDEyLjc0OTMgOC4xNTk5M0wxNy42OTUyIDEzLjExNDdINi45MDgyVjE0Ljg4NzRIMTcuNjk1MkwxMi43NDkzIDE5Ljg0MjJMMTMuOTk5MSAyMS4wOTJMMjEuMDkgMTQuMDAxMUwxMy45OTkxIDYuOTEwMTZaXCIgZmlsbD1cIiNFOTQwNDBcIi8+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIFxuICAgICAgICB7OmVsc2V9XG4gICAgICAgIDxzdmcgd2lkdGg9XCIyMVwiIGhlaWdodD1cIjIxXCIgdmlld0JveD1cIjAgMCAyMSAyMVwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgPHBhdGggZD1cIk0xMC4yNzU0IDE5LjAzN0MxNS4xMjA2IDE5LjAzNyAxOS4wNTA5IDE1LjExMjYgMTkuMDUwOSAxMC4yNjg1QzE5LjA1MDkgNS40MjQ0NCAxNS4xMjA2IDEuNSAxMC4yNzU0IDEuNUM1LjQzMDI1IDEuNSAxLjUgNS40MjQ0NCAxLjUgMTAuMjY4NUMxLjUgMTUuMTEyNiA1LjQzMDI1IDE5LjAzNyAxMC4yNzU0IDE5LjAzN1pcIiBmaWxsPVwiI0U5NDA0MFwiIHN0cm9rZT1cIiNFOTQwNDBcIiBzdHJva2Utd2lkdGg9XCIzXCIvPlxuICAgICAgICAgICAgPHBhdGggZD1cIk04LjI4NDUzIDE1LjgyNzJMMy44NzA3NSAxMS40MTc2QzMuNjA1NTggMTEuMTUyNyAzLjYwNTU4IDEwLjcyMzIgMy44NzA3NSAxMC40NTgzTDQuODMxMDQgOS40OTg4NkM1LjA5NjIxIDkuMjMzOTEgNS41MjYxOCA5LjIzMzkxIDUuNzkxMzUgOS40OTg4Nkw4Ljc2NDY4IDEyLjQ2OTNMMTUuMTMzMiA2LjEwNjg5QzE1LjM5ODQgNS44NDE5NyAxNS44Mjg0IDUuODQxOTcgMTYuMDkzNSA2LjEwNjg5TDE3LjA1MzggNy4wNjYyOUMxNy4zMTkgNy4zMzEyIDE3LjMxOSA3Ljc2MDc0IDE3LjA1MzggOC4wMjU2OEw5LjI0NDg0IDE1LjgyNzJDOC45Nzk2NCAxNi4wOTIxIDguNTQ5NyAxNi4wOTIxIDguMjg0NTMgMTUuODI3MlpcIiBmaWxsPVwiIzMwMzUzOFwiLz5cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICB7L2lmfVxuICAgIDwvZGl2PiAgXG4gICAgey9pZn1cbiAgICB7L2VhY2h9XG4gICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1ob2xkZXJcIj5cbiAgICAgICA8QnRuIHA9ezB9IHE9ezF9PkNsYWltIG15IFByaXplPC9CdG4+XG4gICAgICAgIDxhIHByZWZldGNoIGhyZWY9J3F1aXptYWluJz48YnV0dG9uPkJhY2sgdG8gcXVpejwvYnV0dG9uPjwvYT5cbiAgICA8L2Rpdj5cbiAgICB7OmVsc2UgaWYgJHN0ZXAgPT09IDF9XG4gICAgPGRpdiBpZD1cInByaXplMVwiPlxuICAgICAgICA8aDM+Q29uZ3JhdHMhPC9oMz5cbiAgICAgICAgICAgIDxwPllvdSBkaWRuJ3QgYWJhbmRvbiB1czwvcD5cbiAgICAgICAgPGgxPkxldmVsMTwvaDE+XG4gICAgICAgIDxoMj5NYXliZSB0cnkgaGFyZGVyIG5leHQgdGltZS4uLjwvaDI+XG4gICAgICAgICAgICA8cD5Qcml6ZTogZG93bmxvYWQgYW4gZXhjbHVzaXplIE1pbmQgWW91ciBEYXRhIHppbmUsIGFuZCBwcmludCBpdCBhdCBob21lLjwvcD5cbiAgICBcbiAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1ob2xkZXJcIj4gXG4gICAgICAgICAgICA8QnRuIHE9ezB9IHA9ezB9PkRvd25sb2FkIHRoZSB6aW5lPC9CdG4+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIHs6ZWxzZSBpZiAkc3RlcCA9PT0gMn1cbiAgICA8ZGl2IGlkPVwicHJpemUxXCI+XG4gICAgICAgIDxoMz5Db25ncmF0cyEyPC9oMz5cbiAgICAgICAgICAgIDxwPllvdSBkaWRuJ3QgYWJhbmRvbiB1czwvcD5cbiAgICAgICAgPGgxPkxldmVsMjwvaDE+XG4gICAgICAgIDxoMj5Ob3QgYmFkIGF0IGFsbCE8L2gyPlxuICAgICAgICAgICAgPHA+UHJpemU6IGRvd25sb2FkIGFuIGV4Y2x1c2l6ZSBNaW5kIFlvdXIgRGF0YSB6aW5lLCBhbmQgcHJpbnQgaXQgYXQgaG9tZS48L3A+XG4gICAgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24taG9sZGVyXCI+IFxuICAgICAgICAgICAgPEJ0biBxPXswfSBwPXswfT5Eb3dubG9hZCB0aGUgemluZTwvQnRuPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICB7OmVsc2V9XG4gICAgPGRpdiBpZD1cInByaXplMVwiPlxuICAgICAgICA8aDM+Q29uZ3JhdHMhPC9oMz5cbiAgICAgICAgICAgIDxwPllvdSBkaWRuJ3QgYWJhbmRvbiB1czwvcD5cbiAgICAgICAgPGgxPkxldmVsMzogR3JhbmQgV2l6YXJkIG9mIFByaXZhY3k8L2gxPlxuICAgICAgICA8aDI+VGhhbmtzIGZvciBjYXJpbmc8L2gyPlxuICAgICAgICAgICAgPHA+UHJpemU6IGRvd25sb2FkIGFuIGV4Y2x1c2l6ZSBNaW5kIFlvdXIgRGF0YSB6aW5lLCBhbmQgcHJpbnQgaXQgYXQgaG9tZS48L3A+XG4gICAgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24taG9sZGVyXCI+IFxuICAgICAgICAgICAgPEJ0biBxPXswfSBwPXswfT5Eb3dubG9hZCB0aGUgemluZTwvQnRuPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICB7L2lmfVxuXG48L3NlY3Rpb24+XG5cbjwvVHJhbnM+XG48c3R5bGU+XG4gICAgLnJldmlld3tcbiAgICAgICAgd2lkdGg6NTB2dztcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzM4NDI0ZDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1mbG93OiBjb2x1bW47XG4gICAgICAgIG1hcmdpbjogYXV0bztcbiAgICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICAgIHBhZGRpbmc6IDY1cHggMTAwcHggNjVweCA2NXB4O1xuICAgICAgICBoZWlnaHQ6IDEwMHZoO1xuICAgIH1cbiAgIC5jb21wbGV0ZXtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvciA6IzM4NDI0RDtcbiAgICAgICAgY29sb3I6ICNmZmZmZmY7XG5cbiAgIH1cbiAgIC5zdGF0dXMge1xuICAgICAgIFxuICAgICAgIGNvbG9yOiNlOTQwNDA7XG4gICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgICBtYXJnaW46IDVweDtcbiAgIH1cbiAgIGJ1dHRvbiB7XG5cdCAgIHBhZGRpbmc6IDEwcHggMjBweDtcblx0ICAgbWFyZ2luOiAxMHB4O1xuXHQgICBib3JkZXI6IGJsYWNrIHNvbGlkIDBweDtcblx0ICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgfVxuICAgLmNhcmV0e1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0ZmxleC1mbG93OiByb3cgbm93cmFwO1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICB9XG4gICAgZGl2LmNhcmV0IHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIG1hcmdpbjogMTBweDtcbiAgICAgICAgcGFkZGluZzogMTBweCAyMHB4O1xuICAgIH1cbiAgICAjcHJpemUxIHtcbiAgICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG48L3N0eWxlPiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXNHb0IsQ0FBQztPQUFLLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQVpQLENBQUM7T0FBSyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FaUCxDQUFDO09BQUssQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQWhDaEIsR0FBVTs7OztnQ0FBZixNQUFJOzs7Ozs7T0FvQkssQ0FBQztPQUFLLENBQUM7Ozs7Ozs7Ozs7O3NCQXRCTSxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0NBQUosR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0NBRXJCLEdBQVU7Ozs7K0JBQWYsTUFBSTs7Ozs7Ozs7Ozs7Ozs7OztvQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUJBR2dDLEdBQUk7Ozs7O29CQUNoQyxHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxRUFEb0IsR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29DQUZyQyxHQUFlOzs7Ozs7Ozs7Ozs7Ozs7OzJCQUFmLEdBQWU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0JBSmYsR0FBSyxRQUFLLENBQUM7Z0JBMEJOLEdBQUssUUFBSyxDQUFDO2dCQVlYLEdBQUssUUFBSyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0EvRWxCLFFBQVEsR0FBRyxxQkFBcUI7S0FPL0IsSUFBSSxHQUFHLENBQUM7OztDQUVaLE9BQU87TUFDQyxLQUFLOzZCQUNULFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUM7O0VBQzdCLFVBQVUsQ0FBQyxPQUFPLENBQUUsQ0FBQztPQUNkLENBQUMsQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDLGVBQWU7SUFDL0IsS0FBSzs7Ozs7RUFHYixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUs7O0VBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzs7O0NBRWQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJOzs7Ozs7Ozs7Ozs7O0tBWVosT0FBTyxHQUFHLFNBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
