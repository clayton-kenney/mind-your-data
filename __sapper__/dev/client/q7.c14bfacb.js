import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, H as validate_store, I as component_subscribe, J as createEventDispatcher, o as onMount, v as validate_slots, B as space, c as create_component, D as query_selector_all, j as detach_dev, E as claim_space, a as claim_component, n as insert_dev, m as mount_component, t as transition_in, b as transition_out, e as destroy_component, P as set_store_value, w as group_outros, x as check_outros, f as element, C as text, g as claim_element, h as children, F as claim_text, l as add_location, p as append_dev, W as toggle_class, k as attr_dev, R as listen_dev, X as run_all } from './client.5f6683c9.js';
import './index.0d2f9c2a.js';
import { T as TransHelp } from './TransHelp.9948ac03.js';
import { c as count, s as step, q as quizSteps } from './store.cfa515d8.js';
import { C as Complete, B as Back } from './Back.9deeecfe.js';
import { B as Btn } from './Btn.39881d70.js';

/* src/routes/quiz/q7.svelte generated by Svelte v3.23.2 */
const file = "src/routes/quiz/q7.svelte";

// (81:0) {:else}
function create_else_block(ctx) {
	let section;
	let h2;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let complete;
	let current;

	complete = new Complete({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			section = element("section");
			h2 = element("h2");
			t0 = text("Hoooray!");
			t1 = space();
			p = element("p");
			t2 = text("One less way people can snoop on your privacy.");
			t3 = space();
			create_component(complete.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Hoooray!");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			p = claim_element(section_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "One less way people can snoop on your privacy.");
			p_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			claim_component(complete.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 82, 2, 3431);
			add_location(p, file, 83, 2, 3451);
			add_location(section, file, 81, 1, 3419);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t0);
			append_dev(section, t1);
			append_dev(section, p);
			append_dev(p, t2);
			append_dev(section, t3);
			mount_component(complete, section, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const complete_changes = {};

			if (dirty & /*$$scope*/ 256) {
				complete_changes.$$scope = { dirty, ctx };
			}

			complete.$set(complete_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(complete.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(complete.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(complete);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(81:0) {:else}",
		ctx
	});

	return block;
}

// (31:19) 
function create_if_block_1(ctx) {
	let section;
	let div0;
	let p0;
	let t0;
	let t1;
	let t2;
	let hr0;
	let t3;
	let div1;
	let p1;
	let t4;
	let t5;
	let t6;
	let hr1;
	let t7;
	let div2;
	let p2;
	let t8;
	let t9;
	let t10;
	let hr2;
	let t11;
	let div3;
	let h3;
	let t12;
	let t13;
	let complete0;
	let t14;
	let complete1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*current*/ ctx[0] === "amazon" && create_if_block_4(ctx);
	let if_block1 = /*current*/ ctx[0] === "google" && create_if_block_3(ctx);
	let if_block2 = /*current*/ ctx[0] === "apple" && create_if_block_2(ctx);

	complete0 = new Complete({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	complete1 = new Complete({
			props: {
				success: false,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			section = element("section");
			div0 = element("div");
			p0 = element("p");
			t0 = text("Amazon Alexa");
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			hr0 = element("hr");
			t3 = space();
			div1 = element("div");
			p1 = element("p");
			t4 = text("Google Assistant");
			t5 = space();
			if (if_block1) if_block1.c();
			t6 = space();
			hr1 = element("hr");
			t7 = space();
			div2 = element("div");
			p2 = element("p");
			t8 = text("Apple Siri");
			t9 = space();
			if (if_block2) if_block2.c();
			t10 = space();
			hr2 = element("hr");
			t11 = space();
			div3 = element("div");
			h3 = element("h3");
			t12 = text("Did you setup privacy mode");
			t13 = space();
			create_component(complete0.$$.fragment);
			t14 = space();
			create_component(complete1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			div0 = claim_element(section_nodes, "DIV", {});
			var div0_nodes = children(div0);
			p0 = claim_element(div0_nodes, "P", {});
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "Amazon Alexa");
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			if (if_block0) if_block0.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			hr0 = claim_element(section_nodes, "HR", {});
			t3 = claim_space(section_nodes);
			div1 = claim_element(section_nodes, "DIV", {});
			var div1_nodes = children(div1);
			p1 = claim_element(div1_nodes, "P", {});
			var p1_nodes = children(p1);
			t4 = claim_text(p1_nodes, "Google Assistant");
			p1_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			if (if_block1) if_block1.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t6 = claim_space(section_nodes);
			hr1 = claim_element(section_nodes, "HR", {});
			t7 = claim_space(section_nodes);
			div2 = claim_element(section_nodes, "DIV", {});
			var div2_nodes = children(div2);
			p2 = claim_element(div2_nodes, "P", {});
			var p2_nodes = children(p2);
			t8 = claim_text(p2_nodes, "Apple Siri");
			p2_nodes.forEach(detach_dev);
			t9 = claim_space(div2_nodes);
			if (if_block2) if_block2.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			t10 = claim_space(section_nodes);
			hr2 = claim_element(section_nodes, "HR", {});
			t11 = claim_space(section_nodes);
			div3 = claim_element(section_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			h3 = claim_element(div3_nodes, "H3", {});
			var h3_nodes = children(h3);
			t12 = claim_text(h3_nodes, "Did you setup privacy mode");
			h3_nodes.forEach(detach_dev);
			t13 = claim_space(div3_nodes);
			claim_component(complete0.$$.fragment, div3_nodes);
			t14 = claim_space(div3_nodes);
			claim_component(complete1.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p0, file, 34, 2, 1543);
			toggle_class(div0, "active", /*current*/ ctx[0] === "amazon");
			add_location(div0, file, 32, 1, 1458);
			add_location(hr0, file, 45, 1, 2044);
			add_location(p1, file, 48, 2, 2135);
			toggle_class(div1, "active", /*current*/ ctx[0] === "google");
			add_location(div1, file, 46, 1, 2050);
			add_location(hr1, file, 59, 1, 2640);
			add_location(p2, file, 62, 2, 2729);
			toggle_class(div2, "active", /*current*/ ctx[0] === "apple");
			add_location(div2, file, 60, 1, 2646);
			add_location(hr2, file, 73, 1, 3227);
			add_location(h3, file, 75, 2, 3263);
			attr_dev(div3, "class", "button-holder svelte-338bov");
			add_location(div3, file, 74, 1, 3233);
			add_location(section, file, 31, 0, 1447);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div0);
			append_dev(div0, p0);
			append_dev(p0, t0);
			append_dev(div0, t1);
			if (if_block0) if_block0.m(div0, null);
			append_dev(section, t2);
			append_dev(section, hr0);
			append_dev(section, t3);
			append_dev(section, div1);
			append_dev(div1, p1);
			append_dev(p1, t4);
			append_dev(div1, t5);
			if (if_block1) if_block1.m(div1, null);
			append_dev(section, t6);
			append_dev(section, hr1);
			append_dev(section, t7);
			append_dev(section, div2);
			append_dev(div2, p2);
			append_dev(p2, t8);
			append_dev(div2, t9);
			if (if_block2) if_block2.m(div2, null);
			append_dev(section, t10);
			append_dev(section, hr2);
			append_dev(section, t11);
			append_dev(section, div3);
			append_dev(div3, h3);
			append_dev(h3, t12);
			append_dev(div3, t13);
			mount_component(complete0, div3, null);
			append_dev(div3, t14);
			mount_component(complete1, div3, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(div0, "click", /*click_handler*/ ctx[2], false, false, false),
					listen_dev(div1, "click", /*click_handler_1*/ ctx[3], false, false, false),
					listen_dev(div2, "click", /*click_handler_2*/ ctx[4], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*current*/ ctx[0] === "amazon") {
				if (if_block0) ; else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*current*/ 1) {
				toggle_class(div0, "active", /*current*/ ctx[0] === "amazon");
			}

			if (/*current*/ ctx[0] === "google") {
				if (if_block1) ; else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*current*/ 1) {
				toggle_class(div1, "active", /*current*/ ctx[0] === "google");
			}

			if (/*current*/ ctx[0] === "apple") {
				if (if_block2) ; else {
					if_block2 = create_if_block_2(ctx);
					if_block2.c();
					if_block2.m(div2, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*current*/ 1) {
				toggle_class(div2, "active", /*current*/ ctx[0] === "apple");
			}

			const complete0_changes = {};

			if (dirty & /*$$scope*/ 256) {
				complete0_changes.$$scope = { dirty, ctx };
			}

			complete0.$set(complete0_changes);
			const complete1_changes = {};

			if (dirty & /*$$scope*/ 256) {
				complete1_changes.$$scope = { dirty, ctx };
			}

			complete1.$set(complete1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(complete0.$$.fragment, local);
			transition_in(complete1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(complete0.$$.fragment, local);
			transition_out(complete1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			destroy_component(complete0);
			destroy_component(complete1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(31:19) ",
		ctx
	});

	return block;
}

// (20:0) {#if $step==0}
function create_if_block(ctx) {
	let section;
	let h2;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let p1;
	let t4;
	let t5;
	let div;
	let btn0;
	let t6;
	let btn1;
	let current;

	btn0 = new Btn({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	btn1 = new Btn({
			props: {
				q: 2,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			section = element("section");
			h2 = element("h2");
			t0 = text("Internet of things( Alexa, Home devices)");
			t1 = space();
			p0 = element("p");
			t2 = text("It should be clear by now that your daily interactions technology, let alone your smart speaker are anything but private. A series of investigative reports have shown that other people are reviewing recordings or transcripts of your conversations.");
			t3 = space();
			p1 = element("p");
			t4 = text("The three big makers of smart speakers—Amazon, Apple, and Google—say they do this to improve the device’s performance, not for targeting ads. But privacy advocates argue that, without prior notice, any listening from employees and contractors is unfair to consumers.");
			t5 = space();
			div = element("div");
			create_component(btn0.$$.fragment);
			t6 = space();
			create_component(btn1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Internet of things( Alexa, Home devices)");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			p0 = claim_element(section_nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "It should be clear by now that your daily interactions technology, let alone your smart speaker are anything but private. A series of investigative reports have shown that other people are reviewing recordings or transcripts of your conversations.");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			p1 = claim_element(section_nodes, "P", {});
			var p1_nodes = children(p1);
			t4 = claim_text(p1_nodes, "The three big makers of smart speakers—Amazon, Apple, and Google—say they do this to improve the device’s performance, not for targeting ads. But privacy advocates argue that, without prior notice, any listening from employees and contractors is unfair to consumers.");
			p1_nodes.forEach(detach_dev);
			t5 = claim_space(section_nodes);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(btn0.$$.fragment, div_nodes);
			t6 = claim_space(div_nodes);
			claim_component(btn1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 21, 1, 712);
			add_location(p0, file, 22, 1, 764);
			add_location(p1, file, 24, 1, 1023);
			attr_dev(div, "class", "button-holder svelte-338bov");
			add_location(div, file, 25, 1, 1298);
			add_location(section, file, 20, 0, 701);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h2);
			append_dev(h2, t0);
			append_dev(section, t1);
			append_dev(section, p0);
			append_dev(p0, t2);
			append_dev(section, t3);
			append_dev(section, p1);
			append_dev(p1, t4);
			append_dev(section, t5);
			append_dev(section, div);
			mount_component(btn0, div, null);
			append_dev(div, t6);
			mount_component(btn1, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const btn0_changes = {};

			if (dirty & /*$$scope*/ 256) {
				btn0_changes.$$scope = { dirty, ctx };
			}

			btn0.$set(btn0_changes);
			const btn1_changes = {};

			if (dirty & /*$$scope*/ 256) {
				btn1_changes.$$scope = { dirty, ctx };
			}

			btn1.$set(btn1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(btn0.$$.fragment, local);
			transition_in(btn1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(btn0.$$.fragment, local);
			transition_out(btn1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(btn0);
			destroy_component(btn1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(20:0) {#if $step==0}",
		ctx
	});

	return block;
}

// (85:2) <Complete>
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Next Challenge");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Next Challenge");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(85:2) <Complete>",
		ctx
	});

	return block;
}

// (36:2) {#if current==='amazon'}
function create_if_block_4(ctx) {
	let ul;
	let li0;
	let t0;
	let t1;
	let li1;
	let t2;
	let t3;
	let li2;
	let t4;
	let t5;
	let li3;
	let t6;

	const block = {
		c: function create() {
			ul = element("ul");
			li0 = element("li");
			t0 = text("Step 1: Open the Alexa app on your smartphone and tap the menu button on the top-left of the screen.");
			t1 = space();
			li1 = element("li");
			t2 = text("Step 2: Select Settings > Alexa Privacy > Manage How Your Data Improves Alexa.");
			t3 = space();
			li2 = element("li");
			t4 = text("Step 3: Switch off the toggle next to Help Improve Amazon Services and Develop New Features.");
			t5 = space();
			li3 = element("li");
			t6 = text("Step 4: Then switch off the toggle next to your name under Use Messages to Improve Transcriptions.");
			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", {});
			var li0_nodes = children(li0);
			t0 = claim_text(li0_nodes, "Step 1: Open the Alexa app on your smartphone and tap the menu button on the top-left of the screen.");
			li0_nodes.forEach(detach_dev);
			t1 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			t2 = claim_text(li1_nodes, "Step 2: Select Settings > Alexa Privacy > Manage How Your Data Improves Alexa.");
			li1_nodes.forEach(detach_dev);
			t3 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", {});
			var li2_nodes = children(li2);
			t4 = claim_text(li2_nodes, "Step 3: Switch off the toggle next to Help Improve Amazon Services and Develop New Features.");
			li2_nodes.forEach(detach_dev);
			t5 = claim_space(ul_nodes);
			li3 = claim_element(ul_nodes, "LI", {});
			var li3_nodes = children(li3);
			t6 = claim_text(li3_nodes, "Step 4: Then switch off the toggle next to your name under Use Messages to Improve Transcriptions.");
			li3_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li0, file, 37, 3, 1600);
			add_location(li1, file, 38, 3, 1713);
			add_location(li2, file, 39, 3, 1804);
			add_location(li3, file, 40, 3, 1909);
			add_location(ul, file, 36, 2, 1592);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);
			append_dev(ul, li0);
			append_dev(li0, t0);
			append_dev(ul, t1);
			append_dev(ul, li1);
			append_dev(li1, t2);
			append_dev(ul, t3);
			append_dev(ul, li2);
			append_dev(li2, t4);
			append_dev(ul, t5);
			append_dev(ul, li3);
			append_dev(li3, t6);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(36:2) {#if current==='amazon'}",
		ctx
	});

	return block;
}

// (50:2) {#if current==='google'}
function create_if_block_3(ctx) {
	let ul;
	let li0;
	let t0;
	let t1;
	let li1;
	let t2;
	let t3;
	let li2;
	let t4;
	let t5;
	let li3;
	let t6;

	const block = {
		c: function create() {
			ul = element("ul");
			li0 = element("li");
			t0 = text("Step 1: Open the Alexa app on your smartphone and tap the menu button on the top-left of the screen.");
			t1 = space();
			li1 = element("li");
			t2 = text("Step 2: Select Settings > Alexa Privacy > Manage How Your Data Improves Alexa.");
			t3 = space();
			li2 = element("li");
			t4 = text("Step 3: Switch off the toggle next to Help Improve Amazon Services and Develop New Features.");
			t5 = space();
			li3 = element("li");
			t6 = text("Step 4: Then switch off the toggle next to your name under Use Messages to Improve Transcriptions.");
			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", {});
			var li0_nodes = children(li0);
			t0 = claim_text(li0_nodes, "Step 1: Open the Alexa app on your smartphone and tap the menu button on the top-left of the screen.");
			li0_nodes.forEach(detach_dev);
			t1 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			t2 = claim_text(li1_nodes, "Step 2: Select Settings > Alexa Privacy > Manage How Your Data Improves Alexa.");
			li1_nodes.forEach(detach_dev);
			t3 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", {});
			var li2_nodes = children(li2);
			t4 = claim_text(li2_nodes, "Step 3: Switch off the toggle next to Help Improve Amazon Services and Develop New Features.");
			li2_nodes.forEach(detach_dev);
			t5 = claim_space(ul_nodes);
			li3 = claim_element(ul_nodes, "LI", {});
			var li3_nodes = children(li3);
			t6 = claim_text(li3_nodes, "Step 4: Then switch off the toggle next to your name under Use Messages to Improve Transcriptions.");
			li3_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li0, file, 51, 3, 2196);
			add_location(li1, file, 52, 3, 2309);
			add_location(li2, file, 53, 3, 2400);
			add_location(li3, file, 54, 3, 2505);
			add_location(ul, file, 50, 2, 2188);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);
			append_dev(ul, li0);
			append_dev(li0, t0);
			append_dev(ul, t1);
			append_dev(ul, li1);
			append_dev(li1, t2);
			append_dev(ul, t3);
			append_dev(ul, li2);
			append_dev(li2, t4);
			append_dev(ul, t5);
			append_dev(ul, li3);
			append_dev(li3, t6);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(50:2) {#if current==='google'}",
		ctx
	});

	return block;
}

// (64:2) {#if current==='apple'}
function create_if_block_2(ctx) {
	let ul;
	let li0;
	let t0;
	let t1;
	let li1;
	let t2;
	let t3;
	let li2;
	let t4;
	let t5;
	let li3;
	let t6;

	const block = {
		c: function create() {
			ul = element("ul");
			li0 = element("li");
			t0 = text("Step 1: Open the Alexa app on your smartphone and tap the menu button on the top-left of the screen.");
			t1 = space();
			li1 = element("li");
			t2 = text("Step 2: Select Settings > Alexa Privacy > Manage How Your Data Improves Alexa.");
			t3 = space();
			li2 = element("li");
			t4 = text("Step 3: Switch off the toggle next to Help Improve Amazon Services and Develop New Features.");
			t5 = space();
			li3 = element("li");
			t6 = text("Step 4: Then switch off the toggle next to your name under Use Messages to Improve Transcriptions.");
			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", {});
			var li0_nodes = children(li0);
			t0 = claim_text(li0_nodes, "Step 1: Open the Alexa app on your smartphone and tap the menu button on the top-left of the screen.");
			li0_nodes.forEach(detach_dev);
			t1 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			t2 = claim_text(li1_nodes, "Step 2: Select Settings > Alexa Privacy > Manage How Your Data Improves Alexa.");
			li1_nodes.forEach(detach_dev);
			t3 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", {});
			var li2_nodes = children(li2);
			t4 = claim_text(li2_nodes, "Step 3: Switch off the toggle next to Help Improve Amazon Services and Develop New Features.");
			li2_nodes.forEach(detach_dev);
			t5 = claim_space(ul_nodes);
			li3 = claim_element(ul_nodes, "LI", {});
			var li3_nodes = children(li3);
			t6 = claim_text(li3_nodes, "Step 4: Then switch off the toggle next to your name under Use Messages to Improve Transcriptions.");
			li3_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li0, file, 65, 3, 2783);
			add_location(li1, file, 66, 3, 2896);
			add_location(li2, file, 67, 3, 2987);
			add_location(li3, file, 68, 3, 3092);
			add_location(ul, file, 64, 2, 2775);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);
			append_dev(ul, li0);
			append_dev(li0, t0);
			append_dev(ul, t1);
			append_dev(ul, li1);
			append_dev(li1, t2);
			append_dev(ul, t3);
			append_dev(ul, li2);
			append_dev(li2, t4);
			append_dev(ul, t5);
			append_dev(ul, li3);
			append_dev(li3, t6);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(64:2) {#if current==='apple'}",
		ctx
	});

	return block;
}

// (77:2) <Complete>
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Yes, I Did");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Yes, I Did");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(77:2) <Complete>",
		ctx
	});

	return block;
}

// (78:2) <Complete success={false}>
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("No I don't want to");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "No I don't want to");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(78:2) <Complete success={false}>",
		ctx
	});

	return block;
}

// (27:2) <Btn>
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("I own a smart speaker");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "I own a smart speaker");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(27:2) <Btn>",
		ctx
	});

	return block;
}

// (28:2) <Btn q={2}>
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("I don't own a smart speaker");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "I don't own a smart speaker");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(28:2) <Btn q={2}>",
		ctx
	});

	return block;
}

// (19:0) <Trans>
function create_default_slot(ctx) {
	let current_block_type_index;
	let if_block;
	let t;
	let back;
	let current;
	const if_block_creators = [create_if_block, create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$step*/ ctx[1] == 0) return 0;
		if (/*$step*/ ctx[1] == 1) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	back = new Back({ $$inline: true });

	const block = {
		c: function create() {
			if_block.c();
			t = space();
			create_component(back.$$.fragment);
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			t = claim_space(nodes);
			claim_component(back.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, t, anchor);
			mount_component(back, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(t.parentNode, t);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(back.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(back.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(t);
			destroy_component(back, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(19:0) <Trans>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let trans;
	let current;

	trans = new TransHelp({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t = space();
			create_component(trans.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-3r29dh\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			claim_component(trans.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Internet of things( Alexa, Home devices)";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(trans, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const trans_changes = {};

			if (dirty & /*$$scope, $step, current*/ 259) {
				trans_changes.$$scope = { dirty, ctx };
			}

			trans.$set(trans_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(trans.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(trans.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_component(trans, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $quizSteps;
	let $count;
	let $step;
	validate_store(quizSteps, "quizSteps");
	component_subscribe($$self, quizSteps, $$value => $$invalidate(5, $quizSteps = $$value));
	validate_store(count, "count");
	component_subscribe($$self, count, $$value => $$invalidate(6, $count = $$value));
	validate_store(step, "step");
	component_subscribe($$self, step, $$value => $$invalidate(1, $step = $$value));
	const dispatch = createEventDispatcher();

	//sets aside icon to in progress via store
	onMount(async () => {
		set_store_value(quizSteps, $quizSteps[$count].status = 1, $quizSteps);
	});

	let current = "initial";
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Q7> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Q7", $$slots, []);
	const click_handler = () => $$invalidate(0, current = "amazon");
	const click_handler_1 = () => $$invalidate(0, current = "google");
	const click_handler_2 = () => $$invalidate(0, current = "apple");

	$$self.$capture_state = () => ({
		onMount,
		createEventDispatcher,
		dispatch,
		Trans: TransHelp,
		Complete,
		Btn,
		count,
		step,
		quizSteps,
		Back,
		current,
		$quizSteps,
		$count,
		$step
	});

	$$self.$inject_state = $$props => {
		if ("current" in $$props) $$invalidate(0, current = $$props.current);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [current, $step, click_handler, click_handler_1, click_handler_2];
}

class Q7 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Q7",
			options,
			id: create_fragment.name
		});
	}
}

export default Q7;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicTcuYzE0YmZhY2IuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcXVpei9xNy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0aW1wb3J0IHsgb25Nb3VudCwgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblx0Y29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblx0aW1wb3J0IFRyYW5zIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvVHJhbnNIZWxwLnN2ZWx0ZSc7XG5cdGltcG9ydCBDb21wbGV0ZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NvbXBsZXRlLnN2ZWx0ZScgLy9zZXQgc3VjY2Vzcz17ZmFsc2V9IGZvciBmYWlsdXJlXG5cdGltcG9ydCBCdG4gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CdG4uc3ZlbHRlJyAvL3NldCA8TmV4dCBxPXsyfT4gdG8gc2tpcCBtdWx0aXBsZSBzdGVwc1xuXHRpbXBvcnQgeyBjb3VudCwgc3RlcCwgcXVpelN0ZXBzIH0gZnJvbSAnLi4vLi4vc3RvcmUuanMnXG5cdGltcG9ydCBCYWNrIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQmFjay5zdmVsdGUnXG5cblxuXHQvL3NldHMgYXNpZGUgaWNvbiB0byBpbiBwcm9ncmVzcyB2aWEgc3RvcmVcbiAgICBvbk1vdW50KGFzeW5jKCkgPT4geyRxdWl6U3RlcHNbJGNvdW50XS5zdGF0dXMgPSAxfSk7XG5cblx0bGV0IGN1cnJlbnQgPSAnaW5pdGlhbCc7XG48L3NjcmlwdD5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPkludGVybmV0IG9mIHRoaW5ncyggQWxleGEsIEhvbWUgZGV2aWNlcyk8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxUcmFucz5cbnsjaWYgJHN0ZXA9PTB9XG48c2VjdGlvbj5cblx0PGgyPkludGVybmV0IG9mIHRoaW5ncyggQWxleGEsIEhvbWUgZGV2aWNlcyk8L2gyPiBcblx0PHA+SXQgc2hvdWxkIGJlIGNsZWFyIGJ5IG5vdyB0aGF0IHlvdXIgZGFpbHkgaW50ZXJhY3Rpb25zIHRlY2hub2xvZ3ksIGxldCBhbG9uZSB5b3VyIHNtYXJ0IHNwZWFrZXIgYXJlIGFueXRoaW5nIGJ1dCBwcml2YXRlLiBBIHNlcmllcyBvZiBpbnZlc3RpZ2F0aXZlIHJlcG9ydHMgaGF2ZSBzaG93biB0aGF0IG90aGVyIHBlb3BsZSBhcmUgcmV2aWV3aW5nIHJlY29yZGluZ3Mgb3IgdHJhbnNjcmlwdHMgb2YgeW91ciBjb252ZXJzYXRpb25zLiBcblx0PC9wPlxuXHQ8cD5UaGUgdGhyZWUgYmlnIG1ha2VycyBvZiBzbWFydCBzcGVha2Vyc+KAlEFtYXpvbiwgQXBwbGUsIGFuZCBHb29nbGXigJRzYXkgdGhleSBkbyB0aGlzIHRvIGltcHJvdmUgdGhlIGRldmljZeKAmXMgcGVyZm9ybWFuY2UsIG5vdCBmb3IgdGFyZ2V0aW5nIGFkcy4gQnV0IHByaXZhY3kgYWR2b2NhdGVzIGFyZ3VlIHRoYXQsIHdpdGhvdXQgcHJpb3Igbm90aWNlLCBhbnkgbGlzdGVuaW5nIGZyb20gZW1wbG95ZWVzIGFuZCBjb250cmFjdG9ycyBpcyB1bmZhaXIgdG8gY29uc3VtZXJzLjwvcD5cblx0PGRpdiBjbGFzcz1cImJ1dHRvbi1ob2xkZXJcIj5cblx0XHQ8QnRuPkkgb3duIGEgc21hcnQgc3BlYWtlcjwvQnRuPlxuXHRcdDxCdG4gcT17Mn0+SSBkb24ndCBvd24gYSBzbWFydCBzcGVha2VyPC9CdG4+XG5cdDwvZGl2PlxuPC9zZWN0aW9uPlxuezplbHNlIGlmICRzdGVwPT0xfVxuPHNlY3Rpb24+XG5cdDxkaXYgY2xhc3M6YWN0aXZlPVwie2N1cnJlbnQgPT09ICdhbWF6b24nfVwiXG5cdG9uOmNsaWNrPVwieygpID0+IGN1cnJlbnQgPSAnYW1hem9uJ31cIj5cblx0XHQ8cD5BbWF6b24gQWxleGE8L3A+XG5cdFx0eyNpZiBjdXJyZW50PT09J2FtYXpvbid9XG5cdFx0PHVsPlxuXHRcdFx0PGxpPlN0ZXAgMTogT3BlbiB0aGUgQWxleGEgYXBwIG9uIHlvdXIgc21hcnRwaG9uZSBhbmQgdGFwIHRoZSBtZW51IGJ1dHRvbiBvbiB0aGUgdG9wLWxlZnQgb2YgdGhlIHNjcmVlbi48L2xpPlxuXHRcdFx0PGxpPlN0ZXAgMjogU2VsZWN0IFNldHRpbmdzID4gQWxleGEgUHJpdmFjeSA+IE1hbmFnZSBIb3cgWW91ciBEYXRhIEltcHJvdmVzIEFsZXhhLjwvbGk+XG5cdFx0XHQ8bGk+U3RlcCAzOiBTd2l0Y2ggb2ZmIHRoZSB0b2dnbGUgbmV4dCB0byBIZWxwIEltcHJvdmUgQW1hem9uIFNlcnZpY2VzIGFuZCBEZXZlbG9wIE5ldyBGZWF0dXJlcy48L2xpPlxuXHRcdFx0PGxpPlN0ZXAgNDogVGhlbiBzd2l0Y2ggb2ZmIHRoZSB0b2dnbGUgbmV4dCB0byB5b3VyIG5hbWUgdW5kZXIgVXNlIE1lc3NhZ2VzIHRvIEltcHJvdmUgVHJhbnNjcmlwdGlvbnMuPC9saT5cblx0XHQ8L3VsPlxuXHRcdHsvaWZ9XG5cdDwvZGl2PlxuXHRcblx0PGhyPlxuXHQ8ZGl2IGNsYXNzOmFjdGl2ZT1cIntjdXJyZW50ID09PSAnZ29vZ2xlJ31cIlxuXHRvbjpjbGljaz1cInsoKSA9PiBjdXJyZW50ID0gJ2dvb2dsZSd9XCI+XG5cdFx0PHA+R29vZ2xlIEFzc2lzdGFudDwvcD5cblx0XHR7I2lmIGN1cnJlbnQ9PT0nZ29vZ2xlJ31cblx0XHQ8dWw+XG5cdFx0XHQ8bGk+U3RlcCAxOiBPcGVuIHRoZSBBbGV4YSBhcHAgb24geW91ciBzbWFydHBob25lIGFuZCB0YXAgdGhlIG1lbnUgYnV0dG9uIG9uIHRoZSB0b3AtbGVmdCBvZiB0aGUgc2NyZWVuLjwvbGk+XG5cdFx0XHQ8bGk+U3RlcCAyOiBTZWxlY3QgU2V0dGluZ3MgPiBBbGV4YSBQcml2YWN5ID4gTWFuYWdlIEhvdyBZb3VyIERhdGEgSW1wcm92ZXMgQWxleGEuPC9saT5cblx0XHRcdDxsaT5TdGVwIDM6IFN3aXRjaCBvZmYgdGhlIHRvZ2dsZSBuZXh0IHRvIEhlbHAgSW1wcm92ZSBBbWF6b24gU2VydmljZXMgYW5kIERldmVsb3AgTmV3IEZlYXR1cmVzLjwvbGk+XG5cdFx0XHQ8bGk+U3RlcCA0OiBUaGVuIHN3aXRjaCBvZmYgdGhlIHRvZ2dsZSBuZXh0IHRvIHlvdXIgbmFtZSB1bmRlciBVc2UgTWVzc2FnZXMgdG8gSW1wcm92ZSBUcmFuc2NyaXB0aW9ucy48L2xpPlxuXHRcdDwvdWw+XG5cdFx0ey9pZn1cblx0PC9kaXY+XG5cdFxuXHQ8aHI+XG5cdDxkaXYgY2xhc3M6YWN0aXZlPVwie2N1cnJlbnQgPT09ICdhcHBsZSd9XCJcblx0b246Y2xpY2s9XCJ7KCkgPT4gY3VycmVudCA9ICdhcHBsZSd9XCI+XG5cdFx0PHA+QXBwbGUgU2lyaTwvcD5cblx0XHR7I2lmIGN1cnJlbnQ9PT0nYXBwbGUnfVxuXHRcdDx1bD5cblx0XHRcdDxsaT5TdGVwIDE6IE9wZW4gdGhlIEFsZXhhIGFwcCBvbiB5b3VyIHNtYXJ0cGhvbmUgYW5kIHRhcCB0aGUgbWVudSBidXR0b24gb24gdGhlIHRvcC1sZWZ0IG9mIHRoZSBzY3JlZW4uPC9saT5cblx0XHRcdDxsaT5TdGVwIDI6IFNlbGVjdCBTZXR0aW5ncyA+IEFsZXhhIFByaXZhY3kgPiBNYW5hZ2UgSG93IFlvdXIgRGF0YSBJbXByb3ZlcyBBbGV4YS48L2xpPlxuXHRcdFx0PGxpPlN0ZXAgMzogU3dpdGNoIG9mZiB0aGUgdG9nZ2xlIG5leHQgdG8gSGVscCBJbXByb3ZlIEFtYXpvbiBTZXJ2aWNlcyBhbmQgRGV2ZWxvcCBOZXcgRmVhdHVyZXMuPC9saT5cblx0XHRcdDxsaT5TdGVwIDQ6IFRoZW4gc3dpdGNoIG9mZiB0aGUgdG9nZ2xlIG5leHQgdG8geW91ciBuYW1lIHVuZGVyIFVzZSBNZXNzYWdlcyB0byBJbXByb3ZlIFRyYW5zY3JpcHRpb25zLjwvbGk+XG5cdFx0PC91bD5cblx0XHR7L2lmfVxuXHQ8L2Rpdj5cblx0XG5cdDxocj5cblx0PGRpdiBjbGFzcz1cImJ1dHRvbi1ob2xkZXJcIj5cblx0XHQ8aDM+RGlkIHlvdSBzZXR1cCBwcml2YWN5IG1vZGU8L2gzPlxuXHRcdDxDb21wbGV0ZT5ZZXMsIEkgRGlkPC9Db21wbGV0ZT5cblx0XHQ8Q29tcGxldGUgc3VjY2Vzcz17ZmFsc2V9Pk5vIEkgZG9uJ3Qgd2FudCB0bzwvQ29tcGxldGU+XG5cdDwvZGl2PlxuPC9zZWN0aW9uPlxuezplbHNlfVxuXHQ8c2VjdGlvbj5cblx0XHQ8aDI+SG9vb3JheSE8L2gyPlxuXHRcdDxwPk9uZSBsZXNzIHdheSBwZW9wbGUgY2FuIHNub29wIG9uIHlvdXIgcHJpdmFjeS48L3A+XG5cdFx0PENvbXBsZXRlPk5leHQgQ2hhbGxlbmdlPC9Db21wbGV0ZT5cblx0PC9zZWN0aW9uPlxuey9pZn1cbjxCYWNrLz5cbjwvVHJhbnM+XG48c3R5bGU+XG4gICAuYnV0dG9uLWhvbGRlciB7XG5cdHdpZHRoOiAyN3Z3O1xuXHRkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgIH1cbjwvc3R5bGU+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFtQ08sR0FBTyxRQUFHLFFBQVE7NkJBY2xCLEdBQU8sUUFBRyxRQUFROzZCQWNsQixHQUFPLFFBQUcsT0FBTzs7Ozs7Ozs7Ozs7O2FBY0gsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NENBN0NMLEdBQU8sUUFBSyxRQUFROzs7OzRDQWNwQixHQUFPLFFBQUssUUFBUTs7Ozs0Q0FjcEIsR0FBTyxRQUFLLE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQkF6QmpDLEdBQU8sUUFBRyxRQUFROzs7Ozs7Ozs7Ozs7NkNBSEosR0FBTyxRQUFLLFFBQVE7OzttQkFpQmxDLEdBQU8sUUFBRyxRQUFROzs7Ozs7Ozs7Ozs7NkNBSEosR0FBTyxRQUFLLFFBQVE7OzttQkFpQmxDLEdBQU8sUUFBRyxPQUFPOzs7Ozs7Ozs7Ozs7NkNBSEgsR0FBTyxRQUFLLE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BakM5QixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dCQVJOLEdBQUssT0FBRSxDQUFDO2dCQVdILEdBQUssT0FBRSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQTVCWCxRQUFRLEdBQUcscUJBQXFCOzs7Q0FTbkMsT0FBTzs2QkFBYSxVQUFVLENBQUMsTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDOzs7S0FFaEQsT0FBTyxHQUFHLFNBQVM7Ozs7Ozs7Ozs2Q0FvQk4sT0FBTyxHQUFHLFFBQVE7K0NBY2xCLE9BQU8sR0FBRyxRQUFROytDQWNsQixPQUFPLEdBQUcsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
