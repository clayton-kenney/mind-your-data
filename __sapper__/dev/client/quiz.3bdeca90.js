import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, a2 as subscribe, a as space, w as create_component, q as query_selector_all, b as detach_dev, c as claim_space, x as claim_component, l as insert_dev, y as mount_component, B as transition_in, z as transition_out, E as destroy_component, n as noop, K as set_store_value, e as element, f as claim_element, g as children, j as attr_dev, k as add_location, t as text, h as claim_text, m as append_dev, T as listen_dev } from './client.f46ef110.js';
import './index.cccde779.js';
import './index.01b49c54.js';
import { T as TransHelp } from './TransHelp.c7151f9b.js';

/* src/routes/quiz.svelte generated by Svelte v3.23.2 */
const file = "src/routes/quiz.svelte";

// (28:4) {:else}
function create_else_block(ctx) {
	let section;
	let h1;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let p1;
	let t4;
	let t5;
	let button;
	let a;
	let t6;

	const block = {
		c: function create() {
			section = element("section");
			h1 = element("h1");
			t0 = text("Chapter 1: Security");
			t1 = space();
			p0 = element("p");
			t2 = text("Through out this challenge, we need your permission to give us one time non-recurring access to your webcam to test your practice.");
			t3 = space();
			p1 = element("p");
			t4 = text("Please click allow for one time non-recurring access to your webcame to move to the next step to complete this challenge.");
			t5 = space();
			button = element("button");
			a = element("a");
			t6 = text("Start Challenge");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			h1 = claim_element(section_nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Chapter 1: Security");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			p0 = claim_element(section_nodes, "P", {});
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "Through out this challenge, we need your permission to give us one time non-recurring access to your webcam to test your practice.");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			p1 = claim_element(section_nodes, "P", {});
			var p1_nodes = children(p1);
			t4 = claim_text(p1_nodes, "Please click allow for one time non-recurring access to your webcame to move to the next step to complete this challenge.");
			p1_nodes.forEach(detach_dev);
			t5 = claim_space(section_nodes);
			button = claim_element(section_nodes, "BUTTON", { id: true, class: true });
			var button_nodes = children(button);
			a = claim_element(button_nodes, "A", { rel: true, href: true });
			var a_nodes = children(a);
			t6 = claim_text(a_nodes, "Start Challenge");
			a_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 29, 8, 1503);
			add_location(p0, file, 30, 8, 1540);
			add_location(p1, file, 31, 8, 1686);
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", "quizmain");
			add_location(a, file, 32, 27, 1842);
			attr_dev(button, "id", "start");
			attr_dev(button, "class", "svelte-1gme2nj");
			add_location(button, file, 32, 8, 1823);
			attr_dev(section, "class", "svelte-1gme2nj");
			add_location(section, file, 28, 4, 1485);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h1);
			append_dev(h1, t0);
			append_dev(section, t1);
			append_dev(section, p0);
			append_dev(p0, t2);
			append_dev(section, t3);
			append_dev(section, p1);
			append_dev(p1, t4);
			append_dev(section, t5);
			append_dev(section, button);
			append_dev(button, a);
			append_dev(a, t6);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(28:4) {:else}",
		ctx
	});

	return block;
}

// (18:26) 
function create_if_block_1(ctx) {
	let section;
	let h1;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let h2;
	let t4;
	let t5;
	let button1;
	let button0;
	let t6;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			section = element("section");
			h1 = element("h1");
			t0 = text("Welcome to Mind Your Data Challenge");
			t1 = space();
			p = element("p");
			t2 = text("Only for educational purpose, this test will utilize blah blah blah. There will be no personal data collected or shared... This test will only  blah blah blah and utilize blah blah blah. There will be no data... This test will only do blah blah blah and utilize blah blah blah. There will be no data... This test will only do blah blah blah and utilize blah blah blah. There will be no data...");
			t3 = space();
			h2 = element("h2");
			t4 = text("this should get converted into a modal");
			t5 = space();
			button1 = element("button");
			button0 = element("button");
			t6 = text("Continue");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			h1 = claim_element(section_nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Welcome to Mind Your Data Challenge");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			p = claim_element(section_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Only for educational purpose, this test will utilize blah blah blah. There will be no personal data collected or shared... This test will only  blah blah blah and utilize blah blah blah. There will be no data... This test will only do blah blah blah and utilize blah blah blah. There will be no data... This test will only do blah blah blah and utilize blah blah blah. There will be no data...");
			p_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t4 = claim_text(h2_nodes, "this should get converted into a modal");
			h2_nodes.forEach(detach_dev);
			t5 = claim_space(section_nodes);
			button1 = claim_element(section_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			button0 = claim_element(button1_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t6 = claim_text(button0_nodes, "Continue");
			button0_nodes.forEach(detach_dev);
			button1_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 19, 8, 837);
			add_location(p, file, 20, 8, 890);
			add_location(h2, file, 22, 8, 1313);
			attr_dev(button0, "class", "svelte-1gme2nj");
			add_location(button0, file, 25, 8, 1398);
			attr_dev(button1, "class", "svelte-1gme2nj");
			add_location(button1, file, 23, 8, 1369);
			attr_dev(section, "class", "svelte-1gme2nj");
			add_location(section, file, 18, 4, 819);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h1);
			append_dev(h1, t0);
			append_dev(section, t1);
			append_dev(section, p);
			append_dev(p, t2);
			append_dev(section, t3);
			append_dev(section, h2);
			append_dev(h2, t4);
			append_dev(section, t5);
			append_dev(section, button1);
			append_dev(button1, button0);
			append_dev(button0, t6);

			if (!mounted) {
				dispose = listen_dev(button0, "click", /*click_handler_1*/ ctx[3], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(18:26) ",
		ctx
	});

	return block;
}

// (11:4) {#if $part === 0}
function create_if_block(ctx) {
	let section;
	let h1;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let button;
	let t4;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			section = element("section");
			h1 = element("h1");
			t0 = text("Welcome to Mind Your Data Challenge");
			t1 = space();
			p = element("p");
			t2 = text("Only for educational purpose, this test will utilize blah blah blah. There will be no personal data collected or shared... This test will only  blah blah blah and utilize blah blah blah. There will be no data... This test will only do blah blah blah and utilize blah blah blah. There will be no data... This test will only do blah blah blah and utilize blah blah blah. There will be no data...");
			t3 = space();
			button = element("button");
			t4 = text("Start Challenge");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			h1 = claim_element(section_nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Welcome to Mind Your Data Challenge");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			p = claim_element(section_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Only for educational purpose, this test will utilize blah blah blah. There will be no personal data collected or shared... This test will only  blah blah blah and utilize blah blah blah. There will be no data... This test will only do blah blah blah and utilize blah blah blah. There will be no data... This test will only do blah blah blah and utilize blah blah blah. There will be no data...");
			p_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			button = claim_element(section_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t4 = claim_text(button_nodes, "Start Challenge");
			button_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 12, 8, 235);
			add_location(p, file, 13, 8, 288);
			attr_dev(button, "class", "svelte-1gme2nj");
			add_location(button, file, 15, 8, 711);
			attr_dev(section, "class", "svelte-1gme2nj");
			add_location(section, file, 11, 4, 217);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h1);
			append_dev(h1, t0);
			append_dev(section, t1);
			append_dev(section, p);
			append_dev(p, t2);
			append_dev(section, t3);
			append_dev(section, button);
			append_dev(button, t4);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[2], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(11:4) {#if $part === 0}",
		ctx
	});

	return block;
}

// (9:0) <Trans>
function create_default_slot(ctx) {
	let main;

	function select_block_type(ctx, dirty) {
		if (/*$part*/ ctx[1] === 0) return create_if_block;
		if (/*$part*/ ctx[1] === 1) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			main = element("main");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			if_block.l(main_nodes);
			main_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(main, "class", "svelte-1gme2nj");
			add_location(main, file, 9, 0, 184);
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			if_block.m(main, null);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(main, null);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(9:0) <Trans>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let trans;
	let current;

	trans = new TransHelp({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t = space();
			create_component(trans.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1tak1mj\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			claim_component(trans.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Data privacy quiz";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(trans, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const trans_changes = {};

			if (dirty & /*$$scope, $part*/ 34) {
				trans_changes.$$scope = { dirty, ctx };
			}

			trans.$set(trans_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(trans.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(trans.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_component(trans, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $part,
		$$unsubscribe_part = noop,
		$$subscribe_part = () => ($$unsubscribe_part(), $$unsubscribe_part = subscribe(part, $$value => $$invalidate(1, $part = $$value)), part);

	$$self.$$.on_destroy.push(() => $$unsubscribe_part());
	let current = "initial";
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Quiz> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Quiz", $$slots, []);
	const click_handler = () => set_store_value(part, $part = 1);
	const click_handler_1 = () => set_store_value(part, $part = 2);
	$$self.$capture_state = () => ({ Trans: TransHelp, current, part, $part });

	$$self.$inject_state = $$props => {
		if ("current" in $$props) current = $$props.current;
		if ("part" in $$props) $$subscribe_part($$invalidate(0, part = $$props.part));
	};

	let part;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	 $$subscribe_part($$invalidate(0, part = 0));
	return [part, $part, click_handler, click_handler_1];
}

class Quiz extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Quiz",
			options,
			id: create_fragment.name
		});
	}
}

export default Quiz;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpei4zYmRlY2E5MC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9xdWl6LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgVHJhbnMgZnJvbSAnLi4vY29tcG9uZW50cy9UcmFuc0hlbHAuc3ZlbHRlJ1xuICAkOnBhcnQgPSAwO1xuICBsZXQgY3VycmVudCA9ICdpbml0aWFsJztcbjwvc2NyaXB0PlxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+RGF0YSBwcml2YWN5IHF1aXo8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxUcmFucz5cbjxtYWluPlxuICAgIHsjaWYgJHBhcnQgPT09IDB9XG4gICAgPHNlY3Rpb24+XG4gICAgICAgIDxoMT5XZWxjb21lIHRvIE1pbmQgWW91ciBEYXRhIENoYWxsZW5nZTwvaDE+XG4gICAgICAgIDxwPlxuICAgICAgICAgICAgT25seSBmb3IgZWR1Y2F0aW9uYWwgcHVycG9zZSwgdGhpcyB0ZXN0IHdpbGwgdXRpbGl6ZSBibGFoIGJsYWggYmxhaC4gVGhlcmUgd2lsbCBiZSBubyBwZXJzb25hbCBkYXRhIGNvbGxlY3RlZCBvciBzaGFyZWQuLi4gVGhpcyB0ZXN0IHdpbGwgb25seSAgYmxhaCBibGFoIGJsYWggYW5kIHV0aWxpemUgYmxhaCBibGFoIGJsYWguIFRoZXJlIHdpbGwgYmUgbm8gZGF0YS4uLiBUaGlzIHRlc3Qgd2lsbCBvbmx5IGRvIGJsYWggYmxhaCBibGFoIGFuZCB1dGlsaXplIGJsYWggYmxhaCBibGFoLiBUaGVyZSB3aWxsIGJlIG5vIGRhdGEuLi4gVGhpcyB0ZXN0IHdpbGwgb25seSBkbyBibGFoIGJsYWggYmxhaCBhbmQgdXRpbGl6ZSBibGFoIGJsYWggYmxhaC4gVGhlcmUgd2lsbCBiZSBubyBkYXRhLi4uIDwvcD5cbiAgICAgICAgPGJ1dHRvbiBvbjpjbGljaz0neygpID0+ICRwYXJ0ID0gMX0nPlN0YXJ0IENoYWxsZW5nZTwvYnV0dG9uPlxuICAgIDwvc2VjdGlvbj5cbiAgICB7OmVsc2UgaWYgJHBhcnQgPT09IDF9XG4gICAgPHNlY3Rpb24+XG4gICAgICAgIDxoMT5XZWxjb21lIHRvIE1pbmQgWW91ciBEYXRhIENoYWxsZW5nZTwvaDE+XG4gICAgICAgIDxwPlxuICAgICAgICAgICAgT25seSBmb3IgZWR1Y2F0aW9uYWwgcHVycG9zZSwgdGhpcyB0ZXN0IHdpbGwgdXRpbGl6ZSBibGFoIGJsYWggYmxhaC4gVGhlcmUgd2lsbCBiZSBubyBwZXJzb25hbCBkYXRhIGNvbGxlY3RlZCBvciBzaGFyZWQuLi4gVGhpcyB0ZXN0IHdpbGwgb25seSAgYmxhaCBibGFoIGJsYWggYW5kIHV0aWxpemUgYmxhaCBibGFoIGJsYWguIFRoZXJlIHdpbGwgYmUgbm8gZGF0YS4uLiBUaGlzIHRlc3Qgd2lsbCBvbmx5IGRvIGJsYWggYmxhaCBibGFoIGFuZCB1dGlsaXplIGJsYWggYmxhaCBibGFoLiBUaGVyZSB3aWxsIGJlIG5vIGRhdGEuLi4gVGhpcyB0ZXN0IHdpbGwgb25seSBkbyBibGFoIGJsYWggYmxhaCBhbmQgdXRpbGl6ZSBibGFoIGJsYWggYmxhaC4gVGhlcmUgd2lsbCBiZSBubyBkYXRhLi4uIDwvcD5cbiAgICAgICAgPGgyPnRoaXMgc2hvdWxkIGdldCBjb252ZXJ0ZWQgaW50byBhIG1vZGFsPC9oMj5cbiAgICAgICAgPGJ1dHRvbj5cbiAgICAgICAgICAgXG4gICAgICAgIDxidXR0b24gb246Y2xpY2s9J3soKSA9PiAkcGFydCA9IDJ9Jz5Db250aW51ZTwvYnV0dG9uPlxuICAgIDwvc2VjdGlvbj5cbiAgICB7OmVsc2V9IFxuICAgIDxzZWN0aW9uPlxuICAgICAgICA8aDE+Q2hhcHRlciAxOiBTZWN1cml0eTwvaDE+XG4gICAgICAgIDxwPlRocm91Z2ggb3V0IHRoaXMgY2hhbGxlbmdlLCB3ZSBuZWVkIHlvdXIgcGVybWlzc2lvbiB0byBnaXZlIHVzIG9uZSB0aW1lIG5vbi1yZWN1cnJpbmcgYWNjZXNzIHRvIHlvdXIgd2ViY2FtIHRvIHRlc3QgeW91ciBwcmFjdGljZS48L3A+XG4gICAgICAgIDxwPlBsZWFzZSBjbGljayBhbGxvdyBmb3Igb25lIHRpbWUgbm9uLXJlY3VycmluZyBhY2Nlc3MgdG8geW91ciB3ZWJjYW1lIHRvIG1vdmUgdG8gdGhlIG5leHQgc3RlcCB0byBjb21wbGV0ZSB0aGlzIGNoYWxsZW5nZS48L3A+XG4gICAgICAgIDxidXR0b24gaWQ9XCJzdGFydFwiPjxhIHJlbD1wcmVmZXRjaCBocmVmPSdxdWl6bWFpbicgPlN0YXJ0IENoYWxsZW5nZTwvYT48L2J1dHRvbj5cbiAgICA8L3NlY3Rpb24+XG4gICAgey9pZn1cbiAgICA8L21haW4+XG48L1RyYW5zPlxuPHN0eWxlPlxuICAgIG1haW4ge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICBmbGV4LWZsb3c6IHJvdztcbiAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgfVxuICAgICAgIC5zdGVwe1xuXHRcdG1hcmdpbi1ib3R0b206IDU1cHg7XG4gICAgICAgfVxuICAgICAgIHNlY3Rpb257XG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6ICMzODQyNEQ7XG4gICAgICAgICAgICAgIHdpZHRoOiA2NXZ3O1xuICAgICAgICAgICAgICBoZWlnaHQ6IDc1dmg7XG4gICAgICAgICAgICAgIC8qaGVpZ2h0OiA4NnZoOyAqL1xuICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xuICAgICAgICAgICAgICBib3JkZXI6IDBweDtcbiAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDkuM3ZoIDV2dyAwdmggOS4zdmg7XG4gICAgICAgICAgICAgIGNvbG9yOiAjRkZGRkZGO1xuICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgIC8qbWFyZ2luLXRvcDogLTUwcHg7XG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyMXZ3O1xuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDUwcHg7XG4gICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7Ki9cbiAgICAgICB9XG4gICAgICAgYnV0dG9ue1xuICAgICAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XG5cdFx0bWFyZ2luOiAxMHB4O1xuXHRcdGJvcmRlcjogYmxhY2sgc29saWQgMHB4O1xuXHRcdGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgICAgfVxuICAgICAgIFxuPC9zdHlsZT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnQkFVUyxHQUFLLFFBQUssQ0FBQztnQkFPTixHQUFLLFFBQUssQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQWRuQixPQUFPLEdBQUcsU0FBUzs7Ozs7Ozs7O21EQVlRLEtBQUssR0FBRyxDQUFDO3FEQVVULEtBQUssR0FBRyxDQUFDOzs7Ozs7Ozs7Ozs7OzttQ0F2QnRDLElBQUksR0FBRyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
